/*
 * Name:	GroupHandler
 * Date:	2017-11-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all about groups on the server.
 */

using Intrusion.Common; 

namespace Intrusion.Server
{
	public class GroupHandler
	{
		//private static fields ["_mGroupProfessionCollection" as PlayerGroupCollection];
		private static fields ["_mProfessionChangeListeners" as Array];
		
		// Creates a GroupHandler object and puts all player groups into the public group
		// professions collection.
		public static method Init {
			private ["_groups" as Array, "_collection" as PlayerGroupCollection];
			
			_mProfessionChangeListeners = [];
			
			// Find all player groups
			
			_groups = [];
			{
				if (!(_x in _groups)) then {
					_groups pushBack _x;
				};
			} foreach (call BIS_fnc_listPlayers);
			
			// Create the group profession collection with all groups as Infantry.
			
			_collection = new PlayerGroupCollection;
			{
				[[_x, ProfessionType.Infantry] new PlayerGroup] call _collection.Add;
			} foreach _groups as Group;
			
			//_mGroupProfessionCollection = _collection;
			// Broadcast the group professions
			//[_mGroupProfessionCollection] call PublicVariableHandler.BroadcastPlayerGroupCollection;
			
			_self.PlayerGroups = _collection;
		};
		
		// Gets the collection of player groups.
		public static property PlayerGroupCollection PlayerGroups { get; private set; };
		
/*		
		// Creates a new player group.
		// _players (Array): The players to add to the group.
		public static method GroupProfession CreateNewGroup {
			params ["_players" as Array];
			private ["_playerGroup" as GroupProfession, "_first" as Boolean];
			
			_first = true;
			
			{
				if (_first) then {
					
				}
				else {
					
				};
				
				_first = false;
			} foreach _players;
			
			_playerGroup = [_players select 0] new GroupProfession;
			
			_playerGroup;
		};
*/

		// Gets a group by its leader.
		// _leader: The player object whose group to find.
		// Returns: A player group. classNull if no group was found.
		public static method PlayerGroup GetGroupByLeader {
			params ["_leader" as Object];
			private "_foundGroup" as PlayerGroup;
			
			scopeName "main";
			_foundGroup = classNull;
			
			{
				_x = _x as PlayerGroup;
				if (leader _x.Group == _leader) then {
					_foundGroup = _x;
					breakTo "main";
				};
			} foreach _self.PlayerGroups;
			
			_foundGroup
		};
		
		// Called when a leader invites a player to his/her group.
		// _leader: The leader of the group.
		// _member: The member that was invited.
		public static method OnPlayerAddedToGroup {
			params ["_leader" as Object];
			private "_member" as PlayerGroup;
			
			//_group = [_leader] call _self.GetGroupByLeader;
		};
		
		// Registeres a group change profession listener to the list of listeners.
		// _listener (IGroupChangingProfessionListener): The object that will listen.
		public static method RegisterGroupChangingProfessionListener {
			params ["_listener" as IGroupChangingProfessionListener];
			_mProfessionChangeListeners pushBack _listener;
		};
		
		// Sets a group's profession to the public variable property.
		// _group (Group): The group to change profession.
		// _professionName (String): The name of the new profession.
		public static method SetGroupProfession {
			params ["_group" as Group, "_professionType" as ProfessionType];
			//private ["_groupProfessions" as PlayerGroupCollection];
			private ["_groupProfession" as PlayerGroup];
			[(str _this) + " GroupHandler.SetGroupProfession"] call LogHandler.Debug;
			
			// Change profession here...
			_groupProfession = [_group, _professionType] new PlayerGroup;
			
			//_groupProfessions = call PublicVariableHandler.GetPlayerGroupCollection;
			[_groupProfession] call _self.PlayerGroups.Add;
			
			// Notify all group change profession listeners
			{
				[_group, _professionType] call _x.OnGroupChangingProfession;
			} foreach _mProfessionChangeListeners as IGroupChangingProfessionListener;
			
			// Tell the clients
			["ClientGroupHandler.OnGroupProfessionChanged", [_group, _professionType]] call Remote.Invoke;
		};
	};
};
