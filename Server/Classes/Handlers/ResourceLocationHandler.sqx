/*
 * Name:	ResourceLocationHandler
 * Date:	2017-11-15
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handler for all resource locations.
 */

using Sqx.Markers;
using Intrusion.Common;
using Intrusion.Communication;
 
namespace Intrusion.Server
{
	public class ResourceLocationHandler
	{
		private static fields ["_mMapMarkersConfig" as IMapMarkersConfig];
		private static fields ["_mResourceLocationCollection" as ResourceLocationCollection];
		
		// Creates a ResourceLocationHandler object and seeds with all found factory- and techlab locations.
		public static method Init("_mapMarkersConfig" as IMapMarkersConfig, "_missionParameters" as MissionParameters) {
			_mMapMarkersConfig = _mapMarkersConfig;
			
			_mResourceLocationCollection = new ResourceLocationCollection;
			_self.FactoryLocationsCount = 0;
			_self.TechLabLocationsCount = 0;
			
			if (_missionParameters.ResourceLocationsInitiallyGuardedByGuerilla) then {
				call _self.CreateGuerillaUnits;
			};
		};
		
		// Gets the location selected as the Winner's location.
		public static property ResourceLocation WinnersLocation { get; private set; };
		
		// Finds all resource locations marked on map with names "FactoryX" and "TechLabX" and creates
		// resource locations for them all.
		public static method AquireAllResourceLocations {
			private ["_number" as Scalar];
			
			// Find all factory locations
			_number = 1;
			while { ["Factory" + str _number] call MarkerHelper.MarkerExists } do
			{
				[["Factory" + str _number, ResourceFacility.Factory] new ResourceLocation] call _mResourceLocationCollection.AddResourceLocation;
				_number = _number + 1;
			};
			
			_self.FactoryLocationsCount = _number - 1;
			
			// Find all techlab locations
			_number = 1;
			while { ["Office" + str _number] call MarkerHelper.MarkerExists } do
			{
				[["Office" + str _number, ResourceFacility.TechLab] new ResourceLocation] call _mResourceLocationCollection.AddResourceLocation;
				_number = _number + 1;
			};
			
			_self.TechLabLocationsCount = _number - 1;
			
			// Set winner's location
			private _resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			private _winnersIndex = floor random count _resourceLocations;
			_self.WinnersLocation = _resourceLocations select _winnersIndex;
			_self.WinnersLocation.IsWinnersLocation = true;
			_self.WinnersLocation.MarkerName setMarkerType _mMapMarkersConfig.WinnersLocationMarkerType;
			
			call _self.BroadcastResourceLocations;
		};
		
		// Broadcasts all resource locations to the clients.
		public static method BroadcastResourceLocations {
			[_mResourceLocationCollection] call PublicVariableHandler.BroadcastResourceLocationCollection;
			
			// Tell the clients to update them.
			["ClientResourceLocationHandler.UpdateResourceLocations", [_mResourceLocationCollection]] call Remote.Invoke;
		};
		
		// Gets a resource location from the internal list of flag locations.
		// _markerName (String): Name of the marker associated with the flag location.
		// Returns (ResourceLocation): A flag location. classNull of no flag location was found.
		private static method ResourceLocation GetResourceLocation("_markerName" as String)
		{
			private ["_resourceLocations" as Array];
			
			scopeName "main";
			
			_resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			
			{
				if (_x.MarkerName == _markerName) then {
					_x breakOut "main";
				};
			} foreach _resourceLocations as ResourceLocation;
			
			classNull
		};
		
		// Sets a new owner for a resource location and sends resource location updates to clients.
		// _markerName (String): Name of the marker associated with the flag.
		// _side (Side): The side of the player that captured the flag.
		public static method SetNewFlagOwner("_markerName" as String, "_side" as Side)
		{
			private ["_resourceLocation" as ResourceLocation];
			private ["_markerInfo" as MapMarkerInfo];
		
			_resourceLocation = [_markerName] call _self.GetResourceLocation;
			
			if (!isNull _resourceLocation) then {
				_resourceLocation.Side = _side;
				
				// Update the flag texture
				_markerInfo = [_side] call _mMapMarkersConfig.GetMapMarkerInfo;
				(_resourceLocation.Flag) setFlagTexture _markerInfo.FlagTexture;
					
				call _self.BroadcastResourceLocations;
				["ClientMessageHandler.ShowHint", [_resourceLocation.Text + " was captured by " + str _side]] call Remote.Invoke;
			};
		};
		
		// Gets the number of factory locations. 
		public static property Scalar FactoryLocationsCount { get; private set; };
		
		// Gets the number of tech lab locations. 
		public static property Scalar TechLabLocationsCount { get; private set; };
		
		// Get the number of factories owned by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of factories owned by the side.
		public static method Scalar GetFactoriesCountBySide("_side" as Side)
		{
			[_side] call _mResourceLocationCollection.GetFactoriesCountBySide
		};
		
		// Get the number of tech labs ownd by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of tech labs owned by the side.
		public static method Scalar GetTechLabsCountBySide("_side" as Side)
		{
			[_side] call _mResourceLocationCollection.GetTechLabsCountBySide
		};
		
		// Creates guarding guerilla units on all resource locations.
		private static method CreateGuerillaUnits()
		{
			private ["_resourceLocations" as Array, "_location" as ResourceLocation, "_pos" as Array, "_marker" as String, "_i" as Scalar, "_group" as Group, "_noOfUnits" as Scalar, "_roadSegments" as Array];
			
			_resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			_i = 0;
			
			{
				_location = _x;
				_i = _i + 1;
				
				// Create a marker
				
				_pos = getMarkerPos _location.MarkerName;
				
				_marker = createMarkerLocal ["GuerillaGuardMarker" + str _i, _pos];
				_marker setMarkerAlpha 1;
				_marker setMarkerSizeLocal [40, 40];
				
				// Create a group
				
				_group = createGroup [independent, true];
				_noOfUnits = (floor random 3) + 1;
				_roadSegments = _pos nearRoads 50;
				
				if (count _roadSegments > 0) then {
					_pos = getPos (selectRandom _roadSegments);
				};
				
				for "_i" from 1 to _noOfUnits do {
					"I_soldier_F" createUnit [_pos, _group];
				};
				
				[_group, _marker, [0,0,0], true] execVM "Engima\SearchPatrol\SearchPatrol.sqf";
			} foreach _resourceLocations as ResourceLocation;
		};
	};
};
