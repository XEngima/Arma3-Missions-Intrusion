/*
 * Name:	FourEastAiUnitCounterConfig
 * Date:	2019-02-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * AI unit counter that allows four units on side east.
 */

using Intrusion.Server;
using Intrusion.Common;

namespace Intrusion.Ai
{
	public class AiUnitBalancer : IAiUnitBalancer
	{
		private fields ["_mUnitCounter" as IUnitCounter, "_mWestAiFrequency" as AiFrequency, "_mEastAiFrequency" as AiFrequency];
		
		public constructor("_unitCounter" as IUnitCounter, "_westAiFrequency" as AiFrequency, "_eastAiFrequency" as AiFrequency)
		{
			_mUnitCounter = _unitCounter;
			
			// If both options are relative, they are falsy, and the frequency is set to 0.
			if ((_westAiFrequency as Scalar) > 1000 && (_eastAiFrequency as Scalar) > 1000) then {
				_westAiFrequency = AiFrequency.None;
				_eastAiFrequency = AiFrequency.None;
			};
		
			_mWestAiFrequency = _westAiFrequency;
			_mEastAiFrequency = _eastAiFrequency;
		};
		
		// Gets the number of AI units allowed for a side.
		public method Scalar GetAllowedUnitCount("_side" as Side)
		{
			private ["_otherSide" as Side, "_ourAiFrequency" as AiFrequency, "_ourUnitCountAllowed" as Scalar, "_theirUnitsInCount" as Scalar, "_factor" as Scalar];
			
			_ourAiFrequency = _mWestAiFrequency;
			_otherSide = east;
			if (_side == east) then {
				_ourAiFrequency = _mEastAiFrequency;
				_otherSide = west;
			};
			
			// If absolute number
			if ((_ourAiFrequency as Scalar) < 1000) then {
				_ourUnitCountAllowed = (_ourAiFrequency as Scalar);
			}
			else // If relative number
			{
				_factor = 1;
				
				switch (_ourAiFrequency) do {
					case AiFrequency.Same: { _factor = 1; };
					case AiFrequency.More25Percent: { _factor = 1.25; };
					case AiFrequency.More50Percent: { _factor = 1.5; };
					case AiFrequency.More75Percent: { _factor = 1.75; };
					case AiFrequency.More100Percent: { _factor = 2; };
					default { player sideChat "Unknown case in AiUnitBalancer.GetAllowedUnitCount." };
				};
				
				_theirUnitsInCount = [_otherSide] call _mUnitCounter.CountUnitsInPlaySide;
				
				_ourUnitCountAllowed = floor (_theirUnitsInCount * _factor);
			};
			
			_ourUnitCountAllowed
		};
	};
};
