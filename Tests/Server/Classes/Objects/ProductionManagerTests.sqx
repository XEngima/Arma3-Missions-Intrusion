/*
 * Name:	ProductionManagerTests
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Tests for the ProductionManager object.
 */

using Sqx.UnitTest;
using Tests.Helpers;
using Intrusion.Common;
using Intrusion.Server;

namespace Tests.Server
{
	public class ProductionManagerTests
	{
		#region Fields
		
		private static fields [
			"_mProfessionVehiclesConfig" as TestProfessionVehiclesConfig,
			"_mVehicleClassNamesConfig" as TestVehicleClassNamesConfig,
			"_mVehicleSpawner" as TestVehicleSpawner, 
			"_mOrderQueue" as OrderQueue, 
			"_mGroup" as Group,
			"_mSquad" as Squad,
			"_mSquadHandler" as TestSquadHandler,
			"_mResourceBook" as ResourceBook, 
			"_mProductionManager" as ProductionManager];
		
		#endregion
		
		// Creates a OrderQueueTests object.
		public static method Init {
			["Tests.Server", "ProductionManagerTests", [
				"NoItemToProduce_Production_NoItemProduced",
				"ItemToProduce_GroupCanAfford_ItemProduced",
				"ItemToProduce_GroupCanNotAfford_ItemNotProduced",
				"TwoItemsToProduce_GroupsCanAffordOne_ItemProduced",
				"TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced",
				"EmptyOrderQueue_GroupChangingProfession_OrderPutInQueue",
				"GroupAlreadyInOrderQueue_GroupChangingProfession_OrderInQueueReplaced",
				"AnotherGroupAlreadyInOrderQueue_GroupChangingProfession_OrderAddedLast",
				"GroupAndAnotherGroupInOrderQueue_GroupChangingProfession_OrderReplacedAndLast",
				"EmptyOrderQueue_GroupChangingToProfessionWithoutVehicle_NoOrderCreated",
				"GroupAlreadyInOrderQueue_GroupChangingProfession_ProductionDeposited"
			]] call TestEngine.Register;
		};
		
		// Creates a production manager and a group.
		private static method BeforeEach {
			_mProfessionVehiclesConfig = new TestProfessionVehiclesConfig;
			_mVehicleClassNamesConfig = new TestVehicleClassNamesConfig;
			_mVehicleSpawner = new TestVehicleSpawner;
			_mOrderQueue = new OrderQueue;
			_mSquadHandler = new TestSquadHandler;
			_mResourceBook = new ResourceBook;
			
			_mGroup = call TestActions.CreatePopulatedGroup;
			_mSquad = [_mGroup, ProfessionType.Armored] new Squad;
			[_mSquad] call _mSquadHandler.SetSquadToReturn;
			
			_mProductionManager = [_mProfessionVehiclesConfig, _mVehicleClassNamesConfig, west, _mVehicleSpawner, _mResourceBook, _mSquadHandler, _mOrderQueue] new ProductionManager;
		};
		
		private static method AfterEach {
			[_mGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method NoItemToProduce_Production_NoItemProduced {
			// Arrange
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but no order exists."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanAfford_ItemProduced {
			private ["_order" as Order];

			// Arrange
			_order = [_mGroup, "TANK", 1000] new Order;
			[_order] call _mOrderQueue.PutOrder;
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			["TANK", _mVehicleSpawner.SpawnedVehicles select 0, "Wrong vehicle spawned."] call Assert.AreEqual;
			[0, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[0, _mResourceBook.TotalProduction, "No production should be left."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanNotAfford_ItemNotProduced {
			private ["_order" as Order];
		
			// Arrange
			_order = [_mGroup, "", 1000] new Order;
			[_order] call _mOrderQueue.PutOrder;
			[100] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but group cannot afford."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Order is removed."] call Assert.AreEqual;
			[100, _mResourceBook.TotalProduction, "Production should not be lost."] call Assert.AreEqual;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordOne_ItemProduced {
			private ["_order" as Order, "_group2" as Group];
		
			// Arrange
			_order = [_mGroup, "", 600] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			_group2 = call TestActions.CreatePopulatedGroup;
			_order = [_group2, "", 600] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[400, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced {
			private ["_order" as Order, "_group2" as Group];
		
			// Arrange
			_order = [_mGroup, "", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			_group2 = call TestActions.CreatePopulatedGroup;
			_order = [_group2, "", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[2, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[200, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method EmptyOrderQueue_GroupChangingProfession_OrderPutInQueue {
			// Arrange
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1, call _mOrderQueue.Count, "There should be an order."] call Assert.AreEqual;
			["B_Truck_01_fuel_F", _mOrderQueue.CurrentOrder.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _mOrderQueue.CurrentOrder.Group, "The order was not assigned to the correct group."] call Assert.AreEqual;
		};
		
		private static method GroupAlreadyInOrderQueue_GroupChangingProfession_OrderInQueueReplaced {
			private ["_order" as Order];
			
			// Arrange
			_order = [_mGroup, "CAR", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			["B_Truck_01_fuel_F", _mOrderQueue.CurrentOrder.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _mOrderQueue.CurrentOrder.Group, "The order was not assigned to the correct group."] call Assert.AreEqual;
		};
		
		private static method AnotherGroupAlreadyInOrderQueue_GroupChangingProfession_OrderAddedLast {
			private ["_anotherGroup" as Group, "_order" as Order];
		
			// Arrange
			_anotherGroup = call TestActions.CreatePopulatedGroup;
			_order = [_anotherGroup, "CAR", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[2, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			["CAR", _mOrderQueue.CurrentOrder.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_anotherGroup, _mOrderQueue.CurrentOrder.Group, "The existing order was changed."] call Assert.AreEqual;
			
			// Cleanup
			[_anotherGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method GroupAndAnotherGroupInOrderQueue_GroupChangingProfession_OrderReplacedAndLast {
			private ["_anotherGroup" as Group, "_order" as Order, "_orders" as Array];
		
			// Arrange
			_anotherGroup = call TestActions.CreatePopulatedGroup;
			_order = [_anotherGroup, "BUS", 600] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			_order = [_mGroup, "CAR", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[2, call _mOrderQueue.Count, "Wrong number of orders in the queue."] call Assert.AreEqual;
			["BUS", _mOrderQueue.CurrentOrder.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_anotherGroup, _mOrderQueue.CurrentOrder.Group, "The existing order was changed."] call Assert.AreEqual;

			_orders = call _mOrderQueue.GetOrders;
			_order = _orders select 1;
			["B_Truck_01_fuel_F", _order.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _order.Group, "The existing order was changed."] call Assert.AreEqual;

			// Cleanup
			[_anotherGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method EmptyOrderQueue_GroupChangingToProfessionWithoutVehicle_NoOrderCreated {
			// Arrange
			
			// Act
			[_mGroup, ProfessionType.Infantry] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[0, call _mOrderQueue.Count, "There should be no order."] call Assert.AreEqual;
		};
		
		private static method GroupAlreadyInOrderQueue_GroupChangingProfession_ProductionDeposited {
			// Arrange
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1100, _mResourceBook.TotalProduction, "Returned profession vehicle did not return production."] call Assert.AreEqual;
		};
	};
};
