/*
 * Name:	DecisionMakerFactory
 * Date:	2019-08-06
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Creates decision makers dependent squad type.
 */

using Intrusion.Common;

namespace Intrusion.Ai
{
	public class DecisionMakerFactory
	{
		private fields ["_mActionServiceFactory" as IActionServiceFactory, "_mWorld" as IWorld, "_mActionPerformer" as IActionPerformer];
	
		// Creates a DecisionMakerFactory object.
		public constructor("_actionServiceFactory" as IActionServiceFactory, "_world" as IWorld, "_actionPerformer" as IActionPerformer)
		{
			_mActionServiceFactory = _actionServiceFactory;
			_mWorld = _world;
			_mActionPerformer = _actionPerformer;
		};
		
		// Creates a decision maker for a certain kind of profession.
		public method DecisionMaker Create("_professionType" as ProfessionType, "_knowledge" as Knowledge)
		{
			private _time = new MissionTime;
		
			switch (_professionType) do {
				case ProfessionType.Motorized: { return [_time, _knowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, new MarkerHandler, new ActionTimeoutConfig] new MotorizedDecisionMaker; };
				case ProfessionType.Mechanized: { return [_time, _knowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, new MarkerHandler, new ActionTimeoutConfig] new MotorizedDecisionMaker; };
				case ProfessionType.Armored: { return [_time, _knowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, new MarkerHandler, new ActionTimeoutConfig] new MotorizedDecisionMaker; };
				case ProfessionType.AttackHelicopter: { return [_time, _knowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, new MarkerHandler, new ActionTimeoutConfig] new MotorizedDecisionMaker; };
			};
			
			return [_time, _knowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, new MarkerHandler, new ActionTimeoutConfig] new DecisionMaker; 
		};
	};
};
