/*
 * Name:	ServerEventHandlers
 * Date:	2019-02-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Container for the server's event handlers.
 */

using Intrusion.Communication;
using Intrusion.Common;

namespace Intrusion.Client
{
	public class ClientEventHandlers
	{
		public constructor()
		{
		};
		
		public static property Object LastInstigator { get; private set; };
		
		public static method Init()
		{
			ClientEventHandlers.LastInstigator = objNull;
			
			// Fires when preload finishes.
			["ClientEventHandlerId_01", "onPreloadFinished",
			{
				// Set the name of the group for the map
				(group player) setVariable ["MapName", name player, true];
				
				if (didJIP) then {
					// Perform JIP stuff
					[gCommonConfig.MapMarkers] call JipService.StartAsync;
				}
				else {
					cutText ["","BLACK IN", 1];
					
					// Show the Welcome tutorial
					[] spawn {
						sleep 1;
						
						if (StartConfig.ShowTutorials) then {
							[TutorialType.Welcome] call TutorialHandler.ShowTutorial;
						};
					};
				};
			}] call BIS_fnc_addStackedEventHandler;
			
			player addEventHandler ["Killed", {
				params ["_unit" as Object, "_killer" as Object, "_instigator" as Object, "_useEffects" as Boolean];
				
				["ClientEventReciever.OnPlayerKilled", [_unit, _killer, _instigator, _useEffects, playerSide]] call Remote.Invoke;
			}];
			
			addMissionEventHandler ["MapSingleClick", {
				params ["_units" as Array, "_pos" as Array, "_alt" as Boolean, "_shift" as Boolean];
				[_pos] call gClient.GiveOrderService.SendMapClick;
			}];
			
			player addEventHandler ["Respawn", {
				params ["_player" as Object, "_corpse"];
				["ClientEventReciever.OnPlayerRespawn", [_player, _corpse]] call Remote.Invoke;
			}];
			
			player addEventHandler ["GetInMan", {
				params ["_unit" as Object, "_role" as String, "_vehicle" as Object, "_turret" as Array];
				//private ["_resourceLocationCollection" as ResourceLocationCollection] // SQX TODO: Why is this "never used"?
				
				if (call PublicVariableHandler.ResourceLocationCollectionHasValue) then {
					private _resourceLocationCollection = call PublicVariableHandler.GetResourceLocationCollection;
					[_resourceLocationCollection] call ClientResourceLocationHandler.UpdateResourceLocations;
				};

				["ClientEventReciever.OnUnitEnteredVehicle", [_unit, [_role] call VehicleRoleMeta.ToVehicleRole, _vehicle, _turret]] call Remote.Invoke;
			}];
			
			player addEventHandler ["GetOutMan", {
				params ["_unit" as Object, "_role" as String, "_vehicle" as Object, "_turret" as Array];
				//private ["_resourceLocationCollection" as ResourceLocationCollection]
				
				if (call PublicVariableHandler.ResourceLocationCollectionHasValue) then {
					private _resourceLocationCollection = call PublicVariableHandler.GetResourceLocationCollection;
					[_resourceLocationCollection] call ClientResourceLocationHandler.UpdateResourceLocations;
				};
			}];
			
			player addEventHandler ["AnimStateChanged", {
				params ["_unit" as Object, "_anim" as String];

				if (_anim == "unconsciousrevivedefault" && !isNull ClientEventHandlers.LastInstigator) then {
					["ClientEventReciever.OnPlayerKilled", [player, ClientEventHandlers.LastInstigator, ClientEventHandlers.LastInstigator, false, playerSide]] call Remote.Invoke;
		    	};
			}];
			
			player addEventHandler ["Hit", {
				params ["_unit" as Object, "_source", "_damage", "_instigator" as Object];
				
				ClientEventHandlers.LastInstigator = _instigator; // TODO SQX: LastInstigator is "inaccessible due to its protection level"?
			}];
			
			player addEventHandler ["InventoryOpened", {
				params ["_unit" as Object, "_container" as Object];
				private ["_intrusionVehicle" as IntrusionVehicle, "_lockContainer" as Boolean];
				
				_intrusionVehicle = _container getVariable ["IntrusionVehicle", classNull];

				_lockContainer = false;
				if (!isNull _intrusionVehicle) then {
					if (!isNull _intrusionVehicle.OwnerGroup && group player != _intrusionVehicle.OwnerGroup) then {
						_lockContainer = true;
						["This cargo space is locked."] call ClientMessageHandler.ShowMessage;
					};
				};
				
				_lockContainer
			}];
			
			player addEventHandler ["SeatSwitchedMan", {
				params ["_unit" as Object, "_unit2" as Object, "_vehicle" as Object];
				["ClientEventReciever.OnUnitChangedSeat", [_unit, _vehicle]] call Remote.Invoke;
			}];
			
			player addEventHandler ["HandleRating", {
				0
			}];
		};
	};
};
