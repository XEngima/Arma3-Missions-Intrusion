/*
 * Name:	AiBrainTests
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test class for AiBrain.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Ai;
using Intrusion.Common;

namespace Intrusion.Tests.Ai
{
	public class AiSquadBrainTests
	{
		#region Fields
		
		private static fields [
			"_mGroup" as Group,
			"_mWorld" as TestWorld,
			"_mMarkerHandler" as TestMarkerHandler,
			"_mActionPerformer" as TestActionPerformer,
			"_mBrain" as AiSquadBrain,
			"_mKnowledge" as IKnowledge,
			"_mRandomGenerator" as TestRandomGenerator,
			"_mLocationFactory1" as ResourceLocation,
			"_mLocationOffice1" as ResourceLocation,
			"_mLocationFactory2" as ResourceLocation,
			"_mLocationOffice2" as ResourceLocation,
			"_mResourceLocationCollection" as ResourceLocationCollection,
			"_mTime" as TestMissionTime,
		];
		
		#endregion

		// Registers all tests that should be run.
		public static method Init {
			["Intrusion.Tests.Ai", "AiSquadBrainTests", [
				"StateIdleAndNoOrder_Act_NotIdleAndHasOrder",
				"AtBaseAttackOrder_Act_StatusMove",
				"MovingToDestinationFarOff_Act_StatusMoving",
				"ArrivingAtDestination_Act_StatusIdle",
				"AtEnemyLocation_Act_StatusCapturing",
				"AfterCapturingLocation_Act_StatusIdle",
				"AttackingLocationCapturedBeforeArrival_Act_StatusIdle",
				"OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle",
				"SquadStationary_Act_TimeoutStatusIdle",
				"SquadTemporaryStationary_Act_NoTimeoutStatusMoving",
				"MovingButNeverArrives_Act_TimeoutStatusIdle",
				"MovingFarAtVehicle_Act_StatusBoardingVehicle",
				"MovingFarVehicleNearby_Act_StatusMoving",
				"MovingToNearbyVehicle_Act_StatusIdle",
				"MovingFarHasBoardedVehicle_Act_StatusMoving",
				"MountedArrivingFarMoving_Act_StatusIdle",
				"MountedCloseToDestinationIdle_Act_StatusDisembarking",
			]] call TestEngine.Register;
		};
		
		private static method BeforeEach()
		{
			private ["_mapMarkerInfo" as MapMarkerInfo];
			
			_mResourceLocationCollection = new ResourceLocationCollection;
			
			_mLocationFactory1 = ["FACTORY1", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice1 = ["OFFICE1", ResourceFacility.TechLab, objNull] new ResourceLocation;
			_mLocationFactory2 = ["FACTORY2", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice2 = ["OFFICE2", ResourceFacility.TechLab, objNull] new ResourceLocation;
			
			[_mLocationFactory1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationFactory2] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice2] call _mResourceLocationCollection.AddResourceLocation;
			
			_mMarkerHandler = new TestMarkerHandler;
			["respawn_marker", [0, 0, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY1", [200, 200, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE1", [400, 400, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY2", [600, 600, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE2", [800, 800, 0]] call _mMarkerHandler.AddMarkerPos;
			
			_mGroup = createGroup west;
			_mWorld = [_mResourceLocationCollection] new TestWorld;
			_mActionPerformer = new TestActionPerformer;
			_mRandomGenerator = [0] new TestRandomGenerator;
			_mKnowledge = [_mGroup] new Knowledge;
			_mTime = [0] new TestMissionTime;
			
			_mapMarkerInfo = [west, "respawn_marker", "carpark_marker", "weapondepot_marker", "flag_texture", "marker_icon_type"] new MapMarkerInfo;
			
			_mBrain = [_mGroup, _mWorld, _mActionPerformer, _mRandomGenerator, _mMarkerHandler, new TestActionTimeoutConfig, _mTime, _mapMarkerInfo, _mKnowledge] new AiSquadBrain;
		};
		
		private static method AfterEach()
		{
			deleteGroup _mGroup;
		};
		
		private static method StateIdleAndNoOrder_Act_NotIdleAndHasOrder
		{
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.State = AiSquadState.Idle;
			_mRandomGenerator.Number = 0;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not make a decision."] call Assert.AreNotEqual;
			[_mKnowledge.Order, "AI did not create an order."] call Assert.IsNotNull;
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method AtBaseAttackOrder_Act_StatusMove
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.State = AiSquadState.Idle;
			_mRandomGenerator.Number = 0;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI did not start movement."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not decide to perform a move action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			[[200, 200, 0], _moveAction.Position, "AI moves to the wrong destination."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOff_Act_StatusMoving
		{
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mWorld.LeaderPos = [10, 10, 0];
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI movement was interrupted."] call Assert.AreEqual;
		};
		
		private static method ArrivingAtDestination_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [190, 190, 0];
			_mLocationFactory1.Side = east;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not halt at flag."] call Assert.AreEqual;
		};
		
		private static method AtEnemyLocation_Act_StatusCapturing
		{
			// Arrange
			_mWorld.LeaderPos = [210, 210, 0];
			_mWorld.SquadPresenceAtResourceLocation = true;
			_mLocationFactory1.Side = east;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Capturing, _mKnowledge.State, "AI has not changed state to capturing."] call Assert.AreEqual;
			[1, count _mActionPerformer.CaptureActions, "AI is not capturing."] call Assert.AreEqual;
		};
		
		private static method AfterCapturingLocation_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [190, 190, 0];
			_mWorld.SquadPresenceAtResourceLocation = true;
			_mLocationFactory1.Side = west;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Capturing;
			_mKnowledge.CurrentAction = [60, [200, 200, 0], "FACTORY1"] new CaptureAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI trying to capture own flag."] call Assert.AreEqual;
		};
		
		private static method AttackingLocationCapturedBeforeArrival_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [25, 25, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			//_mLocationFactory1.Side = west;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI attacking but location is already captured."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [410, 410, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [400, 400, 0], _mLocationOffice1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			//_action = _mKnowledge.CurrentAction as MoveAction;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method SquadStationary_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [350, [200, 200, 0], "FACTORY1"] new MoveAction;
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 295;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not stationary enough but timed out."] call Assert.AreEqual;
		};
		
		private static method SquadTemporaryStationary_Act_NoTimeoutStatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 285;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI stationary but did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingButNeverArrives_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI movement did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingFarAtVehicle_Act_StatusBoardingVehicle
		{
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [10, 10, 0], 2] new AiVehicle;
			_mWorld.AllSquadMembersOnBoard = false;
			_mKnowledge.MembersCount = 1;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.BoardingVehicle, _mKnowledge.State, "AI not boarding nearby vehicle."] call Assert.AreEqual;
			[1, count _mActionPerformer.BoardActions, "AI did not perform a board action."] call Assert.AreEqual;
		};
		
		private static method MovingToNearbyVehicle_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [25, 25, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [30, 30, 0], 2] new AiVehicle;
			_mWorld.AllSquadMembersOnBoard = false;
			_mKnowledge.MembersCount = 1;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.CurrentAction = [30, [30, 30, 0], "FACTORY2"] new MoveAction;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dit not stop at vehicle."] call Assert.AreEqual;
		};
		
		private static method MovingFarVehicleNearby_Act_StatusMoving
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [30, 30, 0], 2] new AiVehicle;
			_mWorld.AllSquadMembersOnBoard = false;
			_mKnowledge.MembersCount = 1;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not moving towards nearby vehicle."] call Assert.AreEqual;
			[_mKnowledge.CurrentAction, "Current action not set."] call Assert.IsNotNull;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a board action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			
			[[30, 30, 0], _moveAction.Position, "AI did not perform a board action."] call Assert.AreEqual;
		};
		
		private static method MovingFarHasBoardedVehicle_Act_StatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [15, 15, 0], 2] new AiVehicle;
			_mWorld.AllSquadMembersOnBoard = true;
			_mKnowledge.MembersCount = 2;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not moving with vehicle."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
		};
		
		private static method MountedArrivingFarMoving_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.AllSquadMembersOnBoard = true;
			_mKnowledge.MembersCount = 2;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not stop moving."] call Assert.AreEqual;
			//[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
		};
		
		private static method MountedCloseToDestinationIdle_Act_StatusDisembarking
		{
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.AllSquadMembersOnBoard = true;
			_mKnowledge.MembersCount = 2;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Disembarking, _mKnowledge.State, "AI not disembarking."] call Assert.AreEqual;
			[1, count _mActionPerformer.DisembarkActions, "AI did not perform a disembark action."] call Assert.AreEqual;
		};
		
		/*
		private static method ExplicitOrderToAttackOwnLocationAlreadyPresent_Act_DefendOrderStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [410, 410, 0];
			_mLocationOffice1.Side = west;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [400, 400, 0], _mLocationOffice1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.OrderIsGivenByBrigadeLeader = true;
			_mRandomGenerator.Number = 0;
			
			// Act
			[[_mGroup, OrderType.Attack, [400, 400, 0], _mLocationOffice1] new Order] call _mBrain.GiveOrder;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is not defending."] call Assert.AreEqual;
			[OrderType.Defend, _mKnowledge.Order.Type, "AI's order is not a defent order."] call Assert.AreEqual;
			[[400, 400, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["OFFICE1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		*/
	};
};
