/*
 * Name:	AiService
 * Date:	2019-02-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * The service that performs actions on all AI squads.
 */

using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Ai
{
	public class AiService : IService
	{
		private fields ["_mUnitBalancer" as IAiUnitBalancer, "_mGameplayConfig" as IGameplayConfig, "_mAiSquadHandler" as IAiSquadHandler /* of AiSquad */, "_mVehicleSpawner" as IVehicleSpawner];
		private fields ["_mUnitsConfig" as IAiUnitsConfig, "_mMapMarkersConfig" as IMapMarkersConfig, "_mSquadHandler" as ISquadHandler, "_mSkillLevel" as SkillLevel];
		private fields ["_mResourceLocationHandler" as IResourceLocationHandler];
		private fields ["_mInventedTechnologiesCollection" as InventedTechnologiesCollection];
		
		// Creates a AiService object.
		public constructor("_aiSquadHandler" as IAiSquadHandler, "_unitBalancer" as IAiUnitBalancer, "_gameplayConfig" as IGameplayConfig, "_unitsConfig" as IAiUnitsConfig, "_mapMarkersConfig" as IMapMarkersConfig, "_vehicleSpawner" as IVehicleSpawner, "_squadHandler" as ISquadHandler, "_skillLevel" as SkillLevel, "_resourceLocationHandler" as IResourceLocationHandler, "_inventedTechnologiesCollection" as InventedTechnologiesCollection)
		{
			_mAiSquadHandler = _aiSquadHandler;
			_mUnitBalancer = _unitBalancer;
			_mGameplayConfig = _gameplayConfig;
			_mUnitsConfig = _unitsConfig;
			_mMapMarkersConfig = _mapMarkersConfig;
			_mVehicleSpawner = _vehicleSpawner;
			_mSquadHandler = _squadHandler;
			_mSkillLevel = _skillLevel;
			_mResourceLocationHandler = _resourceLocationHandler;
			_mInventedTechnologiesCollection = _inventedTechnologiesCollection;
		};
		
		public property Boolean IsRunning { get; private set; };
		
//		private method SetProfessionTypeDelayed("_side" as Side, "_unitCount" as Scalar, "_aiSquad" as AiSquad)
//		{
//			private ["_professionType" as ProfessionType];
//			
//			sleep random 120;
//			
//			_professionType = [_side, _unitCount] call _self.GetRandomProfessionType;
//			[_aiSquad.Group, _professionType] call _mSquadHandler.SetSquadProfession;
//		};
		
		// Creates a new squad if more squads are alive.
		private method CreateNewSquads()
		{
			private ["_existingUnitsCount" as Scalar, "_maxUnitsCount" as Scalar, "_unitCount" as Scalar, "_aiSquad" as AiSquad];

			{
				_existingUnitsCount = [_x] call _mAiSquadHandler.CountAllUnitsOfSide;
				_maxUnitsCount = [_x] call _mUnitBalancer.GetAllowedUnitCount;
				_unitCount = selectRandom [1, 2, 2, 2, 3];

        		["Create new squads variables:"] call LogHandler.Debug;
        		["_existingUnitsCount: " + str _existingUnitsCount] call LogHandler.Debug;
        		["_maxUnitsCount: " + str _maxUnitsCount] call LogHandler.Debug;
        		["_unitCount: " + str _unitCount] call LogHandler.Debug;
        	
				if (_existingUnitsCount < _maxUnitsCount) then {
					_aiSquad = [
						_mUnitsConfig, 
						_mResourceLocationHandler, 
						_mMapMarkersConfig, 
						_mVehicleSpawner, 
						_x, 
						_unitCount, 
						_mSkillLevel, 
						_mInventedTechnologiesCollection, 
						_mAiSquadHandler,
						_mSquadHandler] new AiSquad;
					
					[_aiSquad] call _mAiSquadHandler.AddSquad;
					[_aiSquad.Group, ProfessionType.Infantry] call _mSquadHandler.SetSquadProfession;
					//[_x, _unitCount, _aiSquad] spawn _self.SetProfessionTypeDelayed;
				};
			} foreach _mGameplayConfig.CompetingSides as Side;
		};
		
		private method Run()
		{
			private ["_allSquads" as Array];
			
			while { true } do
			{
				_allSquads = call _mAiSquadHandler.GetAllSquads;
				call _self.CreateNewSquads;
				
				{
					call _x.Act;
					sleep 0.1;
				} foreach _allSquads as AiSquad;
				
				sleep 1;
			};
			
			_self.IsRunning = false;
		};
		
		public method RunAsync()
		{
			_self.IsRunning = true;
			[] spawn _self.Run;
		};
	};
};
