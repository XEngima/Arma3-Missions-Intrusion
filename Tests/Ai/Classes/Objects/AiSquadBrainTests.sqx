/*
 * Name:	AiBrainTests
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test class for AiBrain.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Ai;
using Intrusion.Common;

namespace Intrusion.Tests.Ai
{
	public class AiSquadBrainTests
	{
		#region Fields
		
		private static fields [
			"_mGroup" as Group,
			"_mWorld" as TestWorld,
			"_mMarkerHandler" as TestMarkerHandler,
			"_mActionPerformer" as TestActionPerformer,
			"_mBrain" as AiSquadBrain,
			"_mKnowledge" as IKnowledge,
			"_mRandomGenerator" as TestRandomGenerator,
			"_mLocationFactory1" as ResourceLocation,
		];
		
		#endregion

		// Registeres all tests that should be run.
		public static method Init {
			["Intrusion.Tests.Ai", "AiSquadBrainTests", [
				"StateIdleAndNoOrder_MakeDecision_NotIdleAndHasOrder",
				"AtBaseAttackOrder_MakeDecision_StatusMove",
			]] call TestEngine.Register;
		};
		
		private static method BeforeEach()
		{
			private ["_resourceLocationCollection" as ResourceLocationCollection, "_mapMarkerInfo" as MapMarkerInfo];
			
			_resourceLocationCollection = new ResourceLocationCollection;
			
			_mLocationFactory1 = ["FACTORY1", ResourceFacility.Factory, objNull] new ResourceLocation;
			
			[_mLocationFactory1] call _resourceLocationCollection.AddResourceLocation;
			[["OFFICE1", ResourceFacility.TechLab, objNull] new ResourceLocation] call _resourceLocationCollection.AddResourceLocation;
			[["FACTORY2", ResourceFacility.Factory, objNull] new ResourceLocation] call _resourceLocationCollection.AddResourceLocation;
			[["OFFICE2", ResourceFacility.TechLab, objNull] new ResourceLocation] call _resourceLocationCollection.AddResourceLocation;
			
			_mMarkerHandler = new TestMarkerHandler;
			["respawn_marker", [0, 0, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY1", [200, 200, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE1", [400, 400, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY2", [600, 600, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE2", [800, 800, 0]] call _mMarkerHandler.AddMarkerPos;
			
			_mGroup = createGroup west;
			_mWorld = [_resourceLocationCollection] new TestWorld;
			_mActionPerformer = new TestActionPerformer;
			_mRandomGenerator = [0] new TestRandomGenerator;
			_mKnowledge = [_mGroup] new Knowledge;
			
			_mapMarkerInfo = [west, "respawn_marker", "carpark_marker", "weapondepot_marker", "flag_texture", "marker_icon_type"] new MapMarkerInfo;
			
			_mBrain = [_mGroup, _mWorld, _mActionPerformer, _mRandomGenerator, _mapMarkerInfo, _mMarkerHandler, _mKnowledge] new AiSquadBrain;
		};
		
		private static method AfterEach()
		{
			deleteGroup _mGroup;
		};
		
		private static method StateIdleAndNoOrder_MakeDecision_NotIdleAndHasOrder
		{
			// Arrange
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not make a decision."] call Assert.AreNotEqual;
			[_mKnowledge.Order, "AI did not create an order."] call Assert.IsNotNull;
		};
		
		private static method AtBaseAttackOrder_MakeDecision_StatusMove
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.State = AiSquadState.Idle;
			_mRandomGenerator.Number = 0;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI did not start movement."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not decide to perform a move action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			[[200, 200, 0], _moveAction.TargetPos, "AI moves to the wrong destination."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOff_MakeDecision_StatusMoving
		{
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mWorld.LeaderPos = [10, 10, 0];
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI movement was interrupted."] call Assert.AreEqual;
		};
		
		private static method ArrivingAtDestination_MakeDecision_StatusIdle
		{
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mWorld.LeaderPos = [190, 190, 0];
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI moving to far."] call Assert.AreEqual;
		};
		
		private static method AttackingLocation_LocationIsCapturedBeforeArrival_StatusIdle
		{
			// Arrange
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mLocationFactory1.Side = west;
			_mWorld.LeaderPos = [25, 25, 0];
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI attacking but location is already captured."] call Assert.AreEqual;
		};
	};
};
