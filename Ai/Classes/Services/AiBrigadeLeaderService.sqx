/*
 * Name:	AiBrigadeLeaderService
 * Date:	2019-09-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class that models an AI brigade leader, making decisions and giving orders.
 */

using Sqx.Services;
using Intrusion.Common;
using Intrusion.Server;
using Intrusion.Communication;

namespace Intrusion.Ai
{
	public class AiBrigadeLeaderService : Service
	{
		private fields ["_mSide" as Side, "_mSquadHandler" as ISquadHandler, "_mObservationHandler" as ObservationHandler, "_mMessageHandler" as IMessageHandler, "_mMapMarkersConfig" as IMapMarkersConfig, "_mVehicleSpawner" as IVehicleSpawner, "_mBaseConfig" as BaseConfig, "_mMissionTime" as IMissionTime];
		private fields ["_mNextMoveBaseTime" as Scalar, "_mBaseMarkerName" as String, "_mBaseInitialPos" as Array];
		
		public constructor("_side" as Side, "_resourceLocationHandler" as IResourceLocationHandler, "_squadHandler" as ISquadHandler, "_observationHandler" as ObservationHandler, "_messageHandler" as IMessageHandler, "_mapMarkersConfig" as IMapMarkersConfig, "_vehicleSpawner" as IVehicleSpawner, "_baseConfig" as BaseConfig, "_missionTime" as IMissionTime)
		{
			private ["_mapMarkerInfo" as MapMarkerInfo];
			
			call _base.Constructor;
			
			_mSide = _side;
			_mSquadHandler = _squadHandler;
			_mObservationHandler = _observationHandler;
			_mMessageHandler = _messageHandler;
			_mMapMarkersConfig = _mapMarkersConfig;
			_mVehicleSpawner = _vehicleSpawner;
			_mBaseConfig = _baseConfig;
			_mMissionTime = _missionTime;
			
			_mNextMoveBaseTime = ((call _missionTime.GetMissionTime) + 10 + random 10) * 60;
			
			_mapMarkerInfo = [_side] call _mMapMarkersConfig.GetMapMarkerInfo;
			_mBaseMarkerName = _mapMarkerInfo.BaseMarkerName;
			_mBaseInitialPos = getMarkerPos _mBaseMarkerName;
		};
		
		// Uses the smallest quadrant method to find the position closest to all counted markers.
		// _markers (Array): All markers that should count.
		private static method Array FindClosestToMarkersPos("_markers" as Array)
		{
			private ["_topX" as Scalar, "_topY" as Scalar, "_bottomX" as Scalar, "_bottomY" as Scalar];
			private ["_bestPos" as Array, "_quadrantValue" as Scalar, "_bestQuadrantValue" as Scalar];
			
			_topX = getMarkerPos (_markers select 0) select 0;
			_topY = getMarkerPos (_markers select 0) select 1;
			_bottomX = getMarkerPos (_markers select 0) select 0;
			_bottomY = getMarkerPos (_markers select 0) select 1;
			
			{
				private _pos = getMarkerPos _x;
				
				if (_pos select 0 < _topX) then {
					_topX = _pos select 0;
				};
				if (_pos select 0 > _bottomX) then {
					_bottomX = _pos select 0;
				};
				if (_pos select 1 < _bottomY) then {
					_bottomY = _pos select 1;
				};
				if (_pos select 1 > _topY) then {
					_topY = _pos select 1;
				};
			} foreach _markers as String;
			
			private _xx = _topX;
			
			_bestQuadrantValue = -1;
			_bestPos = [_topX, _topY, 0];
			
			while { _xx < _bottomX } do
			{
				private _y = _topY;
				
				while { _y > _bottomY } do
				{
					_quadrantValue = 0;
					
					{
						_quadrantValue = _quadrantValue + (([_xx, _y] distance2D (getMarkerPos _x)) / 1000) ^ 2;
					} foreach _markers as String;
					
					if (_bestQuadrantValue < 0 || _quadrantValue < _bestQuadrantValue) then
					{
						_bestQuadrantValue = _quadrantValue;
						_bestPos = [_xx, _y, 0];
					};
					
					_y = _y - 200;
				};
				
				_xx = _xx + 200;
			};
			
			return _bestPos;
		};
		
		private method Boolean TooCloseToResourceLocation("_pos" as Array)
		{
			private ["_locationCollection" as ResourceLocationCollection, "_resourceLocations" as Array];
			private ["_mapMarkerInfo" as MapMarkerInfo];
			
			_locationCollection = call PublicVariableHandler.GetResourceLocationCollection;
			_resourceLocations = call _locationCollection.GetResourceLocations;
			
			{
				if (_pos distance2D getMarkerPos _x.MarkerName < _mBaseConfig.MinDistanceFromResourceLocation) then
				{
					return true;
				};
			} foreach _resourceLocations as ResourceLocation;
			
			// Check closeness to any base
			
			_mapMarkerInfo = [west] call _mMapMarkersConfig.GetMapMarkerInfo;
			if (_pos distance2D getMarkerPos _mapMarkerInfo.BaseMarkerName < _mBaseConfig.MinDistanceFromResourceLocation) then {
				return true;
			};
			
			_mapMarkerInfo = [east] call _mMapMarkersConfig.GetMapMarkerInfo;
			if (_pos distance2D getMarkerPos _mapMarkerInfo.BaseMarkerName < _mBaseConfig.MinDistanceFromResourceLocation) then {
				return true;
			};
			
			return false;
		};
		
		private method Boolean TooCloseToEnemies("_pos" as Array)
		{
			{
				if ([side group _x, _mSide] call BIS_fnc_sideIsEnemy && { _x distance _pos < 400 }) then
				{
					return true;
				};
			} foreach allUnits as Object;
			
			return false;
		};
		
		// Finds a new base position around a given position.
		// _markPos (Array): The position where to find a base position.
		// _initialRadius (Scalar): Optional. The initial radius how far from the position that is ok. This
		// value will expand until a position is found.
		private method Array FindBasePos("_markPos" as Array, ["_initialRadius" as Scalar, 0])
		{
			private ["_roads" as Array, "_spawnpos", "_randir", "_extendedRadius", "_randis", "_houses", "_vehicles", "_isFlat", "_isOk" as Boolean, "_foundIt", "_tries"];
			private ["_distanceToNearestVehicle" as Scalar, "_distanceFromBuilding" as Scalar, "_allowedSteepness" as Scalar, "_closeRoads" as Array];
			
			_distanceFromBuilding = 25;
			_allowedSteepness = 0.5;
			_distanceToNearestVehicle = 15;
			
			_spawnpos = [];
			_foundIt = false;
			_tries = 0;
			_extendedRadius = 0;
			
			while { _tries < 2500 } do
			{
				scopeName "SpawnPosGen";
				
				_randir = floor random 360;
				_randis = _initialRadius + floor random _extendedRadius;
				_spawnpos = [(_markpos select 0) + ((sin _randir) * _randis), (_markpos select 1) + ((cos _randir) * _randis), 0.1];
				_houses = nearestObjects [_spawnpos, ["house","wall"], 50];
				_vehicles = nearestObjects [_spawnpos, ["LandVehicle", "AirVehicle"], 25];
				_roads = _spawnpos nearRoads _distanceFromBuilding;
				_closeRoads = _spawnpos nearRoads (_distanceFromBuilding + 60);
				_isFlat = _spawnpos isFlatEmpty [2, -1, _allowedSteepness, 10, 0, false, objNull ];
				
				_isOk = true;
				
				private _trees = []; 
				{
				    if (str _x find ": t_" > -1) then {
				        _trees pushBack _x;
				    };
				} forEach nearestObjects [_spawnpos, [], 30];
				
				{ if (floor(_spawnpos distance getPos _x) < _distanceFromBuilding) then { _isOk = false; }; } forEach _houses;
				{ if (floor(_spawnpos distance getPos _x) < _distanceToNearestVehicle) then { _isOk = false; }; } forEach _vehicles;
				if (count _roads > 0 || count _closeRoads == 0) then { _isOk = false; };
				if (count _trees > 10) then { _isOk = false; };
				
				if (surfaceIsWater _spawnpos) then { _isOk = false; };
				if (count _isFlat < 1 ) then { _isOk = false; };
				
				if (_isOk && { [_spawnpos] call _self.TooCloseToResourceLocation }) then { _isOk = false; };
				
				if (_isOk && { [_spawnpos] call _self.TooCloseToEnemies }) then { _isOk = false; };
				
				if (_isOk) then { 
					_foundIt = true;
					breakOut "SpawnPosGen"
				};
				
				_tries = _tries + 1;
				_extendedRadius = _extendedRadius + 1;
				
				sleep 0.01;
			};
			
			if (!_foundIt) then {
				_spawnPos = [];
			};
			
			_spawnpos
		};
		
		protected override method Run()
		{
			private ["_moveBaseService" as MoveBaseService, "_baseLayout" as BaseLayout, "_carParkPos" as Array];
			private ["_locationCollection" as ResourceLocationCollection];
			
			_moveBaseService = classNull;
			
			while { !(call PublicVariableHandler.ResourceLocationCollectionHasValue) } do {
				sleep 1;
			};
			
			_locationCollection = call PublicVariableHandler.GetResourceLocationCollection;
			
			//_winnerLocation = call _locationCollection.GetWinnersLocation;
			//private _winnerLocationPos = getMarkerPos _winnerLocation.MarkerName;
			//private _basePos = _winnerLocationPos getPos [150, random 360];
			private _resourceLocations = call _locationCollection.GetResourceLocations;
			
			private _locationMarkers = [];
			
			{
				_locationMarkers pushBack _x.MarkerName;
			} foreach _resourceLocations as ResourceLocation;
			
			private _basePos = [_locationMarkers] call _self.FindClosestToMarkersPos;
			
			while { !_self.IsCancelling } do
			{
				private _missionTime = call _mMissionTime.GetMissionTime;
				
				if (_missionTime > _mNextMoveBaseTime) then
				{
					_carParkPos = [_basePos, 500] call _self.FindBasePos;
					
					if (count _carParkPos > 0) then
					{
						private _dir = random 360;
						
						_baseLayout = [
							[_carParkPos getPos [30, _dir], _dir + 180] new ViewPos,
							[_carParkPos, _dir + 180] new ViewPos,
							[_carParkPos getPos [20, _dir], _dir + 180] new ViewPos,
						] new BaseLayout;
					
						_moveBaseService = [_mSide, _baseLayout, _mMessageHandler, _mMapMarkersConfig, _mVehicleSpawner, _mBaseConfig] new MoveBaseService;
						call _moveBaseService.RunAsync;
					};
					
					_mNextMoveBaseTime = _mNextMoveBaseTime + 10 * 60 + (random 10) * 60;
					//_mNextMoveBaseTime = _mNextMoveBaseTime + 5 * 60 + (random 5) * 60;
				};
				
				sleep 10;
			};
			
			call _base.Run;
		};
	};
};
