/*
 * Name:	SquadHandler
 * Date:	2017-11-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all about groups on the server.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class SquadHandler
	{
		private static fields ["_mSquads" as SquadCollection];
		private static fields ["_mProfessionChangeListeners" as Array /* of Code */];
		
		// Initializes the SquadHandler object.
		public static method Init {
			_mSquads = new SquadCollection;
			_mProfessionChangeListeners = [];
		};
		
		// Gets a group by its leader.
		// _leader: The player object whose group to find.
		// Returns: A player group. classNull if no group was found.
		public static method Squad GetGroupByLeader {
			params ["_leader" as Object];
			private "_foundSquad" as Squad;
			
			scopeName "main";
			_foundSquad = classNull;
			
			{
				_x = _x as Squad;
				if (leader _x.Group == _leader) then {
					_foundSquad = _x;
					breakTo "main";
				};
			} foreach _mSquads as Squad;
			
			_foundSquad
		};
		
		// Called when a leader invites a player to his/her group.
		// _leader: The leader of the group.
		// _member: The member that was invited.
		public static method OnPlayerAddedToGroup {
			//params ["_leader" as Object];
			//private "_member" as Squad;
			
			//_group = [_leader] call _self.GetGroupByLeader;
		};
		
		// Registers a group change profession listener to the list of listeners.
		// _listener (IGroupChangingProfessionListener): The object that will listen.
		public static method RegisterGroupChangingProfessionListener {
			params ["_listener" as IGroupChangingProfessionListener];
			_mProfessionChangeListeners pushBack _listener;
		};
		
		// Sets a group's profession to the public variable property.
		// This function aquires a lock during runtime.
		// _group (Group): The group to change profession.
		// _professionName (String): The name of the new profession.
		public static method SetSquadProfession {
			params ["_group" as Group, "_professionType" as ProfessionType];
			private ["_squad" as Squad];
			[(str _this) + " SquadHandler.SetSquadProfession"] call LogHandler.Debug;
			
			// Create a new squad and add (or update) it to the list of squads.
			if ([side _group, _professionType] call _mSquads.ProfessionTypeAvailable) then {
				//call SquadCollection.AquireLock; // TODO SQX: Should not be permitted, since SquadCollection is not static. Important!
				call _mSquads.AquireLock;
				
				_squad = [_group, _professionType] new Squad;
				[_squad] call _mSquads.AddOrUpdateSquad;
				
				call _mSquads.RemoveEmptySquads;
				
				// Notify all local group change profession listeners of the current side.
				{
					if (_x.Side == side _group) then {
						[_group, _professionType] call _x.OnGroupChangingProfession;
					};
				} foreach _mProfessionChangeListeners as IGroupChangingProfessionListener;
				
				[_mSquads] call PublicVariableHandler.BroadcastSquads;
				
				// Tell the clients about the change
				["ClientSquadHandler.OnGroupProfessionChanged", [_group, _professionType]] call Remote.Invoke;
				
				call _mSquads.ReleaseLock;
			}
			else {
				// Tell the clients that the change was rejected
				["ClientSquadHandler.OnGroupProfessionChangeRejected", [_group, "Profession is not available."]] call Remote.Invoke;
			};
		};
	};
};
