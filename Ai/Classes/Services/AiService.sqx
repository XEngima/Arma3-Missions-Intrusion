/*
 * Name:	AiService
 * Date:	2019-02-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * The service that performs actions on all AI squads.
 */

using Sqx.Services;
using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Ai
{
	public class AiService : Service
	{
		private fields ["_mUnitBalancer" as IAiUnitBalancer, "_mGameplayConfig" as IGameplayConfig, "_mAiSquadHandler" as IAiSquadHandler /* of AiSquad */];
		private fields ["_mMapMarkersConfig" as IMapMarkersConfig, "_mProfessionConfig" as ProfessionConfig, "_mSquadHandler" as ISquadHandler];
		private fields ["_mResourceLocationHandler" as IResourceLocationHandler, "_mUnitsConfig" as IAiUnitsConfig];
		private fields ["_mUnitSpawner" as IUnitSpawner, "_mResourceLocationConfig" as IResourceLocationConfig, "_mVehicleSpawner" as IVehicleSpawner];
		private fields ["_mEstablishedTechnologiesCollection" as EstablishedTechnologiesCollection, "_mGameLengthMonitor" as IGameLengthMonitor];
		private fields ["_mObservationHandler" as ObservationHandler];

		// Creates a AiService object.
		public constructor(
			"_aiSquadHandler" as IAiSquadHandler, 
			"_unitBalancer" as IAiUnitBalancer, 
			"_gameplayConfig" as IGameplayConfig, 
			"_mapMarkersConfig" as IMapMarkersConfig, 
			"_professionConfig" as ProfessionConfig, 
			"_squadHandler" as ISquadHandler, 
			"_resourceLocationHandler" as IResourceLocationHandler, 
			"_unitSpawner" as IUnitSpawner,
			"_resourceLocationConfig" as IResourceLocationConfig,
			"_unitsConfig" as IAiUnitsConfig,
			"_vehicleSpawner" as IVehicleSpawner,
			"_establishedTechnologiesCollection" as EstablishedTechnologiesCollection,
			"_gameLengthMonitor" as IGameLengthMonitor,
			"_observationHandler" as ObservationHandler)
		{
			call _base.Constructor;
			
			_mAiSquadHandler = _aiSquadHandler;
			_mUnitBalancer = _unitBalancer;
			_mGameplayConfig = _gameplayConfig;
			_mMapMarkersConfig = _mapMarkersConfig;
			_mProfessionConfig = _professionConfig;
			_mSquadHandler = _squadHandler;
			_mResourceLocationHandler = _resourceLocationHandler;
			_mUnitSpawner = _unitSpawner;
			_mResourceLocationConfig = _resourceLocationConfig;
			_mUnitsConfig = _unitsConfig;
			_mVehicleSpawner = _vehicleSpawner;
			_mEstablishedTechnologiesCollection = _establishedTechnologiesCollection;
			_mGameLengthMonitor = _gameLengthMonitor;
			_mObservationHandler = _observationHandler;
		};
		
		// Creates a new squad if more squads are alive.
		private method CreateNewSquads()
		{
			private ["_group" as Group, "_mapMarkerInfo" as MapMarkerInfo, "_unitInfo" as AiUnitInfo, "_time" as MissionTime];
			private ["_existingUnitsCount" as Scalar, "_maxUnitsCount" as Scalar, "_unitCount" as Scalar, "_aiSquad" as AiSquadBrain, "_decisionMaker" as DecisionMaker];

			{
				_existingUnitsCount = [_x] call _mAiSquadHandler.CountAllUnitsOfSide;
				_maxUnitsCount = [_x] call _mUnitBalancer.GetAllowedUnitCount;
				
				if (StartConfig.OnlyOneGroupWithTwoWestlyAiUnits) then {
					_unitCount = 2;
				}
				else {
					_unitCount = selectRandom [1, 1, 2, 2, 2, 2, 2, 3, 3, 4];
				};
				_time = new MissionTime;
				_mapMarkerInfo = [_x] call _mMapMarkersConfig.GetMapMarkerInfo;
				_unitInfo = [_x] call _mUnitsConfig.GetUnitInfo;

				if (_existingUnitsCount < _maxUnitsCount) then
				{
					_group = createGroup _x;
					
					if (_existingUnitsCount + _unitCount > _maxUnitsCount) then {
						_unitCount = _maxUnitsCount - _existingUnitsCount;
					};
					
					for "_i" from 1 to _unitCount do {
						[_unitInfo.UnitClassName, getMarkerPos _mapMarkerInfo.BaseMarkerName, _group] call _mUnitSpawner.CreateUnit;
					};

					private _members = [];
					
					{
						_members pushBack [_x] new UnitContainer;
					} foreach units _group;
					
					private _knowledge = [_group, _members, _mResourceLocationHandler.WinnersLocation] new Knowledge;
					private _actionServiceFactory = new ActionServiceFactory;
					private _world = [_mResourceLocationConfig, _mVehicleSpawner, _mResourceLocationHandler] new World;
					private _actionPerformer = [_group, _mResourceLocationHandler, _mUnitSpawner, _mUnitsConfig] new ActionPerformer;
					private _markerHandler = new MarkerHandler;
					private _actionTimeoutConfig = new ActionTimeoutConfig;
					private _randomGenerator = new RandomGenerator;

					_decisionMaker = [_time, _knowledge, _actionServiceFactory, _world, _actionPerformer, _markerHandler, _actionTimeoutConfig, _mResourceLocationConfig, _randomGenerator] new DecisionMaker;
					
					_aiSquad = [
						_group,
						_world,
						_actionPerformer,
						new RandomGenerator, 
						_markerHandler, 
						_actionTimeoutConfig,
						_time,
						_mapMarkerInfo,
						new AiWeaponsConfig,
						_mEstablishedTechnologiesCollection,
						_knowledge,
						_decisionMaker,
						new BaseConfig,
						_mProfessionConfig,
						_mSquadHandler,
						_mGameLengthMonitor,
						_mResourceLocationConfig
					] new AiSquadBrain;
					
					[_aiSquad] call _mAiSquadHandler.AddSquad;
					[_aiSquad.Group, ProfessionType.Infantry] call _mSquadHandler.SetSquadProfession;
					//[_x, _unitCount, _aiSquad] spawn _self.SetProfessionTypeDelayed;
				};
			} foreach _mGameplayConfig.CompetingSides as Side;
		};
		
		protected override method Run()
		{
			private ["_westArtilleryService" as PseudoArtilleryService, "_eastArtilleryService" as PseudoArtilleryService];
			private ["_westRefuelService" as PseudoRefuelService, "_eastRefuelService" as PseudoRefuelService];
			private ["_allSquads" as Array];
			
			// Start the pseudo artillery and the pseudo refuel services (pseudo in this case means that they will be simulating actions and in effect when there 
			// are no players on the side)
			
			_westArtilleryService = [west, _mObservationHandler, _mEstablishedTechnologiesCollection, _mGameplayConfig.CompetingSides] new PseudoArtilleryService;
			_eastArtilleryService = [east, _mObservationHandler, _mEstablishedTechnologiesCollection, _mGameplayConfig.CompetingSides] new PseudoArtilleryService;
			_westRefuelService = [west, _mVehicleSpawner, _mEstablishedTechnologiesCollection] new PseudoRefuelService;
			_eastRefuelService = [east, _mVehicleSpawner, _mEstablishedTechnologiesCollection] new PseudoRefuelService;
			
			call _westArtilleryService.RunAsync;
			call _eastArtilleryService.RunAsync;
			call _westRefuelService.RunAsync;
			call _eastRefuelService.RunAsync;
			
			// Run the ai service
			
			while { true } do
			{
				_allSquads = call _mAiSquadHandler.GetAllSquads;
				call _self.CreateNewSquads;
				
				{
					private _squad = _x as AiSquadBrain;
					
					call _squad.Act;
					
					sleep 0.1;
				} foreach _allSquads as AiSquadBrain;
				
				sleep 1;
			};
			
			call _base.Run;
		};
		
		private static method Start()
		{
			private ["_aiService" as IService, "_aiUnitBalancer" as IAiUnitBalancer];
			
			sleep 5;
		
			if (StartConfig.OnlyOneGroupWithTwoWestlyAiUnits) then {
				_aiUnitBalancer = new Intrusion.Tests.Helpers.TestAiUnitBalancer;
			}
			else {
				_aiUnitBalancer = [gServer.UnitCounter, gCommon.MissionParametersHandler.AiWestFrequency, gCommon.MissionParametersHandler.AiEastFrequency] new AiUnitBalancer;
			};
			
			_aiService = [
				gServer.AiSquadHandler,
				_aiUnitBalancer, 
				gServerConfig.Gameplay,
				gCommonConfig.MapMarkers,
				gCommonConfig.Professions,
				gServer.SquadHandler, 
				//gCommon.MissionParametersHandler.AiSkillLevel, 
				gServer.ResourceLocationHandler,
				gServer.UnitSpawner,
				gCommonConfig.ResourceLocation,
				//gCommonConfig.Professions,
				new AiUnitsConfig, 
				//new AiWeaponsConfig
				gServer.VehicleSpawner,
				gServer.EstablishedTechnologiesCollection,
				gServer.MissionCounterService,
				gServer.ObservationHandler
			] new AiService;
			
			call _aiService.RunAsync;
		};
		
		public static method StartAsync()
		{
			[] spawn _self.Start;
		};
	};
};
