/*
 * Name:	ProductionManagerTests
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Tests for the ProductionManager object.
 */

using Sqx.UnitTest;
using Tests.Helpers;
using Intrusion.Server;

namespace Tests.Server
{
	public class ProductionManagerTests
	{
		#region Fields
		
		private static fields [
			"_mVehicleSpawner" as TestVehicleSpawner, 
			"_mOrderQueue" as OrderQueue, 
			"_mGroup" as Group, 
			"_mResourceBook" as ResourceBook, 
			"_mProductionManager" as ProductionManager];
		
		#endregion
		
		// Creates a OrderQueueTests object.
		public static method Init {
			["Tests.Server", "ProductionManagerTests", [
				"NoItemToProduce_Production_NoItemProduced",
				"ItemToProduce_GroupCanAfford_ItemProduced",
				"ItemToProduce_GroupCanNotAfford_ItemNotProduced",
				"TwoItemsToProduce_GroupsCanAffordOne_ItemProduced",
				"TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced"
			]] call TestEngine.Register;
		};
		
		// Creates a production manager, and gives it a resource book with 1000 productions.
		private static method BeforeEach {
			_mVehicleSpawner = new TestVehicleSpawner;
			_mOrderQueue = new OrderQueue;
			_mResourceBook = new ResourceBook;
			_mProductionManager = [west, _mVehicleSpawner, _mResourceBook, _mOrderQueue] new ProductionManager;
			
			_mGroup = call TestActions.CreatePopulatedGroup;
		};
		
		private static method AfterEach {
			[_mGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method NoItemToProduce_Production_NoItemProduced {
			private ["_order" as Order];
		
			// Arrange
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but no order exists."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanAfford_ItemProduced {
			private ["_order" as Order];

			// Arrange
			_order = [_mGroup, "TANK", 1000] new Order;
			[_order] call _mOrderQueue.PutOrder;
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			["TANK", _mVehicleSpawner.SpawnedVehicles select 0, "Wrong vehicle spawned."] call Assert.AreEqual;
			[0, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[0, _mResourceBook.TotalProduction, "No production should be left."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanNotAfford_ItemNotProduced {
			private ["_order" as Order];
		
			// Arrange
			_order = [_mGroup, "", 1000] new Order;
			[_order] call _mOrderQueue.PutOrder;
			[100] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but group cannot afford."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Order is removed."] call Assert.AreEqual;
			[100, _mResourceBook.TotalProduction, "Production should not be lost."] call Assert.AreEqual;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordOne_ItemProduced {
			private ["_order" as Order, "_group2" as Group];
		
			// Arrange
			_order = [_mGroup, "", 600] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			_group2 = call TestActions.CreatePopulatedGroup;
			_order = [_group2, "", 600] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[1, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[400, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced {
			private ["_order" as Order, "_group2" as Group];
		
			// Arrange
			_order = [_mGroup, "", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			_group2 = call TestActions.CreatePopulatedGroup;
			_order = [_group2, "", 400] new Order;
			[_order] call _mOrderQueue.PutOrder;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.Produce;
			
			// Assert
			[2, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mOrderQueue.Count, "Order is still active."] call Assert.AreEqual;
			[200, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
	};
};
