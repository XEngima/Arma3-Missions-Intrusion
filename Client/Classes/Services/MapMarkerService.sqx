/*
 * Name:	MapMarkerService
 * Date:	2018-12-16
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Updates the player's map with map markers (observations not included).
 */

using Intrusion.Communication;
using Intrusion.Common;
using Sqx.Markers;

namespace Intrusion.Client
{
	public class MapMarkerService
	{
		private static fields ["_mMapMarkersConfig" as IMapMarkersConfig, "_mProfessionConfig" as ProfessionConfig, "_mSquadMarkersConfig" as ISquadMarkersConfig, "_mSupportServicesConfig" as SupportServicesConfig];
		private static fields ["_mMapMarkers" as Array /* of Marker */, "_mBaseMarker" as Marker, "_mSquadVehicleMarkers" as Array /* of Marker */, "_mSquadMemberMarkers" as Array /* of Marker */];
		private static fields ["_mSupportMarkers" as Array /* of Marker */];
		
		// Initializes the observation service.
		public static method Init("_mapMarkersConfig" as IMapMarkersConfig, "_professionConfig" as ProfessionConfig, "_squadMarkersConfig" as ISquadMarkersConfig, "_supportServicesConfig" as SupportServicesConfig) {
			_mMapMarkersConfig = _mapMarkersConfig;
			_mProfessionConfig = _professionConfig;
			_mSquadMarkersConfig = _squadMarkersConfig;
			_mSupportServicesConfig = _supportServicesConfig;
			_mSquadVehicleMarkers = [];
			_mSquadMemberMarkers = [];
		
			_mMapMarkers = [];
			_mSupportMarkers = [];
			_mBaseMarker = classNull;
		};
		
		// Gets a marker tagged with a certain group.
		// _group (Group): The group whose marker to get.
		// Returns (Marker): The marker associated with the group. classNull if such a marker was not found.
		private static method Marker GetMarkerByGroup("_group" as Group)
		{
			{
				private ["_marker" as Marker];
				_marker = _x as Marker;

				if (_marker.Tag == _group) then {
					return _marker;
				};
			} foreach _mMapMarkers as Marker;
			
			return classNull;
		};
		
		// Gets a support marker tagged with a certain vehicle.
		// _vehicle (Object): The vehicle whose marker to get.
		// Returns (Marker): The marker associated with the vehicle. classNull if such a marker was not found.
		private static method Marker GetSupportMarkerByVehicle("_vehicle" as Object)
		{
			{
				private ["_marker" as Marker];
				_marker = _x as Marker;

				if (_marker.Tag == _vehicle) then {
					return _marker;
				};
			} foreach _mSupportMarkers as Marker;
			
			return classNull;
		};
		
		// Updates all allied forces' markers.
		private static method UpdateAlliedForcesMarkers()
		{
        	private ["_squadCollection" as SquadCollection, "_squad" as Squad, "_leader" as Object, "_profession" as Profession, "_marker" as Marker, "_professionType" as ProfessionType];
        	private ["_squadIsNearVehicle" as Boolean, "_group" as Group, "_mapMarkersToKeep" as Array, "_allNamedGroups" as Array];

			_squadCollection = call PublicVariableHandler.GetSquadCollection;
			
			// Remove all groups that no longer exist or is empty
			_allNamedGroups = [];
			_mapMarkersToKeep = [];
			
			{
				if (_x getVariable ["MapName", ""] != "") then {
					_allNamedGroups pushBack _x;
				};
			} foreach allGroups as Group;
			
			{
				private ["_marker" as Marker];
				_marker = _x as Marker;
				
				_group = _marker.Tag as Group;
				
				if (isNull _group || { count units _group == 0 }) then {
					call _marker.Hide;
				}
				else {
					_mapMarkersToKeep pushBack _marker;
				};
			} foreach _mMapMarkers as Marker;
			
			_mMapMarkers = _mapMarkersToKeep;
			
			
			// Update all groups
    		{
    			private ["_group" as Group];
    			_group = _x as Group;
				_leader = leader _group;

				if (!isNull _leader && side _group == playerSide) then {
        			_squad = [_group] call _squadCollection.GetSquadByGroup;
        			
        			_professionType = ProfessionType.Infantry;
        			_squadIsNearVehicle = false;
        			
        			if (!isNull _squad) then {
        				_professionType = _squad.ProfessionType;
	    				
        				// If units with professions are not in their vehicle.
        				{
        					private ["_vehicle" as IntrusionVehicle];
        					_vehicle = _x as IntrusionVehicle;
        					
        					if (_vehicle.OwnerGroup == _group) then {
	        					if ( { _x distance _vehicle.Vehicle < 30 } count units _squad.Group > 0 ) then {
	        						_squadIsNearVehicle = true;
	        					};
        					};
        				} foreach (call PublicVariableHandler.GetIntrusionVehicles) as Object;
    				};
    				
    				if (!_squadIsNearVehicle) then {
	        			_professionType = ProfessionType.Infantry;
    				};
        			
        			_marker = [_group] call _self.GetMarkerByGroup;
					_profession = [_professionType] call _mProfessionConfig.GetProfession;
        			
        			private _orderInfo = "";
        			
        			if (ClientState.IsBrigadeLeader) then
        			{
        				_orderInfo = _group getVariable ["IntrusionOrderInfo", ""];
        				
	        			if (_orderInfo != "") then {
	        				_orderInfo = " [" + _orderInfo + "]";
	        			};
        			};
        			
        			if (isNull _marker) then {
						_marker = [getPos _leader, _profession.MarkerTypeFriendly, "ColorBlufor", (_group getVariable ["MapName", ""]) + " (" + str count units _group + ")" + _orderInfo] call Marker.CreateIconMarkerLocal;
						_marker.Tag = _group;
						_mMapMarkers pushBack _marker;
        			}
        			else {
        				[getPos _leader] call _marker.SetPosition;
        				[_profession.MarkerTypeFriendly] call _marker.SetType;
        				[(_group getVariable ["MapName", ""]) + " (" + str count units _group + ")" + _orderInfo] call _marker.SetText;
        			};
				};
    		} foreach _allNamedGroups as Group;
		};
		
		private static method Scalar GetVehicleSupportNeed("_vehicle" as Object, "_vehicleNeeds" as Array /* DictionaryItem */)
		{
			{
				if (_vehicle == _x.Key) then {
					return _x.Value;
				};
			} foreach _vehicleNeeds as DictionaryItem;
			
			return 0;
		};
		
		// Puts support warning icons close to all vehicles in need of support.
		private static method UpdateVehiclesInNeedOfSupport()
		{
			private ["_allIntrusionVehicles" as Array /* of IntrusionVehicle */, "_vehicleNeeds" as Array /* of DictionaryItem */];
			private ["_supportMarkersToKeep" as Array /* of Marker */];
			private ["_squadCollection" as SquadCollection, "_squad" as Squad, "_professionType" as ProfessionType];
			
			_professionType = ProfessionType.Undefined;
			_squadCollection = call PublicVariableHandler.GetSquadCollection;
			_squad = [group player] call _squadCollection.GetSquadByGroup;
			
			if (!isNull _squad) then {
				_professionType = _squad.ProfessionType;
			};
			
			_allIntrusionVehicles = call PublicVariableHandler.GetIntrusionVehicles;

			_vehicleNeeds = [];
			_supportMarkersToKeep = [];
			
			// Collect needs for each vehicle
			
			{
				if (_x.Side == side group player) then
				{
					if (_professionType == ProfessionType.Repair) then
					{
						private _damage = ([_x.Vehicle] call Functions.GetVehicleDamage);
						private _health = 1 - _damage;
						
						if (alive _x.Vehicle && ((!canMove _x.Vehicle && _damage > 0) || _damage >= _mSupportServicesConfig.EnableRepairSupportAtDamageLevel)) then
						{
							if (!canMove _x.Vehicle) then {
								_health = 0.25 * _health;
							};
							
							_vehicleNeeds pushBack [_x.Vehicle, _health] new DictionaryItem;
						};
					};
					
					if (_professionType == ProfessionType.Fuel) then
					{
						private _fuel = fuel _x.Vehicle;
						if (alive _x.Vehicle && _fuel <= _mSupportServicesConfig.EnableFuelSupportAtFuelLevel) then
						{
							_vehicleNeeds pushBack [_x.Vehicle, _fuel] new DictionaryItem;
						};
					};
					
					if (_professionType == ProfessionType.Ammo) then
					{	
						if (alive _x.Vehicle) then {
							if (([_x.Vehicle] call Functions.GetVehicleMaxAmmo) > 0) then
							{
								private _ammo = [_x.Vehicle] call Functions.GetVehicleAmmo;
								
								if (_ammo <= _mSupportServicesConfig.EnableAmmoSupportAtAmmoLevel) then
								{
									_vehicleNeeds pushBack [_x.Vehicle, _ammo] new DictionaryItem;
								};
							};
						};						
					};
				};
			} foreach _allIntrusionVehicles as IntrusionVehicle;
			
			// Remove all markers that should not be visible anymore, either if the vehicle is gone, or if it has no need.
			
			{
				private _marker = _x as Marker;				
				private _vehicle = _marker.Tag as Object;
				
				if (isNull _vehicle || { ([_vehicle, _vehicleNeeds] call _self.GetVehicleSupportNeed) == 0 }) then {
					call _marker.Hide;
				}
				else {
					_supportMarkersToKeep pushBack _marker;
				};
			} foreach _mSupportMarkers as Marker;
			
			_mSupportMarkers = _supportMarkersToKeep;


			// Add and update all vehicle support markers
			
			{
				var _marker = [_x.Key] call _self.GetSupportMarkerByVehicle;
				
				if (isNull _marker) then
				{
					private _percent = floor (_x.Value * 100);
					private _color = "ColorYellow";
					
					if (_percent < 50) then {
						_color = "ColorOrange";
					};
					if (_percent < 25) then {
						_color = "ColorRed";
					};

					_marker = [getPos _x.Key, "mil_triangle", _color, "(" + str _percent + "%)"] call Marker.CreateIconMarkerLocal;
					_mSupportMarkers pushBack _marker;
				}
				else
				{
					[getPos _x.Key] call _marker.SetPosition;
				};
			} foreach _vehicleNeeds as DictionaryItem;
		};
		
		// Updates the squad's vehicle marker.
		private static method UpdateSquadVehicleMarker()
		{
			private ["_squadsIntrusionVehicles" as Array /* of IntrusionVehicle */, "_allIntrusionVehicles" as Array /* of IntrusionVehicle */];
			private ["_markedVehicles" as Array /* of Object */, "_markersToKeep" as Array /* of Marker */];
			private ["_marker" as Marker, "_squadsVehicles" as Array];
			
			_markedVehicles = [];
			_markersToKeep = [];
			_squadsIntrusionVehicles = [];
			_squadsVehicles = [];
			
			_allIntrusionVehicles = call PublicVariableHandler.GetIntrusionVehicles;
			
			// Find the vehicles belonging to the squad
			{
				if (_x.OwnerGroup == group player) then {
					_squadsIntrusionVehicles pushBack _x;
					_squadsVehicles pushBack _x.Vehicle;
				};
			} foreach _allIntrusionVehicles as IntrusionVehicle;
			
			// Remove markers that are not squad vehicles
			{
				_marker = _x;
				
				// If the existing marker is for a squad vehicle
				if (_marker.Tag in _squadsVehicles) then {
					[getPos _marker.Tag] call _marker.SetPosition;
					_markedVehicles pushBack _marker.Tag;
					_markersToKeep pushBack _marker;
				}
				else {
					call _marker.Hide;
				};
			} foreach _mSquadVehicleMarkers as Marker;
			
			// See if there are any new vehicles that are not yet marked on the map
			{
				if (!(_x in _markedVehicles)) then {
					_marker = [getPos _x, _mSquadMarkersConfig.SquadVehicleMarkerType, "ColorBlufor"] call Marker.CreateIconMarkerLocal;
					_marker.Tag = _x;
					_markersToKeep pushBack _marker;
					_markedVehicles pushBack _x;
				};
			} foreach _squadsVehicles as Object;
			
			// Set player color of the vehicle that the player is in
			{
				if (_x.Tag == vehicle player) then {
					[_mSquadMarkersConfig.PlayerMarkerColor] call _x.SetColor;
				}
				else {
					["ColorBlufor"] call _x.SetColor;
				};
			} foreach _markersToKeep as Marker;
			
			_mSquadVehicleMarkers = _markersToKeep;
		};
		
		// Updates the base marker.
		private static method UpdateAlliedBaseMarker()
		{
			private ["_markerInfo" as MapMarkerInfo];
			
			_markerInfo = [playerSide] call _mMapMarkersConfig.GetMapMarkerInfo;
			
			if (isNull _mBaseMarker) then {
				_mBaseMarker = [getMarkerPos _markerInfo.BaseMarkerName, _markerInfo.BaseMarkerIconType, "ColorBlufor"] call Marker.CreateIconMarkerLocal;
			};
			
			[(getMarkerPos (_markerInfo.BaseMarkerName))] call _mBaseMarker.SetPosition;
		};
		
		// Updates player and all squad members.
		private static method UpdateSquadMemberMarkers()
		{
			private ["_markedUnits" as Array /* of Object */, "_markersToKeep" as Array /* of Marker */];
			private ["_marker" as Marker];
			
			_markedUnits = [];
			_markersToKeep = [];
		
			// Remove markers that are not squad members (if anyone has left or died or so)
			{
				_marker = _x;
				
				// If the existing marker is for a squad member AND the member is not in a vehicle, then update marker position and keep it
				if (_marker.Tag in units group player && {_marker.Tag == vehicle _marker.Tag}) then {
					[getPos _marker.Tag] call _marker.SetPosition;
					_markedUnits pushBack _marker.Tag;
					_markersToKeep pushBack _marker;
				}
				else {
					call _marker.Hide;
				};
			} foreach _mSquadMemberMarkers as Marker;
			
			// See if there are any new units that ar not yet marked on the map
			{
				if (!(_x in _markedUnits) && {_x == vehicle _x}) then {
					_marker = [getPos _x, _mSquadMarkersConfig.SquadMemberMarkerType, "ColorBlufor"] call Marker.CreateIconMarkerLocal;
					_marker.Tag = _x;
					
//					if (_x == player) then {
//						["Me"] call _marker.SetText;
//					};
					
					_markersToKeep pushBack _marker;
					_markedUnits pushBack _x;
				};
			} foreach (units group player) as Object;
			
			// Set player color
			{
				if (_x.Tag == player) then {
					[_mSquadMarkersConfig.PlayerMarkerColor] call _x.SetColor;
				}
				else {
					["ColorBlufor"] call _x.SetColor;
				};
			} foreach _markersToKeep as Marker;
			
			_mSquadMemberMarkers = _markersToKeep;
		};
		
        // Runs the service.
        private static method Run {
        	waitUntil { call PublicVariableHandler.SquadCollectionHasValue };
			waitUntil { call PublicVariableHandler.IntrusionVehiclesHasValue };

        	while { true } do {
        		call _self.UpdateAlliedBaseMarker;
        		call _self.UpdateAlliedForcesMarkers;
        		call _self.UpdateVehiclesInNeedOfSupport;
        		call _self.UpdateSquadVehicleMarker;
        		call _self.UpdateSquadMemberMarkers;
        		
        		sleep 1;
        	};
		};
		
		// Starts the service
		public static method RunAsync {
			[] spawn _self.Run;
		};
	};
};
