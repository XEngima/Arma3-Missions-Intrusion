/*
 * Name:	ServerEventHandlers
 * Date:	2019-02-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Container for the server's event handlers.
 */

using Intrusion.Server;
using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ServerEventHandlers
	{
		public static method Init()
		{
			// Fires when a JIP player is connecting.
			addMissionEventHandler ["PlayerConnected",
			{
				params ["_id" as Scalar, "_uid" as String, "_name" as String, "_jip" as Boolean, "_owner" as Scalar];
				
				if (_jip) then {
					["ClientEventReciever.OnJipPlayerConnected", [_uid]] call Remote.Invoke;
				};
			}];
			
			addMissionEventHandler ["PlayerDisconnected", {
				params ["_id" as Scalar, "_uid" as String, "_name" as String, "_jip" as Boolean, "_owner" as Scalar];
				
				[_uid] call gServer.BrigadeLeadershipHandler.QuitBrigadeLeadership;
			}];
			
			// Fired when a player leaves the MP game.
			addMissionEventHandler ["HandleDisconnect", {
				params ["_unit" as Object, "_id" as Scalar, "_uid" as String, "_name" as String];
				
				["ClientEventReciever.OnPlayerDisconnected", [_unit, _id, _uid, _name]] call Remote.Invoke;
				
				false
			}];
		};
		
		// Adds the "killed" event handler to a unit.
		// _unit (Object): The unit to add the event handler to.
		public static method AddKilledEventHandler("_unit" as Object)
		{
			_unit addEventHandler ["Killed", {
				params ["_unit" as Object, "_killer" as Object, "_instigator" as Object, "_useEffects" as Boolean];
				private ["_rating" as Scalar, "_addingRating" as Scalar];
				
				// If the killer is an enemy and the killer is an AI, add killed rating.
				if ([side group _unit, side group _killer] call BIS_fnc_sideIsEnemy) then
				{
					_addingRating = [count units group _killer] call gCommon.RatingCalculator.CalculateGroupRatingEnemyKill;
					
					if (isPlayer _killer) then
					{
						["ClientEventReciever.OnAddSquadRating", [_addingRating, group _killer]] call Remote.Invoke;
			        	["Group " + str (group _killer) + " recieved a rating of " + str _addingRating + " for killing " + name _unit] call LogHandler.Debug;
					}
					else {
						_rating = (group _killer) getVariable ["Rating", 0];
						_rating = _rating + _addingRating;
						(group _killer) setVariable ["Rating", _rating];
			        	["AI group " + str (group _killer) + " recieved a rating of " + str _addingRating + " (to " + str ((group _killer) getVariable ["Rating", 0]) + ") for killing " + name _unit] call LogHandler.Debug;
					};
				};
			}];
		};
		
		public static method AddGetInManEventHandler("_unit" as Object)
		{
			_unit addEventHandler ["GetInMan", {
				params ["_unit" as Object, "_role" as String, "_vehicle" as Object, "_turret" as Array];
				["ClientEventReciever.OnUnitEnteredVehicle", [_unit, _role, _vehicle, _turret]] call Remote.Invoke;
			}];
		};
		
		// Adds a rating event handler to a player.
		// _player (Object): The player to add the rating event handler to.
		public static method AddRatingEventHandlerToPlayer("_player" as Object)
		{
			_player addEventHandler ["HandleRating", {
				//params ["_unit" as Object, "_rating" as Scalar];
				
				//["ClientEventReciever.OnAddSquadRating", [_rating, group _unit]] call Remote.Invoke;
				//[_rating, group _unit] call gServer.SquadHandler.AddRatingToSquad;
				
				0
			}];
		};
		
		public static method AddWeaponAssembledEventHandlerToPlayer("_player" as Object)
		{
			_player addEventHandler ["WeaponAssembled", {
				params ["_unit" as Object, "_staticWeapon" as Object];
				private ["_intrusionVehicle" as IntrusionVehicle, "_squad" as Squad];
				
				_squad = [group _unit] call gServer.SquadHandler.GetSquadByGroup;
				
				if (!isNull _squad) then {
					_intrusionVehicle = [_staticWeapon, side group _unit, _squad.ProfessionType, group _unit, 0] new IntrusionVehicle;
					_staticWeapon setVariable ["IntrusionVehicle", _intrusionVehicle, true];
					["ClientEventReciever.OnStaticWeaponAssebled", [_staticWeapon, _unit]] call Remote.Invoke;
				};
			}];		
		};
	};
};
