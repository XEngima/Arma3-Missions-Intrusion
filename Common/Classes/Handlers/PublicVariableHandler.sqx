/*
 * Name:	PublicVariableHandler
 * Date:	2017-11-30
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Encapsulates all global variable handling and keeps its global properties persistent and at sync.
 * over the network.
 *
 * Remarks:
 * This is the *only* only file where the global public network variables are actually written.
 */ 
namespace Intrusion.Common
{
	public class PublicVariableHandler
	{
		private static fields ["_mMapObservationsListeners" as Array /* of Code */];
	
		// Initializes the PublicVariableHandler.
		public static method Init {
			_mMapObservationsListeners = [];
		};
	
		public static method RegisterMapObservationsListener {
			params ["_mapObservationsListener" as Code];
			
			_mMapObservationsListeners pushBack _mapObservationsListener;
		};
	
		// Sets and broadcasts an array of resource locations across the network.
		// _resourceLocations (Array): An array of resource locations.
		public static method BroadcastResourceLocations {
			params ["_resourceLocations" as Array /* of ResourceLocation */];
			INT_Public_resourceLocations = _resourceLocations;
			publicVariable "INT_Public_resourceLocations";
		};
		
		// Gets all resource locations from the public network synchronized variable.
		public static method Array GetResourceLocations { 
			INT_Public_resourceLocations
		};
		
		// Gets whether the resource locations has been set on the current machine or not.
		public static method Boolean ResourceLocationsHasValue {
			!isNil "INT_Public_resourceLocations"
		};

		// Sets and broadcasts an array of squads across the network.
		// _squads (Array): An array of squads.
		public static method BroadcastSquads {
			params ["_squads" as SquadCollection];
			INT_Public_squads = _squads;
			publicVariable "INT_Public_squads";
		};
		
		// Gets all squads from the public network synchronized variable.
		public static method SquadCollection GetSquads { 
			INT_Public_squads
		};
		
		// Gets whether the squads has been set on the current machine or not.
		public static method Boolean SquadsHasValue {
			!isNil "INT_Public_squads"
		};

		// Sets and broadcasts an array of map observations across the network.
		// _mapObservations (Array): An array of map observations.
		public static method BroadcastMapObservations {
			params ["_mapObservations" as Array /* of MapObservation */ ];
			[(str _this) + " PublicVariableHandler.BroadcastMapObservations"] call LogHandler.Debug;
			
			INT_Public_mapObservations = _mapObservations;
			publicVariable "INT_Public_mapObservations";
			[_mapObservations] call _self.OnRecievedMapObservations;
		};
		
		// Triggers all listeners on the map observation public variable.
		// _mapObservations (Array): An array with map observations.
		public static method OnRecievedMapObservations {
			params ["_mapObservations" as Array /* of MapObservation */ ];
			[(str _this) + " PublicVariableHandler.OnRecievedMapObservations"] call LogHandler.Debug;
			
			{
				[_mapObservations] spawn _x;
			} foreach _mMapObservationsListeners as Code;
		};
		
		// Gets all map observations from the public network synchronized variable.
		public static method Array GetMapObservations {
			INT_Public_mapObservations
		};
		
		// Gets whether the map observations has been set on the current machine or not.
		public static method Boolean MapObservationsHasValue {
			!isNil "INT_Public_mapObservations"
		};
	};
	
	// Forwards the map observations broadcasted over the network to OnRecivedMapObservations.
	"INT_Public_mapObservations" addPublicVariableEventHandler {
		[INT_Public_mapObservations] call PublicVariableHandler.OnRecievedMapObservations;
	};
};
