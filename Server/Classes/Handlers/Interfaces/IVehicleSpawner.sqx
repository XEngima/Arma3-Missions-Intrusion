/*
 * Name:	IVehicleSpawner
 * Date:	2018-11-29
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles a side's Intrusion vehcile spawns.
 */

using Intrusion.Common;

namespace Intrusion.Server
{
	public interface IVehicleSpawner
	{
		method IntrusionVehicle SpawnProfessionVehicle(
			"_group" as Group, 
			"_professionType" as ProfessionType, 
			"_vehicleClass" as String, 
			"_cost" as Scalar);
		
		method IntrusionVehicle SpawnFreeVehicle("_side" as Side);
		
		method Scalar CountFreeVehiclesAtBase("_side" as Side);
		
		// Deletes a profession vehicle belonging to a group from the map.
		// _group (Group): The group whose vehicle will be deleted.
		// Returns (Scalar): The production cost of the vehicle.
		method Scalar DeleteProfessionVehicles("_group" as Group);
		
		// Places an existing vehicle on a side's car park.
		method PlaceVehicleOnCarPark("_vehicle" as Object, "_side" as Side, ["_pos" as Array, []]);
		
		// Gets all spawned vehicles.
		// Returns (Array): A list of IntrusionVehicle objects.
		method Array GetAllVehicles();
		
		// Removes squad's ownership of all destroyed vehicles.
		method RemoveOwnershipOfDestroyedVehicles();
		
		// Gets a squad's intrusion vehciels.
		// _group (Group): The group that owns the vehicles.
		// Returns (Array of IntrusionVehicle): A list of the squad's intrusion vehicles.
		method Array GetIntrusionVehiclesByGroup("_group" as Group);
		
		// Gets the nearest working empty free vehicle in relation to a position.
		// _side (Side): The vehicle's side.
		// _pos (Array): The relative position.
		// Returns (IntrusionVehicle): The intrusion vehicle closest to the group.
		method IntrusionVehicle GetNearestEmptyFreeVehicle("_side" as Side, "_pos" as Array);
		
		// Deletes all profession vehicles that have no owner on a side.
		// _side (Side): The side to delete vehicles from.
		// Returns (Scalar): The total production value of the deleted vehicles.
		method Scalar DeleteProfessionVehiclesWithNoOwner("_side" as Side);
	};
};
