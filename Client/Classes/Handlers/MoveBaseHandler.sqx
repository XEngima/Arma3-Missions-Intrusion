/*
 * Name:	MoveBaseHandler
 * Date:	2019-02-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles the brigade leader's base move.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class MoveBaseHandler
	{
		private fields ["_mBaseConfig" as BaseConfig, "_mMarkerHandler" as IMarkerHandler];
		private fields ["_mRespawnPoint" as ViewPos, "_mCarParkPoint" as ViewPos, "_mWeaponDepotPoint" as ViewPos];
		private fields ["_mRespawnArrow" as Object, "_mCarParkArrow" as Object, "_mWeaponDepotArrow" as Object];

		// Creates a MoveBaseHandler object.
		public constructor("_baseConfig" as BaseConfig, "_markerHandler" as IMarkerHandler) {
			_mBaseConfig = _baseConfig;
			_mMarkerHandler = _markerHandler;
			
			_mRespawnArrow = objNull;
			_mCarParkArrow = objNull;
			_mWeaponDepotArrow = objNull;
			
			call _self.Reset;
		};
		
		public method Reset()
		{
			_mRespawnPoint = classNull;
			_mCarParkPoint = classNull;
			_mWeaponDepotPoint = classNull;
			
			if (!isNull _mRespawnArrow) then {
				deleteVehicle _mRespawnArrow;
			};
			if (!isNull _mCarParkArrow) then {
				deleteVehicle _mCarParkArrow;
			};
			if (!isNull _mWeaponDepotArrow) then {
				deleteVehicle _mWeaponDepotArrow;
			};
			
			_mRespawnArrow = objNull;
			_mCarParkArrow = objNull;
			_mWeaponDepotArrow = objNull;
			
			_self.RespawnPointSet = false;
			_self.CarParkPointSet = false;
			_self.WeaponsPointSet = false;
		};
		
		public property Boolean RespawnPointSet { get; private set; };
		public property Boolean CarParkPointSet { get; private set; };
		public property Boolean WeaponsPointSet { get; private set; };
		
		public method Boolean CheckAllPointsSet()
		{
			_self.RespawnPointSet && _self.CarParkPointSet && _self.WeaponsPointSet
		};
		
		public method SetRespawnPoint("_viewPos" as ViewPos)
		{
			_self.RespawnPointSet = true;
			_mRespawnPoint = _viewPos;
			
			if (!isNull _mRespawnArrow) then {
				deleteVehicle _mRespawnArrow;
			};
			
			_mRespawnArrow = _mBaseConfig.MoveBaseRespawnArrowClassName createVehicleLocal _mRespawnPoint.Position;
			_mRespawnArrow setPos _mRespawnPoint.Position;
		};
		
		public method SetCarParkPoint("_viewPos" as ViewPos)
		{
			_self.CarParkPointSet = true;
			_mCarParkPoint = _viewPos;
			
			if (!isNull _mCarParkArrow) then {
				deleteVehicle _mCarParkArrow;
			};
			
			_mCarParkArrow = _mBaseConfig.MoveBaseVehiclesArrowClassName createVehicleLocal _mCarParkPoint.Position;
			_mCarParkArrow setPos _mCarParkPoint.Position;
		};
		
		public method SetWeaponDepotPoint("_viewPos" as ViewPos)
		{
			_self.WeaponsPointSet = true;
			_mWeaponDepotPoint = _viewPos;
			
			if (!isNull _mWeaponDepotArrow) then {
				deleteVehicle _mWeaponDepotArrow;
			};
			
			_mWeaponDepotArrow = _mBaseConfig.MoveBaseWeaponsArrowClassName createVehicleLocal _mWeaponDepotPoint.Position;
			_mWeaponDepotArrow setPos _mWeaponDepotPoint.Position;
		};
		
		public method Boolean Validate()
		{
			if (!_self.RespawnPointSet) then {
				["No respawn position is set.", player] call ClientMessageHandler.ShowMessage;
				return false;
			};
			
			if (!_self.CarParkPointSet) then {
				["No vehicles park position is set.", player] call ClientMessageHandler.ShowMessage;
				return false;
			};
			
			if (!_self.WeaponsPointSet) then {
				["No weapon depot position is set.", player] call ClientMessageHandler.ShowMessage;
				return false;
			};
			
			if (_mCarParkPoint.Position distance _mRespawnPoint.Position > _mBaseConfig.BaseRadius || _mWeaponDepotPoint.Position distance _mRespawnPoint.Position > _mBaseConfig.BaseRadius) then {
				["Too far between base markers. All markers must be within " + str _mBaseConfig.BaseRadius + " meters away from the player respawn marker.", player] call ClientMessageHandler.ShowMessage;
				return false;
			};
			
			// If the new position is too close to a resource location, invalidate.
			if (call PublicVariableHandler.ResourceLocationCollectionHasValue) then
			{
				private ["_locationCollection" as ResourceLocationCollection, "_location" as ResourceLocation, "_locationPos" as Array];

				_locationCollection = call PublicVariableHandler.GetResourceLocationCollection;
				_location = [_mRespawnPoint.Position] call _locationCollection.GetClosestResourceLocation;
				_locationPos = [_location.MarkerName] call _mMarkerHandler.GetMarkerPos;

				if (_locationPos distance _mRespawnPoint.Position < _mBaseConfig.MinDistanceFromResourceLocation + _mBaseConfig.BaseRadius) then
				{
					["Too close to resource location. The respawn position must be at least " + str _mBaseConfig.MinDistanceFromResourceLocation + " meters away from nearest resource location.", player] call ClientMessageHandler.ShowMessage;
					return false;
				};
			};
			
			return true;
		};
		
		public method Boolean StartMoveBaseService()
		{
			private ["_baseLayout" as BaseLayout, "_result" as Boolean];
		
			_result = false;
			
			if (call _self.Validate) then
			{
				_baseLayout = [_mRespawnPoint, _mCarParkPoint, _mWeaponDepotPoint] new BaseLayout;
				["ServerEventReciever.OnLeaderMoveBase", [player, _baseLayout]] call Remote.Invoke;
				
				call _self.Reset;
				_result = true;
			};
			
			_result
		};
	};
};
