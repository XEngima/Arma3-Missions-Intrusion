/*
 * Name:	TestEngine
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class that runs all the registered tests.
 */
namespace Sqx.UnitTest
{
	public class TestEngine
	{
		private static fields ["_mTestUnits" as Array /* of TestUnit */, "_mMethodSucceeded" as Boolean];
		private static fields ["_mCurrentNamespaceName" as String, "_mCurrentClassName" as String, "_mCurrentMethodName" as String];
		
		// Initializes the test engine.
		public static method Init {
			_mTestUnits = [];
		};
		
		// Registeres a test unit (a custom testclass with its test methods) so the testclass' tests can be executed.
		// _namespaceName (String): The dot-separated namespace name for the test class.
		// _className (String): The testclass' name.
		// _methodNames (Array): A list of names reflecting the test methods.
		public static method Register {
			params ["_namespaceName" as String, "_className" as String, "_methodNames" as Array];
			
			_mTestUnits pushBack [_namespaceName, _className, _methodNames] new TestUnit;
		};
		
		// Asserting a test and registeres it as failed.
		// Only used by the test framework, and should never be called explicitly.
		// _message (String): The test's error message to be shown for the test user.
		public static method WriteFailed {
			params ["_message" as String];
			
			player sideChat ("FAILED: " + _mCurrentClassName + "." + _mCurrentMethodName + " - " + _message); // TODO SQX: Should work without parenthesis - ; disappears...
			_mMethodSucceeded = false;
		};
		
		// Replaces a sub string within a string with another string.
		// _str (String): The string to be edited.
		// _find (String): The string to fine.
		// _replace (String): The string to replace the found strings.
		// Returns (String): The replaced string.
		private static method String StringReplace {
			params["_str" as String, "_find" as String, "_replace" as String];
			
			private _return = "";
			private _len = count _find;	
			private _pos = _str find _find;
			
			while {(_pos != -1) && (count _str > 0)} do {
				_return = _return + (_str select [0, _pos]) + _replace;
				
				_str = (_str select [_pos+_len]);
				_pos = _str find _find;
			};
			
			_return + _str;
		};
		
		// Runs all the tests.
		private static method Run {
			private ["_methodCall" as String, "_successCount" as Scalar, "_failedCount" as Scalar, "_testUnit" as TestUnit, "_sConstructorFunction"];
			
			_successCount = 0;
			_failedCount = 0;

			player sideChat "RUNNING TESTS...";
			
			{
				_testUnit = _x;
				
				_sConstructorFunction = ([_testUnit.NamespaceName, ".", "_"] call _self.StringReplace) + "_" + _mCurrentClassName + "_constructor";
				waitUntil { !isNil compile _sConstructorFunction };
				
				_mCurrentNamespaceName = _testUnit.NamespaceName;
				_mCurrentClassName = _testUnit.ClassName;
				
				{
					_mCurrentMethodName = _x;
					_mMethodSucceeded = true;
					
					_methodCall = ([_mCurrentNamespaceName, ".", "_"] call _self.StringReplace) + "_" + _mCurrentClassName + "_" + _mCurrentMethodName + ";";
					
					if (isNil compile _methodCall) then {
						_mMethodSucceeded = false;
						player sideChat ("MISSING: " + _mCurrentClassName + "." + _mCurrentMethodName + " - Test method was not found.");
					}
					else {
						call compile ("call " + _methodCall);
					};
					
					if (_mMethodSucceeded) then {
						_successCount = _successCount + 1;
					}
					else {
						_failedCount = _failedCount + 1;
					};
				} foreach _testUnit.MethodNames as String;
			} foreach _mTestUnits as TestUnit;
			
			player sideChat "TOTAL: " + str (_successCount + _failedCount) + ". SUCCEEDED: " + str _successCount + ". FAILED: " + str _failedCount;
			
			// TODO SQX: Compiles erroneously. The ; after _self.ClassName is lost. And the line number gets messed up.
			//			try {
			//				_currentClassName = _self.ClassName;
			//			
			//				player sideChat "Testing " + _currentClassName + "...";
			//			}
			//			catch {
			//				player sideChat "Test failed: " + _currentClassName + " - " + _exception;
			//			};
		};
		
		// Starts a parallell task that runs all the tests.
		public static method RunAsync {
			[] spawn _self.Run;
		};
	};
};
