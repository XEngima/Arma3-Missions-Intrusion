/*
 * Name:	ResourceLocationCollection
 * Date:	2019-02-21
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models a collection of resource locations.
 */
namespace Intrusion.Common
{
	public class ResourceLocationCollection
	{
		private fields ["_mResourceLocations" as Array];
	
		// Creates a ResourceLocationCollection object.
		public constructor {
			_mResourceLocations = [];
		};
		
		public method Array GetResourceLocations()
		{
			_mResourceLocations
		};
		
		public method AddResourceLocation("_resourceLocation" as ResourceLocation)
		{
			_mResourceLocations pushBack _resourceLocation;
		};
		
		// Get the number of factories owned by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of factories owned by the side.
		public method Scalar GetFactoriesCountBySide("_side" as Side)
		{
			private ["_count" as Scalar, "_location" as ResourceLocation];

			_count = 0;
			
			{
				_location = _x;

				if (_location.Side == _side && _location.FacilityType == ResourceFacility.Factory) then {
					_count = _count + 1;
				};
			} foreach _mResourceLocations as ResourceLocation;
		
			_count
		};
		
		// Get the number of tech labs ownd by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of tech labs owned by the side.
		public method Scalar GetTechLabsCountBySide {
			params ["_side" as Side];
			private ["_count" as Scalar, "_location" as ResourceLocation];

			_count = 0;
			
			{
				_location = _x;

				if (_location.Side == _side && _location.FacilityType == ResourceFacility.TechLab) then {
					_count = _count + 1;
				};
			} foreach _mResourceLocations as ResourceLocation;
		
			_count
		};
		
		// Gets the resource location closest to a position.
		// _pos (Array): The absolute position for the measure.
		// Returns (ResourceLocation): The closest resource location. classNull if no one was found.
		public method ResourceLocation GetClosestResourceLocation("_pos" as Array)
		{
			private ["_closestDistance" as Scalar, "_closestLocation" as ResourceLocation];
			
			_closestDistance = 9999999;
			_closestLocation = classNull;
			
			{
				if (_pos distance getMarkerPos _x.MarkerName < _closestDistance) then {
					_closestLocation = _x;
					_closestDistance = _pos distance getMarkerPos _x.MarkerName;
				};
			} foreach _mResourceLocations as ResourceLocation;
			
			_closestLocation;
		};
		
		public method ResourceLocation GetResourceLocationByMarkerName("_markerName" as String)
		{
			scopeName "main";
			
			{
				if (_x.MarkerName == _markerName) then {
					_x breakOut "main";
				};
			} foreach _mResourceLocations as ResourceLocation;
			
			classNull
		};
		
		public method ResourceLocation GetWinnersLocation()
		{
			scopeName "main";
			
			{
				if (_x.IsWinnersLocation) then {
					_x breakOut "main";
				};
			} foreach _mResourceLocations as ResourceLocation;
			
			classNull
		};
	};
};
