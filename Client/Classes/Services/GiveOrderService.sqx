/*
 * Name:	GiveOrderService
 * Date:	2019-02-14
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that is used to when a brigade leader is giving order.
 */

using Sqx.Services;
using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class GiveOrderService : Service
	{
		private fields ["_mWaitingForMapClick" as Boolean, "_mMapPos" as Array, "_mSelectedGroup" as Group, "_mOrderType" as OrderType, "_mEngageDetectedEnemies" as Boolean, "_mMissionTime" as IMissionTime, "_mResouceLocationConfig" as IResourceLocationConfig];
	
		// Creates a GiveOrderService object.
		public constructor("_missionTime" as IMissionTime, "_resourceLocationConfig" as IResourceLocationConfig)
		{
			call _base.Constructor;
		
			_mMissionTime = _missionTime;
			_mResouceLocationConfig = _resourceLocationConfig;
			
			call _self.Reset;
		};
		
		private method Reset()
		{
			_mWaitingForMapClick = false;
			_mMapPos = [];
			_mSelectedGroup = grpNull;
			_mOrderType = OrderType.None;
		};
		
		public method SendMapClick("_pos" as Array)
		{
			if (_mWaitingForMapClick) then {
				_mMapPos = _pos;
				_mWaitingForMapClick = false;
			};
		};
		
		public method SendOrderType("_orderType" as OrderType, "_engageDetectedEnemies" as Boolean)
		{
			_mOrderType = _orderType;
			_mEngageDetectedEnemies = _engageDetectedEnemies;
		};
		
		private static method Group FindClosestGroup("_pos" as Array)
		{
		    private ["_group" as Group];
		    private ["_closestDistance" as Scalar];
		    
		    _group = group player; // Default
		    _closestDistance = vehicle player distance _pos;
		    
		    {
		        if (side _x == side group player && vehicle leader _x distance _pos < _closestDistance) then {
		            _closestDistance = vehicle leader _x distance _pos;
		            _group = _x;
		        };
		    } foreach allGroups as Group;
		    
		    _group
		};
		
		private method ResourceLocation FindClosestResourceLocation("_pos" as Array)
		{
			private ["_locationCollection" as ResourceLocationCollection];
			
			_locationCollection = call PublicVariableHandler.GetResourceLocationCollection;
			
			([_pos] call _locationCollection.GetClosestResourceLocation)
		};
		
		protected override method Run()
		{
			private ["_orderResult" as String, "_enoughWaitingTime" as Scalar, "_location" as ResourceLocation, "_orderTimeoutTime" as Scalar, "_orderPos" as Array];

			call _self.Reset;
			
			_orderResult = "Ordering timed out and was cancelled.";
		
			// Open the map and ask player to select a group
			openMap true;
			["Select a group by clicking near it on the map."] call ClientMessageHandler.ShowSubTitle;
			
			_mWaitingForMapClick = true;
			_enoughWaitingTime = time + 30;
			waitUntil {	!_mWaitingForMapClick || time > _enoughWaitingTime };
			
			if (!_mWaitingForMapClick) then
			{
				_orderPos = _mMapPos;
				_mSelectedGroup = [_mMapPos] call _self.FindClosestGroup;
				["Group '" + name leader _mSelectedGroup + "' selected."] call ClientMessageHandler.ShowSubTitle;
				
				// Open the give order GUI
				
				call OrderDialog.ShowDialog;
				
				if (_mOrderType != OrderType.None) then
				{
					_mWaitingForMapClick = true;
					_enoughWaitingTime = time + 30;
					
					_orderTimeoutTime = 0;
					if (_mOrderType == OrderType.Defend) then {
						_orderTimeoutTime = (call _mMissionTime.GetMissionTime) + 20 * 60;
					};
					
					waitUntil {	!_mWaitingForMapClick || time > _enoughWaitingTime};
					
					if (!_mWaitingForMapClick) then
					{
						// Is the target area a resource location?
						_location = [_mMapPos] call _self.FindClosestResourceLocation;
						
						_orderPos = _mMapPos;
						if (_mMapPos distance getMarkerPos _location.MarkerName > _mResouceLocationConfig.AreaRadius) then {
							_location = classNull;
						};
					
						// Update order info
						private _orderInfo = ([_mOrderType] call OrderTypeMeta.ToString);
						
						if (!isNull _location) then {
							_orderInfo = _orderInfo + " " + markerText _location.MarkerName;
						};
						
						_orderInfo = _orderInfo + "*";
						
						_mSelectedGroup setVariable ["IntrusionOrderInfo", _orderInfo, true];
						
						if (!(isPlayer leader _mSelectedGroup)) then {
							["ServerEventReciever.OnBrigadeLeaderGivingOrder", [[_mSelectedGroup, _mOrderType, _mEngageDetectedEnemies, _orderPos, _location, _orderTimeoutTime] new Order]] call Remote.Invoke;
							_orderResult = ("AI group '" + name leader _mSelectedGroup + "' has a new order.");
						}
						else {
							["ClientEventReciever.OnBrigadeLeaderGivingOrder", [[_mSelectedGroup, _mOrderType, _mEngageDetectedEnemies, _orderPos, _location, _orderTimeoutTime] new Order]] call Remote.Invoke;
							_orderResult = ("Human group '" + name leader _mSelectedGroup + "' has a new order.");
						};
					};
				};
			};
			
			[_orderResult] call ClientMessageHandler.ShowSubTitle;
			
			call _base.Run;
		};
	};
};
