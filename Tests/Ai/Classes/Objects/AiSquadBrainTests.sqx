/*
 * Name:	AiBrainTests
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test class for AiBrain.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Ai;
using Intrusion.Common;

namespace Intrusion.Tests.Ai
{
	public class AiSquadBrainTests
	{
		#region Fields
		
		private static fields [
			"_mGroup" as Group,
			"_mWorld" as TestWorld,
			"_mBrain" as AiSquadBrain,
			"_mKnowledge" as IKnowledge,
			"_mResourceLocationCollection" as ResourceLocationCollection,
		];
		
		#endregion

		// Registeres all tests that should be run.
		public static method Init {
			["Intrusion.Tests.Ai", "AiSquadBrainTests", [
				"StateIdleAndNoOrder_MakeDecision_NotIdleAndHasOrder",
				"AttackOrder100m_MakeDecision_StartingMove"
			]] call TestEngine.Register;
		};
		
		private static method BeforeEach()
		{
			private ["_resourceLocationCollection" as ResourceLocationCollection];
			
			_resourceLocationCollection = new ResourceLocationCollection;
			[["FACTORY1", "First factory", [0, 100, 0], ResourceFacility.Factory, false] new ResourceLocation] call _resourceLocationCollection.AddResourceLocation;
			[["OFFICE1", "First office", [0, 200, 0], ResourceFacility.TechLab, false] new ResourceLocation] call _resourceLocationCollection.AddResourceLocation;
			
			_mResourceLocationCollection = _resourceLocationCollection;
			
			_mGroup = createGroup west;
			
			_mWorld = [_resourceLocationCollection] new TestWorld;
			_mKnowledge = [_mGroup] new Knowledge;
			_mBrain = [_mGroup, _mWorld, _mKnowledge] new AiSquadBrain;
		};
		
		private static method AfterEach()
		{
			deleteGroup _mGroup;
		};
		
		private static method StateIdleAndNoOrder_MakeDecision_NotIdleAndHasOrder
		{
			// Arrange
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not make a decision."] call Assert.AreNotEqual;
			[_mKnowledge.Order, "AI did not create an order."] call Assert.IsNotNull;
		};
		
		private static method AttackOrder100m_MakeDecision_StartingMove
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [0, 100, 0]] new Order;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[1, count _mWorld.MoveActions, "AI did not decide to perform move action."] call Assert.AreEqual;
			
			_moveAction = _mWorld.MoveActions select 0;
			[[0, 100, 0], _moveAction.TargetPos, "AI moves to wrong place."] call Assert.AreEqual;
		};
		
		
	};
};
