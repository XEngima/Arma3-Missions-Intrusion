/*
 * Name:	AiService
 * Date:	2019-02-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * The service that performs actions on all AI squads.
 */

using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Ai
{
	public class AiService : IService, IAiUnitCounter
	{
		private fields ["_mUnitCounterConfig" as IAiUnitCounterConfig, "_mGameplayConfig" as IGameplayConfig, "_mSquads" as Array /* of AiSquad */, "_mVehicleSpawner" as IVehicleSpawner];
		private fields ["_mUnitsConfig" as IAiUnitsConfig, "_mMapMarkersConfig" as IMapMarkersConfig, "_mProfessinConfig" as IProfessionConfig];
		
		// Creates a AiService object.
		public constructor("_unitCounterConfig" as IAiUnitCounterConfig, "_gameplayConfig" as IGameplayConfig, "_unitsConfig" as IAiUnitsConfig, "_mapMarkersConfig" as IMapMarkersConfig, "_vehicleSpawner" as IVehicleSpawner, "_professinConfig" as IProfessionConfig)
		{
			_mUnitCounterConfig = _unitCounterConfig;
			_mGameplayConfig = _gameplayConfig;
			_mUnitsConfig = _unitsConfig;
			_mMapMarkersConfig = _mapMarkersConfig;
			_mVehicleSpawner = _vehicleSpawner;
			_mProfessinConfig = _professinConfig;
			_mSquads = [];
		};
		
		public property Boolean IsRunning { get; private set; };
		
		public method Scalar CountUnits()
		{
			private ["_count" as Scalar];
			
			_count = 0;
			
			{
				_count = _count + count units _x.Group;
			} foreach _mSquads as AiSquad;
			
			_count
		};
		
		private method Scalar CountExistingAiUnits("_side" as Side)
		{
			private ["_count" as Scalar];
			
			_count = 0;
			
			{
				if (side _x.Group == _side) then {
					_count = _count + count units _x.Group;
				};
			} foreach _mSquads as AiSquad;
			
			_count
		};
		
		private method ProfessionType GetRandomProfessionType("_side" as Side, "_unitCount" as Scalar)
		{
			private ["_ok" as Boolean, "_professionType" as ProfessionType, "_profession" as Profession, "_squadCollection" as SquadCollection];
			
			_ok = false;
			
			while { !_ok } do {
				_professionType = selectRandom ProfessionTypeMeta.AiWarriorTypes;
				_profession = [_professionType] call _mProfessinConfig.GetProfession;
				_ok = _unitCount >= _profession.MinGroupSize && (_unitCount <= _profession.MaxGroupSize || _profession.MaxGroupSize == 0);
				
				if (_ok) then {
					_squadCollection = call PublicVariableHandler.GetSquads;
					_ok = [_side, _professionType] call _squadCollection.ProfessionTypeAvailable;
				};
			};

			_professionType
		};
		
		// Creates a new squad if more squads are alive.
		private method CreateNewSquads()
		{
			private ["_existingUnitsCount" as Scalar, "_maxUnitsCount" as Scalar, "_unitCount" as Scalar, "_aiSquad" as AiSquad, "_professionType" as ProfessionType];
			
			{
				_existingUnitsCount = [_x] call _self.CountExistingAiUnits;
				_maxUnitsCount = [_x] call _mUnitCounterConfig.GetAllowedUnitCount;
				_unitCount = (floor random 2) + 1;
			
				if (_existingUnitsCount < _maxUnitsCount) then {
					_aiSquad = [_mUnitsConfig, _mMapMarkersConfig, _mVehicleSpawner, _x, _unitCount] new AiSquad;
					_mSquads pushBack _aiSquad;
					
					_professionType = [_x, _unitCount] call _self.GetRandomProfessionType;
					//_professionType = ProfessionType.Armored;
					[_aiSquad.Group, _professionType] call MissionEngine.SquadHandler.SetSquadProfession;
				};
			} foreach _mGameplayConfig.CompetingSides as Side;
		};
		
		private method Run()
		{
			while { true } do
			{
				call _self.CreateNewSquads;
				
				{
					call _x.Act;
					sleep 0.1;
				} foreach _mSquads as AiSquad

				sleep 1;
			};
			
			_self.IsRunning = false;
		};
		
		public method RunAsync()
		{
			_self.IsRunning = true;
			[] spawn _self.Run;
		};
	};
};
