/*
 * Name:	SquadCollection
 * Date:	2018-11-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Collection of squads.
 */
namespace Intrusion.Common
{
	public class SquadCollection
	{
		private fields ["_mSquads" as Array /* of Squad */];
		private fields ["_mLockedById" as Scalar];
		
		// Creates a SquadCollection object.
		public constructor {
			_mSquads = [];
			_mLockedById = 0;
		};
		
		// Adds a new or updates an existing squad.
		// _squad (Squad): The squad to add or update.
		public method AddOrUpdateSquad {
			params ["_squad" as Squad];
			
			scopeName "main";

			for "_i" from 0 to (count _mSquads - 1) do 
			{
				private ["_existingSquad" as Squad];
				
				_existingSquad = _mSquads select _i;
				
				if (_existingSquad.Group == _squad.Group) then {
					_mSquads set [_i, _squad];
					breakOut "main";
				};
			};
			
			_mSquads pushBack _squad;
		};
		
		// Removes all empty squads.
		public method RemoveEmptySquads {
			private ["_squadsToKeep" as Array];
			
			_squadsToKeep = [];
		
			{
				if (!(call _x.IsEmpty)) then {
					_squadsToKeep pushBack _x;
				};
			} foreach _mSquads as Squad;
			
			_mSquads = _squadsToKeep;
		};
		
		// Gets the number of squads with a profession type of a certain side.
		// _side (Side): The side to count.
		// _professionType (ProfessionType): The profession type to count.
		public method CountByProfessionType {
			params ["_side" as Side, "_professionType" as ProfessionType];
			[(str _this) + " SquadCollection.CountByProfessionType"] call LogHandler.Debug;
			
			{ side _x.Group == _side && _x.ProfessionType == _professionType } count _mSquads as Squad;
		};
		
		// Checks whether a profession type is available for a squad to select.
		// _side (Side): The side to check.
		// _professionType (ProfessionType): The profession type to check.
		// Returns (Boolean): true if squads can select the profession, false if no mor squads of the 
		// current profession can be assigned.
		public method Boolean ProfessionTypeAvailable {
			params ["_side" as Side, "_professionType" as ProfessionType];
			private ["_assignedSquadsCount" as Scalar, "_profession" as Profession];
			[(str _this) + " SquadCollection.ProfessionTypeAvailable"] call LogHandler.Debug;
			
			_assignedSquadsCount = [_side, _professionType] call _self.CountByProfessionType;
			_profession = [_professionType] call ProfessionConfig.GetProfession;
			
			_assignedSquadsCount < _profession.MaxGroupsCount || _profession.MaxGroupsCount < 0
		};
		
		// Aquires a lock that prevents other threads to change the squads simultaneously.
		public method AquireLock {
			// Check that no other thread is currently making changes to the squads.
			while { _mLockedById != 0 } do { sleep 0.01; };
			_mLockedById = 1;
		};
		
		// Releases the lock set by AquireLock so that other threads can make changes to squads.
		public method ReleaseLock {
			_mLockedById = 0;
		};
	};
};
