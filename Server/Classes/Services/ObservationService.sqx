/*
 * Name:	ObservationService
 * Date:	2018-10-16
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that reads and broadcasts player's observations.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ObservationService
	{
		private static fields ["_mMissionTime" as IMissionTime, "_mObservationHandler" as ObservationHandler, "_mCurrentId" as Scalar, "_mTargetHandler" as TargetHandler, "_mCompetingSides" as Array /* of Side */];
		
		// Initializes the observation service.
		public static method Init("_targetHandler" as TargetHandler, "_observationHandler" as ObservationHandler, "_competingSides" as Array /* of Side */)
		{
			_mTargetHandler = _targetHandler;
			_mObservationHandler = _observationHandler;
			_mCompetingSides = _competingSides;
			
			_mMissionTime = new MissionTime;
			_mCurrentId = 0;
		};
		
		// Marks all observations in the observation collection as deleted.
		private static method MarkObservationsAsDeleted() {
			{
				if (call _mMissionTime.GetMissionTime > _x.Time + 45) then {
					_x.MarkedAsDeleted = true;
				};
			} foreach (call _mObservationHandler.GetObservations) as Observation;
		};
		
		// Deletes all observations that are marked as deleted.
		private static method DeleteMarkedObservations()
		{
			call _mObservationHandler.DeleteMarkedObservations;
		};
		
		// Prioritizes the properties of an observation. All "better" properties of the target will be 
		// set on the observation.
		// _observation (Observation): The observation that will be updated.
		// _target (Target): The target with values.
		private static method PrioritizeObservation("_observation" as Observation, "_target" as Target)
		{
			_observation.MarkedAsDeleted = false;
			
			// Always update the accuracy, percieved position and percieved side.
			_observation.Accuracy = if (_observation.Accuracy > _target.Accuracy) then { _observation.Accuracy } else { _target.Accuracy };
			_observation.PercievedPos = _target.PercievedPos;
			_observation.PercievedSide = if (_observation.PercievedSide != sideUnknown) then { _observation.PercievedSide } else { _target.PercievedSide };
			_observation.PercievedProfessionType = if ((_observation.PercievedProfessionType as Scalar) > (_target.PercievedProfessionType as Scalar)) then { _observation.PercievedProfessionType } else { _target.PercievedProfessionType };
			
			if (_target.ObservedDistance < _observation.ObservedDistance - 50) then
			{
				// Set a random offset for the observation.
				private _offsetDistance = [_target.ObservedDistance] call _self.CalculateRandomOffsetDistance;
				private _offsetHeading = floor random 360;
				
				_observation.PercievedOffsetPos = _target.PercievedPos getPos [_offsetDistance, _offsetHeading];
			};
		};
		
		private static method Scalar CalculateRandomOffsetDistance("_observedDistance" as Scalar)
		{
			private _maxOffsetDistance = 50;
			private _offsetDistance = _observedDistance / 7;
			
			if (_offsetDistance > _maxOffsetDistance) then {
				_offsetDistance = _maxOffsetDistance;
			};
			
			return floor random _offsetDistance;
		};
		
		// Adds a target to the list of current observations.
		// _target (Target): The target to add as an observation.
		private static method AddTargetToObservations("_target" as Target)
		{
			private ["_existingObservation" as Observation, "_newObservation" as Observation, "_offsetDistance" as Scalar, "_offsetHeading" as Scalar, "_offsetPos" as Array];
			
			_existingObservation = [_target] call _mObservationHandler.GetExistingObservation;
			
			if (isNull _existingObservation) then {
				_mCurrentId = _mCurrentId + 1;
				
				// Set a random offset for the observation.
				_offsetDistance = [_target.ObservedDistance] call _self.CalculateRandomOffsetDistance;
				_offsetHeading = floor random 360;
				_offsetPos = _target.PercievedPos getPos [_offsetDistance, _offsetHeading];
				
				_newObservation = [_mCurrentId, _target.ObservingSide, _target.PercievedPos, _target.PercievedSide, group _target.Unit, _target.Unit, _target.PercievedProfessionType, _target.Accuracy, call _mMissionTime.GetMissionTime, _offsetPos, _target.ObservedDistance] new Observation;
			
				[_newObservation] call _mObservationHandler.AddObservation;
			} else {
				_existingObservation.Time = call _mMissionTime.GetMissionTime;
				[_existingObservation, _target] call _self.PrioritizeObservation;
			};
		};
		
        // Runs the service.
        private static method Run()
        {
        	private ["_targets" as Array, "_mapObservations" as Array];
        	
        	_mCurrentId = 0;
        	
        	while { true } do // The service loop
        	{
        		call _self.MarkObservationsAsDeleted;
        		
	        	// Loop through all units on the map
	        	{
	        		private ["_unit" as Object];
	        		_unit = _x;
	        	
	        		if (alive _unit && { side group _unit in _mCompetingSides }) then
	        		{
		        		_targets = [_unit] call _mTargetHandler.GetEnemyTargets;
		        		
		        		{
		        			[_x] call _self.AddTargetToObservations;
		        		} foreach _targets as Target;
	        		};
	        	} foreach allUnits as Object;
	        	
	        	call _self.DeleteMarkedObservations;

	        	// Broadcast the list of observations
	        	_mapObservations = call _mObservationHandler.ToMapObservations;
	        	
				["ClientEventReciever.OnObservationsUpdated", [_mapObservations]] call Remote.Invoke;
	        	
        		sleep 1;
			};
		};
		
		// Starts the service
		public static method RunAsync {
			[] spawn _self.Run;
		};
	};
};
