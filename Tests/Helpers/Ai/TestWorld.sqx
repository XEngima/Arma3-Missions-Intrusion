/*
 * Name:	TestWorld
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A fake world class used in testing.
 */

using Intrusion.Ai;
using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Tests.Helpers
{
	public class TestWorld : IWorld
	{
		private fields ["_mResourceLocationCollection" as ResourceLocationCollection, "_mResourceLocationConfig" as IResourceLocationConfig, "_mMarkerHandler" as IMarkerHandler];

		// Creates a TestWorld object.
		public constructor("_resourceLocationCollection" as ResourceLocationCollection, "_resourceLocationConfig" as IResourceLocationConfig, "_markerHandler" as IMarkerHandler)
		{
			_mResourceLocationCollection = _resourceLocationCollection;
			_mResourceLocationConfig = _resourceLocationConfig;
			_mMarkerHandler = _markerHandler;
			_self.LeaderPos = [];
			_self.ClosestEmptyFreeVehicle = classNull;
			_self.SquadMounted = false;
			_self.ClosestDetectedEnemy = classNull;
			_self.AllSquadMembersDead = false;
			_self.SquadVehicle = classNull;
			_self.MountedVehicle = classNull;
			_self.AlliedGroupClosestToLocation = grpNull;
		};
		
		public property Array LeaderPos { get; set; };
		
		// Gets a group's leader's position.
		// _group (Group): The group to get the leader's position from.
		// Returns (Array): The position of the leader.
		public method Array GetLeaderPos("_group" as Group)
		{
			return _self.LeaderPos;
		};
		
		// Gets the resource location collection.
		// Returns (ResourceLocationCollection): The resource location collection.
		public method ResourceLocationCollection GetResourceLocationCollection()
		{
			return _mResourceLocationCollection;
		};
		
		//public property Boolean SquadPresenceAtResourceLocation { get; set; };
		
		// Checks if a group is inside the perimiters of one or more resource locations.
		// _group (Group): The group to check.
		// _location (ResourceLocation): The resource location to check.
		// Returns (Boolean): true if any squad member is inside the perimiter of the resource location, otherwise false.
		public method Boolean CheckSquadPresenceAtResourceLocation("_group" as Group, "_location" as ResourceLocation)
		{
			private _leaderPos = [_group] call _self.GetLeaderPos;
			private _locationPos = [_location.MarkerName] call _mMarkerHandler.GetMarkerPos;
			private _areaRadius = _mResourceLocationConfig.AreaRadius;

			_leaderPos distance _locationPos <= _areaRadius;
		};
		
		public property VehicleContainer ClosestEmptyFreeVehicle { get; set; };

		
		// Gets the closest empty, unassigned, usable and free vehicle that fits the group.
		// _side (Side): Side of the vehicle.
		// _pos (Array): The relative position.
		// _squadSize (Scalar): The number of members in the squad.
		public method VehicleContainer GetClosestEmptyFreeVehicle("_side" as Side, "_pos" as Array, "_squadSize" as Scalar)
		{
			return _self.ClosestEmptyFreeVehicle;
		};
		
		public property Boolean SquadMounted { get; set; };
		
		// Checks if all squad members are mounted to a vehicle.
		// _group (Group): The group to check.
		// Returns (Boolean): true if all members are mounted to a vehicle, otherwise false.
		public method Boolean CheckSquadMounted("_group")
		{
			return _self.SquadMounted;
		};
		
		
		// Gets the speed of a vehicle.
		// _vehicle (Object): The vehicle.
		public method Scalar GetSpeed("_vehicle" as Object)
		{
			return 0;
		};
		
		public property VehicleContainer MountedVehicle { get; set; };
		
		// Gets a squad's current vehicle. objNull if no one of the members are not in a vehicle.
		public method VehicleContainer GetMountedVehicle("_group" as Group)
		{
			return _self.MountedVehicle;
		};
		
		public property IUnitContainer ClosestDetectedEnemy { get; set; };
		
		// Gets the closest detected enemy unit.
		// _group (Group): The group to test.
		// Returns (UnitContainter): The detected unit that is closest to the group. null if no units are detected.
		public method IUnitContainer GetClosestDetectedEnemy("_group" as Group)
		{
			return _self.ClosestDetectedEnemy;
		};
		
		public property Boolean AllSquadMembersDead { get; set; };
		
		// Gets whether all squad members are dead or not.
		// _group (Group): The group to test.
		// Returns (Boolean): true if all the group's members are dead, otherwise false.
		public method Boolean GetAllSquadMembersDead("_group" as Group)
		{
			return _self.AllSquadMembersDead;
		};
		
		public property VehicleContainer SquadVehicle { get; set; };
		
		// Gets the squad's squad vehicle.
		// _group (Group): The group.
		// Returns (VehicleContainer): The squad's squad vehicle. classNull if the squad has no squad vehicle.
		public method VehicleContainer GetSquadVehicle("_group" as Group)
		{
			return _self.SquadVehicle;
		};
		
		public property Group AlliedGroupClosestToLocation { get; set; };
		
		// Gets the allied group that are closest to a specified destination.
		// _locationMarkerName (String): The location marker to test.
		// _side (Side): Side to check.
		// Returns (Group): The allied group closest to the location. grpNull if no group exists.
		public method Group GetAlliedGroupClosestToLocation("_locationMarkerName" as String, "_side" as Side)
		{
			return _self.AlliedGroupClosestToLocation;
		};
	};
};
