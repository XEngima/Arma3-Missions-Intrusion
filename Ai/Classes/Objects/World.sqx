/*
 * Name:	World
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class for the brain to have its decitions manifested in physical actions outside itself.
 */

using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Ai
{
	public class World : IWorld
	{
		private fields ["_mResourceLocationConfig" as IResourceLocationConfig, "_mVehicleSpawner" as IVehicleSpawner];
		
		// Creates a World object.
		public constructor("_resourceLocationConfig" as IResourceLocationConfig, "_vehicleSpawner" as IVehicleSpawner)
		{
			_mResourceLocationConfig = _resourceLocationConfig;
			_mVehicleSpawner = _vehicleSpawner;
		};
		
		// Gets a group's leader's position.
		// _group (Group): The group to get the leader's position from.
		// Returns (Array): The position of the leader.
		public method Array GetLeaderPos("_group" as Group)
		{
			getPos leader _group
		};
		
		// Gets the resource location collection.
		// Returns (ResourceLocationCollection): The resource location collection.
		public method ResourceLocationCollection GetResourceLocationCollection()
		{
			scopeName "main";
			
			if (call PublicVariableHandler.ResourceLocationCollectionHasValue) then {
				(call PublicVariableHandler.GetResourceLocationCollection) breakOut "main";
			};
			
			classNull
		};
		
		// Checks if a group is inside the perimiters of one or more resource locations.
		// _group (Group): The group to check.
		// _location (ResourceLocation): The resource location to check.
		// Returns (Boolean): true if any squad member is inside the perimiter of the resource location, otherwise false.
		public method Boolean CheckSquadPresenceAtResourceLocation("_group" as Group, "_location" as ResourceLocation)
		{
			scopeName "main";

			{
				if (_x distance (getMarkerPos _location.MarkerName) < _mResourceLocationConfig.AreaRadius) then {
					true breakOut "main";
				};
			} foreach units _group;
			
			false
		};

		// Gets the closest empty, unassigned, usable and free vehicle that fits the group.
		// _side (Side): Side of the vehicle.
		// _pos (Array): The relative position.
		// _squadSize (Scalar): The number of members in the squad.
		public method AiVehicle GetClosestEmptyFreeVehicle("_side" as Side, "_pos" as Array, "_squadSize" as Scalar)
		{
			private ["_intrusionVehicle" as IntrusionVehicle];
			
			_intrusionVehicle = [_side, _pos, _squadSize] call _mVehicleSpawner.GetNearestEmptyFreeVehicle;
			
			[_intrusionVehicle.Vehicle, getPos _intrusionVehicle.Vehicle, _squadSize] new AiVehicle;
		};
	};
};
