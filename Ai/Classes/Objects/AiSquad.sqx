/*
 * Name:	AiSquad
 * Date:	2019-02-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models an AI squad.
 */

using Intrusion.Common;
using Sqx.Collections;

namespace Intrusion.Ai
{
	public class AiSquad
	{
		private fields ["_mMapMarkerInfo" as MapMarkerInfo, "_mHasActed" as Boolean, "_mTargetPos" as Array, "_mVehicle" as Object, "_mCurrentOrder" as Order];
		private fields ["_mState" as AiSquadState, "_mCurrentActionTimeoutTime" as Scalar, "_mLeaderPos" as Array];
	
		// Creates an AiSquad object.
		// _noOfUnits (Scalar): Number of units to spawn.
		public constructor("_unitsConfig" as IAiUnitsConfig, "_mapMarkersConfig" as IMapMarkersConfig, "_side" as Side, "_noOfUnits" as Scalar)
		{
			private ["_unitInfo" as AiUnitInfo];
			
			_mMapMarkerInfo = [_side] call _mapMarkersConfig.GetMapMarkerInfo;
			_unitInfo = [_side] call _unitsConfig.GetUnitInfo;
			_self.Group = createGroup [_side, true];
			_mHasActed = false;
			_mState = AiSquadState.Idle;
			_mVehicle = objNull;
			_mCurrentActionTimeoutTime = time;
			_mCurrentOrder = classNull;
			
			for "_i" from 1 to _noOfUnits do {
				_unitInfo.UnitClassName createUnit [getMarkerPos _mMapMarkerInfo.BaseMarkerName, _self.Group];
			};
		};
		
		// Gets the AI squad's group.
		public property Group Group { get; private set; };
		
		// Updates the tracking information of the squad.
		private method UpdateTracking()
		{
			_mLeaderPos = getPos vehicle leader _self.Group;
		};
		
		// Gets the team member closest to a position.
		// Returns (Object): The closest team member. objNull if no unit that can stand was found or if the group is empty.
		private method Object GetClosestTeamMember("_pos" as Array)
		{
			private ["_closestUnit" as Object, "_closestDistance" as Scalar];
			
			_closestDistance = 99999999;
			_closestUnit = objNull;
			
			{
				if (canStand _x && _x distance _pos < _closestDistance) then {
					_closestUnit = _x;
					_closestDistance = _x distance _pos;
				};
			} foreach units _self.Group;
		};
		
		private method CreateOrderOnOwnInitiative()
		{
			private ["_resourceLocationCollection" as ResourceLocationCollection, "_location" as ResourceLocation, "_locations" as Array /* of ResourceLocation */, "_valuedLocations" as Array /* of ValuedObject */];
			private ["_count" as Scalar, "_index"];
			
			waitUntil { PublicVariableHandler.ResourceLocationCollectionHasValue };
			
			_resourceLocationCollection = call PublicVariableHandler.GetResourceLocationCollection;
			_locations = call _resourceLocationCollection.GetResourceLocations;
			_count = 0;
			
			// Find the three enemny (or neutral) resource locations closest to the base and select a random one of them.
			_valuedLocations = [];
			{
				_location = _x;
				
				if (_location.Side != side _self.Group) then {
					_valuedLocations pushBack [_location, getMarkerPos _location.MarkerName distance getMarkerPos _mMapMarkerInfo.BaseMarkerName] new ValuedObject;
					_count = _count + 1;
				};
			} foreach _locations as ResourceLocation;
			
			_valuedLocations = [_valuedLocations] call Sorter.QSort;
			
			if (_count > 3) then {
				_count = 3;
			};
			
			_index = floor random _count;
			_location = ((_valuedLocations select 0) as ValuedObject).Object as ResourceLocation;
			
			_mCurrentOrder = [_self.Group, OrderType.Attack, getMarkerPos _location.MarkerName] new Order;
		};
		
		private method MakeNewDecision()
		{
			private ["_unit" as Object];
			
			// if within 25 meters of enemy flag, have a unit to get it.
			//_unit = 
		
			// If within 200 meters from enemy flag, or in a vehicle, then move towards the flag.
			
			// If more than 200 meters to an enemy flag, and a vehicle nearby, then board it.
			
			// Else: Move to the closest of enemy flag and the car park.
			
			if (!_mHasActed) then {
				_self.Group addWaypoint [getMarkerPos _mMapMarkerInfo.CarParkMarkerName, 0];
				_mHasActed = true;
			};
		};
		
		// Gives the AI squad an opportunity to act.
		public method Act()
		{
			call _self.UpdateTracking;
			
			if (isNull _mCurrentOrder) then {
				call _self.CreateOrderOnOwnInitiative;
			};
			
			switch (_mState) do {
				case AiSquadState.Idle: { call _self.MakeNewDecision; };
			};
		};
	};
};
