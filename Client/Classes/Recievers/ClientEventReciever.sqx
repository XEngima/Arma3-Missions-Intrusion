/*
 * Name:	ClientEventReciever
 * Date:	2019-01-31
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Static class that handles all Intrusion events sent from the server.
 */

using Intrusion.Common;

namespace Intrusion.Client
{
	public class ClientEventReciever
	{
		private static fields ["_mMissionTime" as MissionTime];
		private static fields ["_mUniformHandler" as UniformHandler];
		
		public static method Init("_uniformHandler" as UniformHandler)
		{
			_mMissionTime = new MissionTime;
			_mUniformHandler = _uniformHandler;
		};
		
		// Called when a player was set as a new brigade leader.
		// _playerUid (String): The player's UID.
		// _side (Side): The player's side.
		public static method OnNewBrigadeLeader("_playerUid" as String, "_side" as Side, "_player" as Object)
		{
			private ["_orderCollection" as OrderCollection];
		
			if (_playerUid == getPlayerUID player) then {
				ClientState.IsBrigadeLeader = true;
				
				if (!call PublicVariableHandler.OrderCollectionHasValue) then {
					_orderCollection = new OrderCollection;
					[_orderCollection] call PublicVariableHandler.BroadcastOrderCollection;
				};
			};
			
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a player was set rejected as a new brigade leader.
		// _playerUid (String): The player's UID.
		// _side (Side): The player's side.
		public static method OnBrigadeLeaderRejected("_playerUid" as String, "_side" as Side)
		{
			if (_playerUid == getPlayerUID player) then {
				["Your claim for brigade leadership was rejected.", player] call ClientMessageHandler.ShowMessage;
			};
			
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a player quits as brigade leader
		public static method OnBrigadeLeaderQuit("_playerUid" as String)
		{
			if (_playerUid == getPlayerUID player) then {
				ClientState.IsBrigadeLeader = false;
			};
			
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a player joined a group
		public static method OnPlayerJoinedGroup("_player" as Object, "_oldGroup" as Group, "_newGroup" as Group)
		{
			if (_player == player) then {
				ClientState.MyGroup = _newGroup;
				ClientState.IsSquadLeader = false;
				call gClient.TaskHandler.UpdateWithGroupTask;
			};
			
			call GroupActionHandler.UpdateAllInvitePlayerActions;
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a player left a group
		public static method OnPlayerLeftGroup("_player" as Object, "_oldGroup" as Group)
		{
			if (_player == player) then {
				ClientState.MyGroup = group player;
				ClientState.IsSquadLeader = true;
				call gClient.TaskHandler.DeleteAllTasksAndReset;
			};
			
			call GroupActionHandler.UpdateAllInvitePlayerActions;
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a JIP player has connected.
		public static method OnJipPlayerConnected("_uid" as String)
		{
			call GroupActionHandler.UpdateAllInvitePlayerActions;
		};
		
		// Called when a group leader is teleporting his/her group back to base.
		public static method OnGroupTeleportingToBase("_group" as Group)
		{
			if (_group == group player) then {
				call gClient.TeleportHandler.TeleportPlayerToBase;
			};
		};
		
		// Called when the brigade leader is giving an order to a group.
		// _order (Order): The order.
		public static method OnBrigadeLeaderGivingOrder("_order" as Order)
		{
			if (_order.Group == group player) then {
				[_order] call gClient.TaskHandler.CreateTaskFromOrder;
			};
		};
		
		// Called when a player was killed (or got unconsious).
		// _unit (Object): The dead body.
		// _side (Side): The player's side.
		public static method OnPlayerKilled("_unit" as Object, "_killer" as Object, "_instigator" as Object, "_useEffects" as Boolean, "_side" as Side, "_nearestMine" as Object)
		{
			private ["_prisonService" as PrisonService];

			if (_unit != _killer && [_side, side _killer] call BIS_fnc_sideIsFriendly) then
			{
				// Rating lock
				if (group _killer == group player) then {
					ClientState.RatingLock = [(call _mMissionTime.GetMissionTime) + 5 * 60, RatingLockReason.TeamKill] new RatingLock;
				};

				// Team kill prison
				if (gCommon.MissionParametersHandler.UseTeamKillPrison && _killer == player) then
				{			
					// Do not start prison if player was killed by mines
					_nearestMine = [getPos player] call Functions.GetNearestMine;
					
					if (isNull _nearestMine || {_unit distance _nearestMine > 10}) then {
						_prisonService = [1] new PrisonService;
						call _prisonService.RunAsync;
					};
				};
			};
		};
		
		// Called when a player disconnected from an MP game.
		public static method OnPlayerDisconnected("_unit" as Object, "_id" as Scalar, "_uid" as String, "_name" as String)
		{
			removeAllActions _unit;
		};
		
		// Called when the resource report collection is updated.
		public static method OnResourceReportCollectionUpdated("_resourceReportCollection" as ResourceReportCollection)
		{
			private ["_resourceReport" as ResourceReport];
			
			_resourceReport = [playerSide] call _resourceReportCollection.GetReport;
			[_resourceReport] call gClient.DisplayHandler.DisplayResourceReport;
		};
		
		public static method OnPlayerRespawn("_player" as Object, "_corpse" as Object)
		{
			if (_player == player) then {
				call IntrusionMenuHandler.ShowAction;
			
				if (!isNull ClientState.MyGroup) then {
					[player] joinSilent ClientState.MyGroup;
					
					if (ClientState.IsSquadLeader) then {
						ClientState.MyGroup selectLeader player;
					};
				};
			};
			
			// If anyone in the player's group respawned, punish them all...!
			if (group _player == group player) then {
				ClientState.RatingLock = [(call _mMissionTime.GetMissionTime) + 5 * 60, RatingLockReason.Respawn] new RatingLock;
			};
		
			call GroupActionHandler.UpdateAllInvitePlayerActions;
			call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Called when a squad vehicle is spawned.
		// _group (Group): The owner group of the vehicle.
		// _professionType (ProfessionType): The profession type of the squad.
		// _vehicles (Array): A list of the vehicles that was spawned.
		public static method OnSquadVehiclesSpawned("_group" as Group, "_professionType" as ProfessionType, "_vehicles" as Array)
		{
			[_vehicles] call gClient.ClientVehicleHandler.GroupLockVehicles;
			{
				[_x as Object] call CommonEventHandlers.AddVehicleAttachmentEventHandler;
			} forEach _vehicles;
			
			if (_group == group player) then {
				[_vehicles] call gClient.ClientVehicleHandler.AddGroupMarkerToVehicles;
			};
		};
		
		public static method OnAddSquadRating("_rating" as Scalar, "_group" as Group)
		{
			if (_group == group player) then {
				[_rating, _group] call ClientSquadHandler.AddSquadRating;
			};
		};
		
		public static method OnMissionTimeIsUp()
		{
			call MissionEndHandler.EndGame;
		};
		
		// Called when a squad (of players, not AI) has lost its squad vehicle.
		// _group (Group): The group that lost its vehicle.
		// _vehicle (Object): The vehicle that was destroyed.
		public static method OnGroupLostSquadVehicle("_group" as Group, "_vehicle" as Object)
		{
			if (_group == group player) then {
				ClientState.RatingLock = [(call _mMissionTime.GetMissionTime) + 5 * 60, RatingLockReason.LostVehicle] new RatingLock;
			};
		};
		
		// Called when a unit (player or AI) has entered a vehicle.
		// All intrusion vehicles has the variable "IntrusionVehicle", that can be used to get more information about the vehicle (like professions and such).
		// _unit (Object): The unit that entered the vehicle.
		// _vehicle (Object): The vehicle that was entered.
		public static method OnUnitEnteredVehicle("_unit" as Object, "_role" as VehicleRole, "_vehicle" as Object, "_turret" as Array)
		{
			if (player == _unit) then {
				[_unit, _role, _vehicle] call _mUniformHandler.SetUniform;
			};
		};
		
		// Called when a unit assembled a static weapon.
		// _staticWeapon (Object): The weapon that was assembled.
		// _unit (Object): The unit that assembled the weapon.
		public static method OnStaticWeaponAssebled("_staticWeapon" as Object, "_unit" as Object)
		{
			[[_staticWeapon]] call gClient.ClientVehicleHandler.GroupLockVehicles;
		};
		
		// Called when a unit changed seat in a vehicle.
		// _unit (Object): The unit that changing seat.
		// _vehicle (Object): The vehicle that the unit occupies.
		public static method OnUnitChangedSeat("_unit" as Object, "_vehicle" as Object)
		{
			if (player == _unit) then {
				[_unit, [assignedVehicleRole _unit select 0 as String] call VehicleRoleMeta.ToVehicleRole, _vehicle] call _mUniformHandler.SetUniform;
			};
		};

		public static method OnPlayUnitAnimation("_unit" as Object, "_animation" as String, "_duration" as Scalar)
		{
			[_unit, _animation, "MEDIUM"] call BIS_fnc_ambientAnim;
			sleep _duration;
			[_unit] call BIS_fnc_ambientAnim__terminate;
		};
		
		public static method OnObservationsUpdated("_mapObservations" as Array /* of MapObservation */)
		{
			[_mapObservations] call MapObservationsHandler.UpdateMap;
		};
	};
};
