/*
 * Name:	ClientVehicleHandler
 * Date:	2018-12-09
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles some vehicle actions for the client.
 */
using Intrusion.Common;

namespace Intrusion.Client
{
	public class ClientVehicleHandler
	{
		private fields ["_mGroupMarkers" as Array /* of Object */];
		
		public constructor("_professionConfig" as IProfessionConfig)
		{
			_mGroupMarkers = [];
		};
		
		public static method CheckAndActIfVehicleIsLocked("_vehicle" as Object, "_player" as Object)
		{
		    private ["_intrusionVehicle" as IntrusionVehicle, "_profession" as Profession];
		    
        	_intrusionVehicle = _vehicle getVariable ["IntrusionVehicle", classNull];
			if (!isNull _intrusionVehicle) then
			{
				call gClient.ClientVehicleHandler.RemoveGroupMarkerFromVehicles;
			
				if (!(group _player isEqualTo _intrusionVehicle.OwnerGroup)) then
				{
					_profession = [_intrusionVehicle.OwnerProfession] call gCommonConfig.Professions.GetProfession;
					
					if (!isNull _profession) then {
						if (_profession.AllowedToTransport) then {
							if (_intrusionVehicle.Vehicle getCargoIndex _player < 0) then {
								moveOut _player;
		                        ["You are not licenced for this vehicle.", _player] call ClientMessageHandler.ShowMessage;
							};
						}
						else {
							moveOut _player;
	                        ["You are not licenced for this vehicle.", _player] call ClientMessageHandler.ShowMessage;
						};
					};
				};
			};
		};
	
		// Adds the GetIn event handler to all vehicles in an array.
		// _vehicleArray (Array): Array of vehicles to add the event handler to.
		public method GroupLockVehicles("_vehicleArray" as Array /* of Object */)
		{
		    {
		        _x addEventHandler ["GetIn", {
		        	params ["_vehicle" as Object, "_bla" as Any, "_player" as Object];
		        	
		        	if (player == _player) then {
			        	[_vehicle, _player] call ClientVehicleHandler.CheckAndActIfVehicleIsLocked;
		        	};
		        }];
		        
		        _x addEventHandler ["SeatSwitched", {
					params ["_vehicle" as Object, "_unit1" as Object, "_unit2" as Object];
					
					if (player in [_unit1, _unit2]) then {
			        	[_vehicle, player] call ClientVehicleHandler.CheckAndActIfVehicleIsLocked;
					};
				}];
		    } foreach _vehicleArray as Object;
		};
		
		// Adds an arrow above the vehicle to mark the vehicle for the owners.
		// _vehicleArray (Array): The vehicles to mark.
		public method AddGroupMarkerToVehicles("_vehicleArray" as Array /* of Object */)
		{
			private ["_groupMarker" as Object, "_vehicleHeight" as Scalar];
			
			call _self.RemoveGroupMarkerFromVehicles;
			
			{
				_vehicleHeight = ((boundingBox _x) select 1) select 2;
				_groupMarker = "Sign_Arrow_Large_Blue_F" createVehicleLocal [getPosATL _x select 0, getPosATL _x select 1, (getPosATL _x select 2) + _vehicleHeight + 3];
				_groupMarker setPosATL [getPosATL _x select 0, getPosATL _x select 1, (getPosATL _x select 2) + _vehicleHeight + 3];
				_mGroupMarkers pushBack _groupMarker;
			} foreach _vehicleArray as Object;
		};
		
		// Removes the group marker arrow from above the vehicle.
		public method RemoveGroupMarkerFromVehicles()
		{
			{
				deleteVehicle _x;
			} foreach _mGroupMarkers as Object;
			
			_mGroupMarkers = [];
		};
	};
};
