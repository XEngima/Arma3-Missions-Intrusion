/*
 * Name:	ProductionManager
 * Date:	2017-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class modeling a side's production manager, refining generated production (i.e. spawns new
 * vehicles and weapons).
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ProductionManager : IGroupChangingProfessionListener
	{
		private fields ["_mProfessionVehiclesConfig" as IProfessionVehiclesConfig, "_mVehicleClassNamesConfig" as IVehicleClassNamesConfig, "_mVehicleSpawner" as IVehicleSpawner, "_mResourceBook" as ResourceBook, "_mReservationQueue" as ReservationQueue, "_mSquadHandler" as ISquadHandler, "_mOfficeWorker" as IOfficeWorker, "_mMessageHandler" as IMessageHandler, "_mProfessionConfig" as ProfessionConfig];

		// Creates a ProductionManager object.
		public constructor("_professionVehiclesConfig" as IProfessionVehiclesConfig, "_vehicleClassNamesConfig" as IVehicleClassNamesConfig, "_side" as Side, "_vehicleSpawner" as IVehicleSpawner, "_resourceBook" as ResourceBook, "_squadHandler" as ISquadHandler, "_officeWorker" as IOfficeWorker, "_messageHandler" as IMessageHandler, "_professionConfig" as ProfessionConfig, "_reservationQueue" as ReservationQueue)
		{
			_mProfessionVehiclesConfig = _professionVehiclesConfig;
			_mVehicleClassNamesConfig = _vehicleClassNamesConfig;
			_self.Side = _side;
			_mVehicleSpawner = _vehicleSpawner;
			_mSquadHandler = _squadHandler;
			_mResourceBook = _resourceBook;
			_mOfficeWorker = _officeWorker;
			_mMessageHandler = _messageHandler;
			_mProfessionConfig = _professionConfig;
			_mReservationQueue = _reservationQueue;
			[_self] call SquadHandler.RegisterGroupChangingProfessionListener;
		};
		
		// Gets the production manager's side.
		public property Side Side { get; private set; };
		
		// Creates a vehicle reservation for a group
		// _group (Group): The group to create reservation for.
		// _professionType (ProfessionType): The profession type.
		private method CreateReservation("_group" as Group, "_professionType" as ProfessionType)
		{
			private ["_reservation" as Reservation, "_vehicleClassNamesInfo" as ProfessionVehicleClassNamesInfo, "_vehicleClassName" as String, "_professionVehicle" as ProfessionVehicleInfo];

			// Remove the group's eventual existing reservations.
			[_group] call _mReservationQueue.RemoveReservationsByGroup;
			
			_vehicleClassNamesInfo = [side _group, _professionType] call _mVehicleClassNamesConfig.GetProVehiclesClassNameInfo;
			//_vehicleClassNames = [side _group, _professionType] call VehicleClassNamesConfig.GetProVehiclesClassNames; // TODO SQX (TEST ADDED): Must generate error that VehicleClassNamesConfig is not static.

			// Create an reservation if there is a vehicle to assign.
			if (!isNull _vehicleClassNamesInfo) then {
				_vehicleClassName = selectRandom _vehicleClassNamesInfo.ClassNames;
				_professionVehicle = [_professionType] call _mProfessionVehiclesConfig.GetVehicle;
				
				// Find out if the group is a group of humans (script command isPlayer is not reliable)
				private _allPlayers = call BIS_fnc_listPlayers;
				private _isPlayerGroup = { group _x == _group } count _allPlayers > 0;
				
				_reservation = [_group, _professionType, _isPlayerGroup, _vehicleClassName, _professionVehicle.Cost] new Reservation;
				[_reservation] call _mReservationQueue.PutReservation;
				
//				if (call _mReservationQueue.Count == 1) then {
//					[_mReservationQueue.CurrentReservation.Group] call _self.TellSquadVehicleSoonDelivered;
//				};
			};
		};
		
		// Called when a group on the production manager's side changes its profession.
		// _group (Group): The group that is changing its profession.
		// _professionType (ProfessionType): The group's new profession type.
		public method OnGroupChangingProfession("_group" as Group, "_professionType" as ProfessionType)
		{
			private ["_cost" as Scalar];
			
			// Delete the group's eventual existing vehicle and return its production value.
			_cost = [_group] call _mVehicleSpawner.DeleteProfessionVehicles;
			[_cost] call _mResourceBook.DepositProduction;
			
			[_group, _professionType] call _self.CreateReservation;
		};
		
//		private method TellSquadVehicleSoonDelivered("_group" as Group)
//		{
//			["Your squad's vehicle is in the production queue and will soon be delivered.", _group] call _mMessageHandler.ShowMessage;
//		};
		
		public method AddReservationsForSquadsWithNoVehicle()
		{
			private ["_intrusionVehicles" as Array /* of IntrusionVehicle */];
			private ["_squadCollection" as SquadCollection, "_squad" as Squad, "_reservation" as Reservation];
			
			call _mVehicleSpawner.RemoveOwnershipOfDestroyedVehicles;
			
			_squadCollection = call PublicVariableHandler.GetSquadCollection;
			
			{
				_squad = _x;

				if (side _squad.Group == _self.Side) then {
					_reservation = [_squad.Group] call _mReservationQueue.GetReservationByGroup;
					
					if (isNull _reservation) then {
						_intrusionVehicles = [_squad.Group] call _mVehicleSpawner.GetIntrusionVehiclesByGroup;
		
						if (count _intrusionVehicles == 0) then {
							[_squad.Group, _squad.ProfessionType] call _self.CreateReservation;
						};
					};
				};
			} foreach _squadCollection.Squads as Squad;
		};
		
		// Performs a cleanup and "unproduces" all profession vehicles that do not have an owner. Production spent on the
		// vehicle is returned to the side.
		public method DeleteProfessionVehiclesWithNoOwner()
		{
			private ["_cost" as Scalar];

			_cost = [_self.Side] call _mVehicleSpawner.DeleteProfessionVehiclesWithNoOwner;
			[_cost] call _mResourceBook.DepositProduction;
		};
		
		// Produces vehicles from the production queue.
		public method PerformProduction()
		{
			private ["_tryOneMore" as Boolean, "_squad" as Squad, "_technologyEstablished" as Boolean];
			private ["_profession" as Profession, "_reservation" as Reservation, "_reservationToMoveUp" as Reservation];
			private ["_totalProduction" as Scalar, "_cost" as Scalar];

			["ProductionManager.PerformProduction (" + str _self.Side + "):"] call LogHandler.Debug;
			["_mReservationQueue: " + str _mReservationQueue] call LogHandler.Debug;
			["_mSquadHandler: " + str _mSquadHandler] call LogHandler.Debug;

			_tryOneMore = true;

			["_tryOneMore: " + str _tryOneMore] call LogHandler.Debug;
			["_mReservationQueue.CurrentReservation: " + str _mReservationQueue.CurrentReservation] call LogHandler.Debug;
			
			// Prioritize
			private _count = call _mReservationQueue.Count;
			_reservationToMoveUp = classNull;
			
			if (_count > 1) then
			{
				scopeName "prio_scope";
					
				private _reservations = call _mReservationQueue.GetReservations;

				if (!([_mReservationQueue.CurrentReservation.ProfessionType] call ProfessionTypeMeta.IsSupportType)) then
				{
					for "_i" from 1 to _count - 1 do
					{
						_reservation = _reservations select _i;
						
						if ([_reservation.ProfessionType] call ProfessionTypeMeta.IsSupportType) then
						{
							_reservationToMoveUp = _reservation;
							breakTo "prio_scope";
						};
					};					
	
					if (isNull _reservationToMoveUp && { !_mReservationQueue.CurrentReservation.IsPlayerGroup }) then
					{
						for "_i" from 1 to _count - 1 do
						{
							_reservation = _reservations select _i;
							
							if (_reservation.IsPlayerGroup) then
							{
								_reservationToMoveUp = _reservation;
								breakTo "prio_scope";
							};
						};					
					};
				};
				
				if (!isNull _reservationToMoveUp) then
				{
					[_reservationToMoveUp] call _mReservationQueue.MoveReservationFirst;
					["Reservation was prioritized: " + str _reservationToMoveUp] call LogHandler.Info;
					return;
				};
			};
			
			while { _tryOneMore && {!isNull _mReservationQueue.CurrentReservation} } do
			{
				["while { _tryOneMore && {!isNull _mReservationQueue.CurrentReservation} } do"] call LogHandler.Debug;
				
				_totalProduction = _mResourceBook.TotalProduction;
				_cost = _mReservationQueue.CurrentReservation.ProductionCost;
				
				_tryOneMore = false;
				_squad = [_mReservationQueue.CurrentReservation.Group] call _mSquadHandler.GetSquadByGroup;
				
				if (isNull _squad) then {
					call _mReservationQueue.RemoveCurrentReservation;
					_tryOneMore = true;
				};
				
				["_totalProduction: " + str _totalProduction] call LogHandler.Debug;
				["_cost: " + str _cost] call LogHandler.Debug;
				["_tryOneMore: " + str _tryOneMore] call LogHandler.Debug;
				["_squad: " + str _squad] call LogHandler.Debug;
			
				if (!isNull _squad) then
				{
					["if (!isNull _squad) then"] call LogHandler.Debug;
					
					_profession = [_squad.ProfessionType] call _mProfessionConfig.GetProfession;
					
					["_profession: " + str _profession] call LogHandler.Debug;
					
					_technologyEstablished = [_profession.RequiredTechnology] call _mOfficeWorker.TechnologyIsEstablished;
					
					["_technologyEstablished: " + str _technologyEstablished] call LogHandler.Debug;
					
					if (!_technologyEstablished) then
					{
						["if (!_technologyEstablished) then"] call LogHandler.Debug;
						call _mReservationQueue.MoveCurrentReservationLast;
					}
					else
					{
						["else (if _technologyEstablished)"] call LogHandler.Debug;
						
						if (_totalProduction >= _cost && _technologyEstablished) then
						{
							["if (_totalProduction >= _cost * _vehiclesCount && _technologyEstablished)"] call LogHandler.Debug;
							
							// Create the vehicle
							[_squad.Group, _squad.ProfessionType, _mReservationQueue.CurrentReservation.VehicleClassName, _cost] call _mVehicleSpawner.SpawnProfessionVehicle;
							[_cost] call _mResourceBook.WithdrawProduction;

							// Tell the group
							["Your squad's vehicle is ready and waiting for you at the base.", _mReservationQueue.CurrentReservation.Group] call _mMessageHandler.ShowMessage;
							
							// Remove the reservation
							call _mReservationQueue.RemoveCurrentReservation;

							// Tell the next squad that their vehicle is being produced.
							/*
							if (call _mReservationQueue.Count > 0) then
							{
								[_mReservationQueue.CurrentReservation.Group] call _self.TellSquadVehicleSoonDelivered;
							};
							*/
							
							_tryOneMore = true;
						};
					};
				};
			};
		};
	};
};
