/*
 * Name:	ClientSquadHandler
 * Date:	2017-12-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all about squads on the client.
 */

using Intrusion.Common;

namespace Intrusion.Client
{
	public class ClientSquadHandler
	{
		private static fields ["_mProfessionConfig" as ProfessionConfig];
	
		public static method Init("_professionConfig" as ProfessionConfig)
		{
			_mProfessionConfig = _professionConfig;
		};
	
		// Notifies the player that his/her profession has changed.
		// Called when any group's profession has changed.
		// _group (Group): The group that has changed profession.
		// _professionType (ProfessionType): The new profession type.
		public static method OnGroupProfessionChanged("_group" as Group, "_professionType" as ProfessionType)
		{
			if (_group == group player) then {
				call ProfessionDialog.CloseDialog;
				["Your group now belongs to the brigade's " + ([_professionType] call _mProfessionConfig.GetProfession).Name] call ClientMessageHandler.ShowMessage;
			};
		};
		
		// Notifies the player that his/her profession could not be changed.
		// Called when any group's profession did not change as desired.
		// _group (Group): The group that tried to change profession.
		// _reason (String): The reason that the group profession was now changed.
		public static method OnGroupProfessionChangeRejected("_group" as Group, "_reason" as String)
		{
			if (_group == group player) then {
				[_reason] call ClientMessageHandler.ShowMessage;
			};
		};
		
		// Adds rating to all members of a squad.
		// _rating (Scalar): The amout of rating to add for a one person group. More for larger groups.
		// _group (Group): The squad/group to add rating to.
		public static method AddSquadRating("_rating" as Scalar, "_group" as Group)
		{
			private ["_ratingReduction" as RatingReduction, "_reductionFactor" as Scalar];
			
			if (_group == group player) then
			{
				_ratingReduction = ClientState.RatingReduction;
				_reductionFactor = 1;
			
				// If player's rating is currently reduced due to a rating reduction reason.
				if (!isNull _ratingReduction && { call _ratingReduction.IsActive }) then
				{
					_reductionFactor = 0.5;
				};
				
				player addRating floor (_rating * _reductionFactor);
				ClientState.CurrentRank = ([rating player] call RankMeta.GetRankByRating);
			};
		};
	};
};
