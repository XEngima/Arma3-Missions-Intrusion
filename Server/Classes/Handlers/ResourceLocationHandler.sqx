/*
 * Name:	ResourceLocationHandler
 * Date:	2017-11-15
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handler for all resource locations.
 */

using Sqx.Markers;
using Intrusion.Common;
using Intrusion.Communication;
 
namespace Intrusion.Server
{
	public class ResourceLocationHandler : IResourceLocationHandler
	{
		private fields ["_mMapMarkersConfig" as IMapMarkersConfig, "_mUnitSpawner" as IUnitSpawner, "_mMarkerHandler" as IMarkerHandler];
		private fields ["_mResourceLocationCollection" as ResourceLocationCollection];
		
		// Creates a ResourceLocationHandler object and seeds with all found factory- and techlab locations.
		public constructor("_mapMarkersConfig" as IMapMarkersConfig, "_unitSpawner" as IUnitSpawner, "_markerHandler" as IMarkerHandler) {
			_mMapMarkersConfig = _mapMarkersConfig;
			_mUnitSpawner = _unitSpawner;
			_mMarkerHandler = _markerHandler;
			
			_mResourceLocationCollection = new ResourceLocationCollection;
			_self.FactoryLocationsCount = 0;
			_self.TechLabLocationsCount = 0;
		};
		
		// Gets the location selected as the Winner's location.
		public property ResourceLocation WinnersLocation { get; private set; };
		
		// Finds all resource locations marked on map with names "FactoryX" and "TechLabX" and creates
		// resource locations for them all.
		public method AquireAllResourceLocations {
			private ["_number" as Scalar, "_markerName" as String];
			
			// Find all factory locations
			_number = 1;
			while { ["Factory" + str _number] call MarkerHelper.MarkerExists } do
			{
				_markerName = "Factory" + str _number;
				
				// Create the flag pole on the map
				private _flag = "Flag_Green_F" createVehicle ([_markerName] call _mMarkerHandler.GetMarkerPos);

				[[_markerName, ResourceFacility.Factory, _flag] new ResourceLocation] call _mResourceLocationCollection.AddResourceLocation;
				_number = _number + 1;
			};
			
			_self.FactoryLocationsCount = _number - 1;
			
			// Find all techlab locations
			_number = 1;
			while { ["Office" + str _number] call MarkerHelper.MarkerExists } do
			{
				_markerName = "Office" + str _number;
				
				// Create the flag pole on the map
				private _flag = "Flag_Green_F" createVehicle ([_markerName] call _mMarkerHandler.GetMarkerPos);

				[[_markerName, ResourceFacility.TechLab, _flag] new ResourceLocation] call _mResourceLocationCollection.AddResourceLocation;
				_number = _number + 1;
			};
			
			_self.TechLabLocationsCount = _number - 1;
			
			// Set winner's location
			private _resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			_self.WinnersLocation = selectRandom _resourceLocations;
			_self.WinnersLocation.IsWinnersLocation = true;
			_self.WinnersLocation.MarkerName setMarkerType _mMapMarkersConfig.WinnersLocationMarkerType;
			
			call _self.BroadcastResourceLocations;
		};
		
		// Broadcasts all resource locations to the clients.
		public method BroadcastResourceLocations {
			[_mResourceLocationCollection] call PublicVariableHandler.BroadcastResourceLocationCollection;
			
			// Tell the clients to update them.
			["ClientResourceLocationHandler.UpdateResourceLocations", [_mResourceLocationCollection]] call Remote.Invoke;
		};
		
		// Gets a resource location from the internal list of flag locations.
		// _markerName (String): Name of the marker associated with the flag location.
		// Returns (ResourceLocation): A flag location. classNull of no flag location was found.
		private method ResourceLocation GetResourceLocation("_markerName" as String)
		{
			private ["_resourceLocations" as Array];
			
			scopeName "main";
			
			_resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			
			{
				if (_x.MarkerName == _markerName) then {
					_x breakOut "main";
				};
			} foreach _resourceLocations as ResourceLocation;
			
			classNull
		};
		
		// Sets the dominant side of a resource location and sends resource location updates to clients.
		// _markerName (String): Name of the marker associated with the flag.
		// _dominantSide (Side): The side that is dominating the side.
		public method SetNewDominantSide("_markerName" as String, "_dominantSide" as Side)
		{
			private ["_resourceLocation" as ResourceLocation];
		
			_resourceLocation = [_markerName] call _self.GetResourceLocation;
			
			if (!isNull _resourceLocation) then {
				_resourceLocation.DominantSide = _dominantSide;
				
				call _self.BroadcastResourceLocations;
				
				if (_dominantSide != civilian) then {
					["ClientMessageHandler.ShowHint", [([_resourceLocation.MarkerName] call _mMarkerHandler.GetMarkerText) + " is being taken over by " + str _dominantSide]] call Remote.Invoke;
				};
			};
		};
		
		// Sets a new owner for a resource location and sends resource location updates to clients.
		// _markerName (String): Name of the marker associated with the flag.
		// _side (Side): The side of the player that captured the flag.
		public method SetNewFlagOwner("_markerName" as String, "_side" as Side)
		{
			private ["_resourceLocation" as ResourceLocation];
			private ["_markerInfo" as MapMarkerInfo];
		
			_resourceLocation = [_markerName] call _self.GetResourceLocation;
			
			if (!isNull _resourceLocation) then {
				_resourceLocation.Side = _side;
				
				// Update the flag texture
				_markerInfo = [_side] call _mMapMarkersConfig.GetMapMarkerInfo;
				(_resourceLocation.Flag) setFlagTexture _markerInfo.FlagTexture;
					
				call _self.BroadcastResourceLocations;
				["ClientMessageHandler.ShowHint", [([_resourceLocation.MarkerName] call _mMarkerHandler.GetMarkerText) + " was captured by " + str _side]] call Remote.Invoke;
			};
		};
		
		// Gets the number of factory locations. 
		public property Scalar FactoryLocationsCount { get; private set; };
		
		// Gets the number of tech lab locations. 
		public property Scalar TechLabLocationsCount { get; private set; };
		
		// Get the number of factories owned by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of factories owned by the side.
		public method Scalar GetFactoriesCountBySide("_side" as Side)
		{
			[_side] call _mResourceLocationCollection.GetFactoriesCountBySide
		};
		
		// Get the number of tech labs ownd by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of tech labs owned by the side.
		public method Scalar GetTechLabsCountBySide("_side" as Side)
		{
			[_side] call _mResourceLocationCollection.GetTechLabsCountBySide
		};
		
		// Creates guarding guerilla units on all resource locations.
		public method CreateGuerillaUnits()
		{
			private ["_resourceLocations" as Array, "_location" as ResourceLocation, "_pos" as Array, "_waypoint" as Array, "_group" as Group, "_noOfUnits" as Scalar, "_roadSegments" as Array];
			
			_resourceLocations = call _mResourceLocationCollection.GetResourceLocations;
			
			{
				_location = _x;
				
				// Create a marker
				
				private _locationPos = getMarkerPos _location.MarkerName;
				
				// Create a group
				
				_group = createGroup [independent, true];
				_noOfUnits = (floor random 3) + 1;
				_roadSegments = _locationPos nearRoads 50;
				
				_pos = [(_locationPos select 0) - 25 + random 50, (_locationPos select 1) - 25 + random 50, 0];
				_waypoint = _group addWaypoint [_pos, 20];
				_waypoint setWaypointType "MOVE";
				_waypoint setWaypointBehaviour "SAFE";
				_waypoint setWaypointSpeed "LIMITED";
				_waypoint setWaypointCombatMode "YELLOW";
				
				_pos = [(_locationPos select 0) - 25 + random 50, (_locationPos select 1) - 25 + random 50, 0];
				_waypoint = _group addWaypoint [_pos, 20];
				
				_pos = [(_locationPos select 0) - 25 + random 50, (_locationPos select 1) - 25 + random 50, 0];
				_waypoint = _group addWaypoint [_pos, 20];
				_waypoint setWaypointType "CYCLE";
				
				if (count _roadSegments > 0) then {
					_pos = getPos (selectRandom _roadSegments);
				};
				
				for "_i" from 1 to _noOfUnits do {
					private _unit = ["I_soldier_F", _pos, _group] call _mUnitSpawner.CreateUnit;

					if (random 100 < 50) then
					{
						_unit addBackpackGlobal "B_Kitbag_cbr";
						(unitBackpack _unit) addMagazineCargoGlobal ["RPG32_F", 1];
						_unit addWeaponGlobal "launch_RPG32_F";
						removeBackpackGlobal _unit;
					};
				};
				
			} foreach _resourceLocations as ResourceLocation;
		};
		
		// Get the resource location collection.
		// Returns (ResourceLocationCollection): The resource location collection.
		public method ResourceLocationCollection GetResourceLocationCollection()
		{
			_mResourceLocationCollection
		};
	};
};
