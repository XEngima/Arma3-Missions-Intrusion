/*
 * Name:	ActionPerformer
 * Date:	2019-05-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Makes actions happen in the world.
 */

using Sqx.Waypoints;
using Intrusion.Server;
using Intrusion.Common;

namespace Intrusion.Ai
{
	public class ActionPerformer : IActionPerformer
	{
		private fields ["_mGroup" as Group];
		
		// Creates a ActionManager object.
		public constructor("_group" as Group, "_resourceLocationHandler" as IResourceLocationHandler)
		{
			_mGroup = _group;
		};
		
		// Performs a move action for an AI group.
		// _group (Group): The group to move.
		// _moveAction (MoveAction): Information about the movement.
		public method DoMove("_moveAction" as MoveAction)
		{
			private ["_waypoint" as Array];
			
			[_mGroup] call WaypointHelper.DeleteAllWaypointsFromGroup;
			
			_waypoint = _mGroup addWaypoint [_moveAction.Position, 10];
			_waypoint setWaypointSpeed "NORMAL";
			_waypoint setWaypointType "HOLD";
			_mGroup setSpeedMode "NORMAL";
		};
		
		// Performs a capture action for an AI group.
		// _group (Group): The group to capture a location.
		// _moveAction (MoveAction): Information about the movement.
		public method DoCapture("_captureAction" as CaptureAction)
		{
			private ["_waypoint" as Array];
			
			[_mGroup] call WaypointHelper.DeleteAllWaypointsFromGroup;
			
			_waypoint = _mGroup addWaypoint [_captureAction.Position, 10];
			_waypoint setWaypointSpeed "LIMITED";
			_waypoint setWaypointCombatMode "YELLOW";
			_waypoint setWaypointBehaviour "AWARE";
			_waypoint setWaypointType "SAD";
			
			_mGroup setSpeedMode "LIMITED";
			_mGroup setCombatMode "YELLOW";
			_mGroup setBehaviour "AWARE";
		};		
		
		// Performs a board action for an AI group.
		// _group (Group): The group to capture a location.
		// _boardAction (BoardAction): Information about the boarding.
		public method DoBoard("_boardAction" as BoardAction)
		{
			{
				if (isNull (assignedVehicle _x) && isNull (assignedDriver _boardAction.Vehicle.Vehicle)) then {
					_x assignAsDriver _boardAction.Vehicle.Vehicle;
					[_x] orderGetIn true;
				};
				
				if (isNull (assignedVehicle _x) && isNull (assignedCommander _boardAction.Vehicle.Vehicle)) then {
					_x assignAsCommander _boardAction.Vehicle.Vehicle;
					[_x] orderGetIn true;
				};
				
				if (isNull (assignedVehicle _x) && isNull (assignedGunner _boardAction.Vehicle.Vehicle)) then {
					_x assignAsGunner _boardAction.Vehicle.Vehicle;
					[_x] orderGetIn true;
				};
				
				if (isNull (assignedVehicle _x)) then {
					_x assignAsCargo _boardAction.Vehicle.Vehicle;
					[_x] orderGetIn true;
				};
			} foreach units _mGroup;
		};
		
		// Performs a disembark action for an AI group.
		// _disembarkAction (DisembarkAction): Information about the disembarkment.
		public method DoDisembark("_disembarkAction" as DisembarkAction)
		{
			call _disembarkAction.Service.RunAsync;
		};
		
		
		// Limits the speed of a vehicle.
		// _vehicle (Vehicle): The vehicle to have a limited speed.
		// _speed (Scalar): The speed to set.
		public method LimitSpeed("_vehicle" as Object, "_speed" as Scalar)
		{
			_vehicle forceSpeed _speed;
		};
		
		// Moves the members of a group out of its vehicles and unassigns them immediately.
		// _group (Group): The group to move out.
		public method MoveOutFromVehicle("_group" as Group)
		{
			{
				unassignVehicle _x;
				moveOut _x;
			} foreach units _group as Object;
		};
	};
};
