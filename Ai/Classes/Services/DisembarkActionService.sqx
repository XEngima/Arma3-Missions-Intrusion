/*
 * Name:	DisembarkActionService
 * Date:	2019-05-27
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that disembarks units from a vehicle.
 */

using Intrusion.Common;
using Sqx.Waypoints;

namespace Intrusion.Ai
{
	public class DisembarkActionService : IActionService
	{
		private fields ["_mTime" as IMissionTime, "_mTimeoutTime" as Scalar, "_mWorld" as IWorld, "_mActionPerformer" as IActionPerformer, "_mGroup" as Group, "_mAiVehicle" as AiVehicle];
	
		// Creates a DisembarkActionService object.
		public constructor("_time" as IMissionTime, "_timeoutTime" as Scalar, "_world" as IWorld, "_actionPerformer" as IActionPerformer, "_group" as Group, "_aiVehicle" as AiVehicle)
		{
			_mTime = _time;
			_mTimeoutTime = _timeoutTime;
			_mWorld = _world;
			_mActionPerformer = _actionPerformer;
			_mGroup = _group;
			_mAiVehicle = _aiVehicle;
			_self.IsRunning = false;
		};
		
		// Gets whether the service reached its goals or not (if it timed out).
		public property Boolean Success { get; private set; };
		
		// Gets whether the service is still running nor not.
		public property Boolean IsRunning { get; private set; };
		
		private method Boolean CheckActionTimeout()
		{
			scopeName "main";
			
			if ((call _mTime.GetMissionTime) > _mTimeoutTime) then {
				_self.Success = false;
				true breakOut "main";
			};
			
			false
		};
		
		private method Run()
		{
			scopeName "main";
			
			[_mGroup] call WaypointHelper.DeleteAllWaypointsFromGroup;
			[_mAiVehicle.Vehicle, 0] call _mActionPerformer.ForceSpeed;
			
			while {([_mAiVehicle.Vehicle] call _mWorld.GetSpeed) > 1} do
			{
				if (call _self.CheckActionTimeout) then {
					breakOut "main";
				};
				
				sleep 0.5;
			};
			
			[_mAiVehicle.Vehicle, -1] call _mActionPerformer.ForceSpeed;
			[_mGroup] call _mActionPerformer.MoveOutFromVehicle;
			
			_self.Success = true;
			_self.IsRunning = false;
		};
		
		public method RunAsync()
		{
			_self.IsRunning = true;
			_self.Success = true;
			[] spawn _self.Run;
		};
	};
};
