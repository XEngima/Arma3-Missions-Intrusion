/*
 * Name:	ServerEventReciever
 * Date:	2019-01-31
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Static class that handles all Intrusion events sent from clients.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class ServerEventReciever
	{
		// Called when a player claims brigade leadership.
		// _playerUid (String): The player's UID.
		// _side (Side): The player's side.
		public static method OnPlayerClaimBrigadeLeadership("_playerUid" as String, "_side" as Side) {
			[_playerUid, _side] call gServer.BrigadeLeadershipHandler.TrySetBrigadeLeader;
		};
		
		// Called when a player quits brigade leadership.
		// _playerUid (String): The player's UID.
		// _side (Side): The player's side.
		public static method OnPlayerQuitBrigadeLeadership("_playerUid" as String) {
			[_playerUid] call gServer.BrigadeLeadershipHandler.QuitBrigadeLeadership;
		};
		
		public static method OnLeaderMoveBase("_leader" as Object, "_baseLayout" as BaseLayout)
		{
			private ["_moveBaseService" as MoveBaseService];
			
			_moveBaseService = [side group _leader, _baseLayout, gServer.MessageHandler, gCommonConfig.MapMarkers, gServer.VehicleSpawner] new MoveBaseService;
			call _moveBaseService.RunAsync;
		};
		
		// Called when a player joined a group
		public static method OnPlayerJoinedGroup("_player" as Object, "_oldGroup" as Group, "_newGroup" as Group)
		{
			if (count units _oldGroup == 0) then {
				call gServer.SquadHandler.RemoveEmptySquads;
			};
		};
		
		// Called when a JIP player entered the game - i.e. got its player unit in the mission.
		// _player (Object): The unit of the player that entered.
		public static method OnJipPlayerEnteredGame("_player" as Object)
		{
			[_player] call gServer.SquadHandler.AddRatingEventHandlerToPlayer;
		};
		
		public static method OnFlagCaptured("_flag" as Object, "_markerName" as String, "_capturedBySide" as Side, "_capturedByUnit" as Object)
		{
			[_markerName, _capturedBySide] call gServer.ResourceLocationHandler.SetNewFlagOwner;
			["ClientEventReciever.OnAddSquadRating", [200, group _capturedByUnit]] call Remote.Invoke;
		};
		
		// Called when mission time is up.
		public static method OnMissionTimeIsUp()
		{
			["END1"] spawn BIS_fnc_endMission;
		};
	};
};
