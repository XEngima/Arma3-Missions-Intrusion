/*
 * Name:	SquadCollection
 * Date:	2018-11-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Collection of squads.
 */
namespace Intrusion.Common
{
	public class SquadCollection
	{
		private fields ["_mLockedById" as Scalar];
		
		// Creates a SquadCollection object.
		public constructor()
		{
			_self.Squads = [];
			_mLockedById = 0;
		};
		
		// Gets the squad array.
		public property Array Squads { get; private set; };
		
		// Adds a new or updates an existing squad.
		// _squad (Squad): The squad to add or update.
		public method AddOrUpdateSquad("_squad" as Squad)
		{
			scopeName "main";

			for "_i" from 0 to (count _self.Squads - 1) do 
			{
				private ["_existingSquad" as Squad];
				
				_existingSquad = _self.Squads select _i;
				
				if (_existingSquad.Group == _squad.Group) then {
					_self.Squads set [_i, _squad];
					breakOut "main";
				};
			};
			
			_self.Squads pushBack _squad;
		};
		
		// Removes all empty squads.
		// Returns (Array): All squads that were removed.
		public method Array RemoveEmptySquads {
			private ["_squadsToKeep" as Array, "_squadsToDelete" as Array];
			
			_squadsToKeep = [];
			_squadsToDelete = [];
		
			{
				if (!(call _x.IsEmpty)) then {
					_squadsToKeep pushBack _x;
				}
				else {
					_squadsToDelete pushBack _x;
				};
			} foreach _self.Squads as Squad;
			
			_self.Squads = _squadsToKeep;
			_squadsToDelete
		};
		
		// Gets the number of squads with a profession type of a certain side.
		// _side (Side): The side to count.
		// _professionType (ProfessionType): The profession type to count.
		public method CountByProfessionType("_side" as Side, "_professionType" as ProfessionType)
		{
			{ side _x.Group == _side && _x.ProfessionType == _professionType } count (_self.Squads) as Squad;
		};
		
		// Checks whether all slots of a profession type is occupied for a side or not.
		// _side (Side): The side to check.
		// _professionType (ProfessionType): The profession type to check.
		// _professionConfig (ProfessionConfig): The profession config (since this is a distributed class).
		// Returns (Boolean): true if the profession is still available on the side, false if all slots of the 
		// current profession is occupied.
		public method Boolean ProfessionTypeAvailable("_side" as Side, "_professionType" as ProfessionType, "_professionConfig" as ProfessionConfig)
		{
			private ["_assignedSquadsCount" as Scalar, "_profession" as Profession];
			
			_assignedSquadsCount = [_side, _professionType] call _self.CountByProfessionType;
			_profession = [_professionType] call _professionConfig.GetProfession;

			if (!isNull _profession) then {
				return _assignedSquadsCount < _profession.MaxGroupsCount || _profession.MaxGroupsCount < 0;
			};
			
			return false;
		};
		
		// Checks whether all slots of a profession type is occupied for a side or not, and also tests against current group size.
		// _side (Side): The side to check.
		// _professionType (ProfessionType): The profession type to check.
		// _professionConfig (ProfessionConfig): The profession config (since this is a distributed class).
		// Returns (Boolean): true if the profession is still available on the side, false if all slots of the 
		// current profession is occupied.
		public method Boolean ProfessionTypeAvailableForGroup("_side" as Side, "_professionType" as ProfessionType, "_professionConfig" as ProfessionConfig, "_squadSize" as Scalar)
		{
			private ["_available" as Boolean, "_profession" as Profession];
			
			_available = [_side, _professionType, _professionConfig] call _self.ProfessionTypeAvailable;
			
			if (_available) then
			{
				_profession = [_professionType] call _professionConfig.GetProfession;
				
				if (!isNull _profession) then {
					if (_profession.MaxGroupSize == 0 || _profession.MaxGroupSize >= _squadSize) then {
						return true;
					};
				};
			};
			
			return false;
		};
		
		// Checks whether all slots of a profession type is selectable for a squad.
		// _side (Side): The side to check.
		// _professionType (ProfessionType): The profession type to check.
		// _rating (Scalar): The squad's rating.
		// _professionConfig (ProfessionConfig): The profession config (since this is a distributed class).
		// Returns (Boolean): true if the profession is available and selectable on the side, otherwise false.
		public method Boolean ProfessionTypeSelectable("_side" as Side, "_professionType" as ProfessionType, "_rating" as Scalar, "_professionConfig" as ProfessionConfig)
		{
			private ["_profession" as Profession, "_available" as Boolean, "_selectable" as Boolean];
			
			_selectable = false;
			_available = [_side, _professionType, _professionConfig] call _self.ProfessionTypeAvailable;
			
			if (_available) then {
				_profession = [_professionType] call _professionConfig.GetProfession;
				_selectable = _rating >= (_profession.RequiredRank as Scalar);
			};
			
			_selectable
		};
		
		// Aquires a lock that prevents other threads to change the squads simultaneously.
		public method AquireLock {
			// Check that no other thread is currently making changes to the squads.
			while { _mLockedById != 0 } do { sleep 0.01; };
			_mLockedById = 1;
		};
		
		// Releases the lock set by AquireLock so that other threads can make changes to squads.
		public method ReleaseLock {
			_mLockedById = 0;
		};
		
		// Gets a squad by a group.
		// _group (Group): The group to get squad for.
		// Returns (Squad): The group's squad. classNull if the squad was not found.
		public method Squad GetSquadByGroup("_group" as Group)
		{
			scopeName "main";
		
			{
				private ["_squad" as Squad];
				_squad = _x as Squad;
				
				if (_squad.Group == _group) then {
					_squad breakOut "main";
				};
			} foreach _self.Squads as Squad;
			
			classNull
		};
	};
};
