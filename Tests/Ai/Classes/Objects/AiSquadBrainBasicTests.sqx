/*
 * Name:	AiBrainBasicTests
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test class for AiBrain, that tests basic squad behaviour for infantry squads.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Ai;
using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Tests.Ai
{
	public class AiSquadBrainBasicTests
	{
		#region Fields
		
		private static fields [
			"_mGroup" as Group,
			"_mWorld" as TestWorld,
			"_mMarkerHandler" as TestMarkerHandler,
			"_mActionPerformer" as TestActionPerformer,
			"_mBrain" as AiSquadBrain,
			"_mKnowledge" as Knowledge,
			"_mRandomGenerator" as TestRandomGenerator,
			"_mLocationFactory1" as ResourceLocation,
			"_mLocationOffice1" as ResourceLocation,
			"_mLocationFactory2" as ResourceLocation,
			"_mLocationOffice2" as ResourceLocation,
			"_mResourceLocationCollection" as ResourceLocationCollection,
			"_mTime" as TestMissionTime,
			"_mActionService" as TestActionService,
			"_mActionServiceFactory" as TestActionServiceFactory,
			"_mInventedTechnologiesCollection" as InventedTechnologiesCollection;
		];
		
		#endregion

		// Registers all tests that should be run.
		public static method Init {
			["Intrusion.Tests.Ai", "AiSquadBrainBasicTests", [
				"StateIdleAndNoOrder_Act_NotIdleAndHasOrder",
				"AtBaseAttackOrder_Act_StatusMove",
				"MovingToDestinationFarOff_Act_StatusMoving",
				"ArrivingAtDestination_Act_StatusIdle",
				"AtEnemyLocation_Act_StatusCapturing",
				"AfterCapturingLocation_Act_StatusIdle",
				"AttackingLocationCapturedBeforeArrival_Act_StatusIdle",
				"OwnOrderToAttackOwnLocationNotPresentAndIdle_Act_NewOrderStatusIdle",
				"OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle",
				"SquadStationary_Act_TimeoutStatusIdle",
				"SquadTemporaryStationary_Act_NoTimeoutStatusMoving",
				"MovingButNeverArrives_Act_TimeoutStatusIdle",
				"MovingMediumNearVehicle_Act_StatusMovingToVehicle",
				"MovingMediumVehicleHalfNear_Act_StatusMovingToLocation",
				"MovingFarAtVehicle_Act_StatusMountingVehicle",
				"MovingFarVehicleNearby_Act_StatusMoving",
				"MovingToNearbyVehicle_Act_StatusIdle",
				"MovingFarHasMountedVehicle_Act_StatusMoving",
				"MountedArrivingFarMoving_Act_StatusIdle",
				"MountedCloseToDestinationIdle_Act_StatusDisembarking",
				"CloseToDestinationDisembarkedSuccessfully_Act_StatusIdle",
				"CloseToDestinationTimeoutWhenDisembarking_Act_StatusIdle",
				"MountedMovingDetectedEnemies_Act_StatusIdle",
				"MountedIdleDetectedEnemies_Act_StatusDisembarking",
				"MovingToDestinationFarOffDetectingNearEnemiesIdle_Act_StatusEngaging",
				"AllSquadMembersAreDeadMoving_Act_RespawnedAndStatusIdle",
				"SingleSquadMemberIsDead_Act_TakesAtLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_DoesNotTakeAtLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_TakesAaLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_DoesNotTakeAaLauncherAtRespawn",
			]] call TestEngine.Register;
		};
		
		private static method BeforeEach()
		{
			private ["_mapMarkerInfo" as MapMarkerInfo, "_decisionMaker" as InfantryDecisionMaker];
			
			_mResourceLocationCollection = new ResourceLocationCollection;
			_mActionService = new TestActionService;
			_mActionServiceFactory = [_mActionService] new TestActionServiceFactory;
			
			_mLocationFactory1 = ["FACTORY1", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice1 = ["OFFICE1", ResourceFacility.TechLab, objNull] new ResourceLocation;
			_mLocationFactory2 = ["FACTORY2", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice2 = ["OFFICE2", ResourceFacility.TechLab, objNull] new ResourceLocation;
			
			[_mLocationFactory1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationFactory2] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice2] call _mResourceLocationCollection.AddResourceLocation;
			
			_mMarkerHandler = new TestMarkerHandler;
			["respawn_marker", [0, 0, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY1", [200, 200, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE1", [400, 400, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY2", [600, 600, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE2", [800, 800, 0]] call _mMarkerHandler.AddMarkerPos;
			
			_mGroup = createGroup west;
			_mWorld = [_mResourceLocationCollection] new TestWorld;
			_mActionPerformer = [_mWorld] new TestActionPerformer;
			_mRandomGenerator = [0] new TestRandomGenerator;
			_mKnowledge = [_mGroup, []] new Knowledge;
			_mTime = [0] new TestMissionTime;
			_mInventedTechnologiesCollection = new InventedTechnologiesCollection;
			private _testActionTimeoutConfig = new TestActionTimeoutConfig;
			
			_mapMarkerInfo = [west, "respawn_marker", "carpark_marker", "weapondepot_marker", "flag_texture", "marker_icon_type"] new MapMarkerInfo;
			_decisionMaker = [_mTime, _mKnowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, _mMarkerHandler, _testActionTimeoutConfig] new InfantryDecisionMaker;
			
			_mBrain = [
				_mGroup, 
				_mWorld, 
				_mActionPerformer, 
				_mRandomGenerator, 
				_mMarkerHandler, 
				_testActionTimeoutConfig,
				_mTime, 
				_mapMarkerInfo,
				new TestAiWeaponsConfig,
				_mInventedTechnologiesCollection,
				_mKnowledge,
				_decisionMaker,
			] new AiSquadBrain;
		};
		
		private static method AfterEach()
		{
			deleteGroup _mGroup;
		};
		
		private static method StateIdleAndNoOrder_Act_NotIdleAndHasOrder
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not make a decision."] call Assert.AreNotEqual;
			[_mKnowledge.Order, "AI did not create an order."] call Assert.IsNotNull;
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method AtBaseAttackOrder_Act_StatusMove
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mRandomGenerator.Number = 0;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI did not start movement."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not decide to perform a move action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			[[200, 200, 0], _moveAction.Position, "AI moves to the wrong destination."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOff_Act_StatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mKnowledge.Members pushBack [[10, 10, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI movement was interrupted."] call Assert.AreEqual;
		};
		
		private static method ArrivingAtDestination_Act_StatusIdle
		{
			// Arrange
			_mLocationFactory1.Side = east;
			_mWorld.LeaderPos = [190, 190, 0];
			_mKnowledge.Members pushBack [[190, 190, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not halt at flag."] call Assert.AreEqual;
		};
		
		private static method AtEnemyLocation_Act_StatusCapturing
		{
			// Arrange
			_mLocationFactory1.Side = east;
			_mWorld.LeaderPos = [210, 210, 0];
			_mWorld.SquadPresenceAtResourceLocation = true;
			_mKnowledge.Members pushBack [[210, 210, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Capturing, _mKnowledge.State, "AI has not changed state to capturing."] call Assert.AreEqual;
			[1, count _mActionPerformer.CaptureActions, "AI is not capturing."] call Assert.AreEqual;
		};
		
		private static method AfterCapturingLocation_Act_StatusIdle
		{
			// Arrange
			_mLocationFactory1.Side = west;
			_mWorld.LeaderPos = [190, 190, 0];
			_mWorld.SquadPresenceAtResourceLocation = true;
			_mKnowledge.Members pushBack [[190, 190, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Capturing;
			_mKnowledge.CurrentAction = [60, [200, 200, 0], "FACTORY1"] new CaptureAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI trying to capture own flag."] call Assert.AreEqual;
		};
		
		private static method AttackingLocationCapturedBeforeArrival_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [25, 25, 0];
			_mKnowledge.Members pushBack [[25, 25, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI attacking but location is already captured."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToAttackOwnLocationNotPresentAndIdle_Act_NewOrderStatusIdle
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [110, 110, 0];
			_mKnowledge.Members pushBack [[110, 110, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [400, 400, 0], _mLocationOffice1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is moving."] call Assert.AreEqual;
			
			//_action = _mKnowledge.CurrentAction as MoveAction;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [410, 410, 0];
			_mKnowledge.Members pushBack [[410, 410, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [400, 400, 0], _mLocationOffice1] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			//_action = _mKnowledge.CurrentAction as MoveAction;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method SquadStationary_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [350, [200, 200, 0], "FACTORY1"] new MoveAction;
			
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 295;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not stationary enough but timed out."] call Assert.AreEqual;
		};
		
		private static method SquadTemporaryStationary_Act_NoTimeoutStatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 285;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI stationary but did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingButNeverArrives_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, [200, 200, 0], "FACTORY1"] new MoveAction;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI movement did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingMediumNearVehicle_Act_StatusMovingToVehicle
		{
			private ["_action" as MoveAction];
			
			// Arrange
			_mWorld.LeaderPos = [600, 500, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [601, 530, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[600, 500, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not moving."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			[_action is MoveAction, "Action is not a move action."] call Assert.IsTrue;
			[[600, 600, 0], _action.Position, "AI moved to the wrong position."] call Assert.AreEqual;
		};
		
		private static method MovingMediumVehicleHalfNear_Act_StatusMovingToLocation
		{
			private ["_action" as MoveAction];
			
			// Arrange
			_mWorld.LeaderPos = [600, 400, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [601, 500, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[600, 400, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not leaving vehicle and moving."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			[_action is MoveAction, "Action is not a move action."] call Assert.IsTrue;
			[_action.Position, [600, 600, 0], "AI moved to the wrong position."] call Assert.AreEqual;
		};
		
		private static method MovingFarAtVehicle_Act_StatusMountingVehicle
		{
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [10, 10, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.MountingVehicle, _mKnowledge.State, "AI not mounting nearby vehicle."] call Assert.AreEqual;
			[1, count _mActionPerformer.MountActions, "AI did not perform a mount action."] call Assert.AreEqual;
		};
		
		private static method MovingToNearbyVehicle_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [25, 25, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [30, 30, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[25, 25, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.CurrentAction = [30, [30, 30, 0], "FACTORY2"] new MoveAction;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dit not stop at vehicle."] call Assert.AreEqual;
		};
		
		private static method MovingFarVehicleNearby_Act_StatusMoving
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mWorld.LeaderPos = [0, 0, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [30, 30, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not moving towards nearby vehicle."] call Assert.AreEqual;
			[_mKnowledge.CurrentAction, "Current action not set."] call Assert.IsNotNull;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			
			[[30, 30, 0], _moveAction.Position, "Squad moving to wrong position."] call Assert.AreEqual;
		};
		
		private static method MovingFarHasMountedVehicle_Act_StatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mWorld.ClosestEmptyFreeVehicle = [objNull, [15, 15, 0], 2] new VehicleContainer;
			_mWorld.SquadMounted = true;
			_mKnowledge.Members pushBack [[10, 10, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not moving with vehicle."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
		};
		
		private static method MountedArrivingFarMoving_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.SquadMounted = true;
			_mKnowledge.Members pushBack [[550, 550, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not stop moving."] call Assert.AreEqual;
			//[1, count _mActionPerformer.MoveActions, "AI did not perform a move action."] call Assert.AreEqual;
		};
		
		private static method MountedCloseToDestinationIdle_Act_StatusDisembarking
		{	
			private ["_action" as DisembarkAction];
			
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.SquadMounted = true;
			_mKnowledge.Members pushBack [[550, 550, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Disembarking, _mKnowledge.State, "AI not disembarking."] call Assert.AreEqual;
			_action = _mKnowledge.CurrentAction as DisembarkAction;
			[_action is DisembarkAction, "Action is not a disembark action."] call Assert.IsNotNull;
		};
		
		private static method CloseToDestinationDisembarkedSuccessfully_Act_StatusIdle
		{	
			private ["_vehicleContainer" as VehicleContainer];
			
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[550, 550, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Disembarking;
			
			_vehicleContainer = [objNull, [550, 550, 0], 2] new VehicleContainer;
			
			_mActionService.IsRunning = false;
			_mActionService.Success = true;
			
			_mKnowledge.CurrentAction = [300, _vehicleContainer, _mActionService] new DisembarkAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not disembark."] call Assert.AreEqual;
		};
		
		private static method CloseToDestinationTimeoutWhenDisembarking_Act_StatusIdle
		{	
			private ["_aiVehicle" as VehicleContainer];
			
			// Arrange
			_mWorld.LeaderPos = [550, 550, 0];
			_mWorld.SquadMounted = true;
			_mKnowledge.Members pushBack [[550, 550, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Disembarking;
			
			_aiVehicle = [objNull, [550, 550, 0], 2] new VehicleContainer;
			
			_mActionService.IsRunning = false;
			_mActionService.Success = false;
			
			_mKnowledge.CurrentAction = [300, _aiVehicle, _mActionService] new DisembarkAction;
			_mTime.MissionTime = 600;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI not disembarking."] call Assert.AreEqual;
		};
		
		private static method MountedMovingDetectedEnemies_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = true;
			_mWorld.ClosestDetectedEnemy = [[250, 300, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[300, 300, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not stop when detecting enemies."] call Assert.AreEqual;
		};
		
		private static method MountedIdleDetectedEnemies_Act_StatusDisembarking
		{
			private ["_action" as DisembarkAction];
		
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = true;
			_mWorld.MountedVehicle = [objNull, [300, 300, 0], 4] new VehicleContainer;
			_mWorld.ClosestDetectedEnemy = [[250, 300, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[300, 300, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			private _expectedState = [AiSquadState.Disembarking] call AiSquadStateMeta.ToString;
			private _actualState = [_mKnowledge.State] call AiSquadStateMeta.ToString;
			[_expectedState, _actualState, "AI does not disembark when detecting enemies."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as DisembarkAction;
			[_action is DisembarkAction, "Action is not a disembark action."] call Assert.IsNotNull;
		};
		
		private static method MovingToDestinationFarOffDetectingNearEnemiesIdle_Act_StatusEngaging
		{
			private ["_action" as EngageAction];
		
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mWorld.ClosestDetectedEnemy = [[50, 50, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[10, 10, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [200, 200, 0], _mLocationFactory1] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Engaging, _mKnowledge.State, "AI did not engage near enemies."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as EngageAction;
			[_action is EngageAction, "Action is not an engage action."] call Assert.IsNotNull;
		};
		
		private static method AllSquadMembersAreDeadMoving_Act_RespawnedAndStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			[west, Technology.Transport] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.2;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher but it's not invented."] call Assert.IsFalse;
		};
		
		private static method SingleSquadMemberIsDead_Act_TakesAtLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			[west, Technology.Ordnance] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.2;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI did not pick a launcher."] call Assert.IsTrue;
			["launch_NLAW_F", _mActionPerformer.EquippedLauncherClassName, "AI did not pick correct launcher."] call Assert.AreEqual;
			["NLAW_F", _mActionPerformer.EquippedLauncherMagazineClassName, "AI did not pick correct launcher ammo."] call Assert.AreEqual;
		};
		
		private static method SingleSquadMemberIsDead_Act_DoesNotTakeAtLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			[west, Technology.Ordnance] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.4;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher."] call Assert.IsFalse;
		};
		
		private static method SingleSquadMemberIsDead_Act_TakesAaLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			[west, Technology.AntiAir] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.4;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI did not pick a launcher."] call Assert.IsTrue;
			["launch_B_Titan_F", _mActionPerformer.EquippedLauncherClassName, "AI did not pick correct launcher."] call Assert.AreEqual;
			["Titan_AA", _mActionPerformer.EquippedLauncherMagazineClassName, "AI did not pick correct launcher ammo."] call Assert.AreEqual;
		};
		
		private static method SingleSquadMemberIsDead_Act_DoesNotTakeAaLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, [600, 600, 0], _mLocationFactory2] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, [600, 600, 0], "FACTORY2"] new MoveAction;
			
			[west, Technology.AntiAir] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.7;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher."] call Assert.IsFalse;
		};
	};
};
