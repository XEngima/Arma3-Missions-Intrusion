/*
 * Name:	ProfessionDialog
 * Date:	2017-11-29
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A dialog in which the user can change profession.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class ProfessionDialog
	{
		private static fields [
			"_mOptions" as Array /* of ProfessionType */,
			"_mProfessionConfig" as IProfessionConfig,
			"_mVehiclesConfig" as IProfessionVehiclesConfig,
			"_mTechnologyConfig" as ITechnologyConfig,
			"_mVehicleClassNamesConfig" as IVehicleClassNamesConfig,
			"_mDefaultColor" as Array,
			"_mDisabledColor" as Array,
			"_mCurrentColor" as Array,
			"_mPlayersCurrentProfIndex" as Scalar
		];
	
		// Initializes the profession dialog.
		public static method Init(
			"_professionConfig" as IProfessionConfig,
			"_technologyConfig" as ITechnologyConfig,
			"_vehicleClassNamesConfig" as IVehicleClassNamesConfig,
			"_vehiclesConfig" as IProfessionVehiclesConfig
		)
		{
			_mProfessionConfig = _professionConfig;
			_mVehicleClassNamesConfig = _vehicleClassNamesConfig;
			_mTechnologyConfig = _technologyConfig;
			_mVehiclesConfig = _vehiclesConfig;
			
			_mOptions = [];
			_mDefaultColor = [1,1,1,1];
			_mDisabledColor = [0.5,0.5,0.5,1];
			_mCurrentColor = [0.85,0.4,0,1];
			_self.IsOpen = false;
			_self.SelectedProfession = ProfessionType.Undefined;
			_mPlayersCurrentProfIndex = -1;
		};
		
		// Gets or sets the profession type that the user has selected.
		public static property ProfessionType SelectedProfession { get; set; };
		
		// Gets whether the dialog is open or not.
		public static property Boolean IsOpen { get; private set; };
		
		// Reads the selected profession type from the combo box
		// Returns (Profession): The selected profession. classNull if no profession is selected.
		private static method ProfessionType GetSelectedProfessionTypeFromCombo()
		{
			private _selectedIndex = lbCurSel (DialogControl.GroupProfessionListBox as Scalar);
			
			_mOptions select _selectedIndex
		};

		// Adds all professions to the combo box.
		private static method AddProfessions()
		{
			private ["_options" as Array];
			
            _options = [];
            
			{
				_mPlayersCurrentProfIndex = 0;
				lbAdd [DialogControl.GroupProfessionListBox, _x.Name];
				_options pushBack _x.Type;
			} foreach (call _mProfessionConfig.GetAllProfessions) as Profession;
            
            _mOptions = _options;
		};
		
		// Change color in list.
		private static method UpdateListBoxItemsColor()
		{
			private [
				"_profession" as Profession,
				"_squadCollection" as SquadCollection,
				"_unitsInPlayerGroup" as Scalar,
				"_playerGroupProfessionType" as ProfessionType,
				"_playerSquad" as Squad
			];
			_unitsInPlayerGroup = count units group player;
			_playerGroupProfessionType = ProfessionType.Undefined;
		
			if (call PublicVariableHandler.SquadCollectionHasValue) then {
				_squadCollection = call PublicVariableHandler.GetSquadCollection;
				_playerSquad = [group player] call _squadCollection.GetSquadByGroup;
				if (!isNull _playerSquad) then {
					_playerGroupProfessionType = _playerSquad.ProfessionType;
				};
				
				{
					_profession = [_x] call _mProfessionConfig.GetProfession;
					// If profession is available, and if the group has a good size
					if (
						[playerSide, _profession.Type] call _squadCollection.ProfessionTypeAvailable &&
						_unitsInPlayerGroup >= _profession.MinGroupSize &&
						_unitsInPlayerGroup <= _profession.MaxGroupSize &&
						rating leader group player >= (_profession.RequiredRank as Scalar)
					) then {
						lbSetColor[DialogControl.GroupProfessionListBox, _forEachIndex, _mDefaultColor];
						lbSetData[DialogControl.GroupProfessionListBox, _forEachIndex, "Enabled"];
					}
					else {
						lbSetColor[DialogControl.GroupProfessionListBox, _forEachIndex, _mDisabledColor];
						lbSetData[DialogControl.GroupProfessionListBox, _forEachIndex, "Disabled"];
					};
					
					// If this is players current profession, change color again and mark button to be disabled.
					if (_playerGroupProfessionType == _profession.Type) then {
						lbSetColor[DialogControl.GroupProfessionListBox, _forEachIndex, _mCurrentColor];
						lbSetData[DialogControl.GroupProfessionListBox, _forEachIndex, "Disabled"];
						_mPlayersCurrentProfIndex = _forEachIndex;
					};
					
				} forEach _mOptions as ProfessionType;
            }
            else {
				{
					_profession = [_x] call _mProfessionConfig.GetProfession;
					// If the group has a good size
					if (
						_unitsInPlayerGroup >= _profession.MinGroupSize &&
						_unitsInPlayerGroup <= _profession.MaxGroupSize &&
						rating leader group player >= (_profession.RequiredRank as Scalar)
					) then {
						lbSetColor[DialogControl.GroupProfessionListBox, _forEachIndex, _mDefaultColor];
						lbSetData[DialogControl.GroupProfessionListBox, _forEachIndex, "Enabled"];
					}
					else {
						lbSetColor[DialogControl.GroupProfessionListBox, _forEachIndex, _mDisabledColor];
						lbSetData[DialogControl.GroupProfessionListBox, _forEachIndex, "Disabled"];
					};
					
				} forEach _mOptions as ProfessionType;
            };
		};
	
		// Shows the dialog.
		// Returns (DialogResult): A dialog result.
		public static method DialogResult ShowDialog()
		{
			waitUntil { !dialog };
			
			// Create the dialog
            createDialog "IntProfessionDialog";
			
			// Add professions to list and change there's color
			call _self.AddProfessions;
			call _self.UpdateListBoxItemsColor;
			
			if ( _mPlayersCurrentProfIndex > -1 ) then {
				lbSetCurSel [DialogControl.GroupProfessionListBox, _mPlayersCurrentProfIndex];
			};
			
			_self.IsOpen = true;

			// Wait until dialog is closed
			waitUntil { !dialog };
			
			// Return OK.
			DialogResult.Ok
		};
		
		// Closes the dialog if it is open.
		public static method CloseDialog()
		{
			if (_self.IsOpen) then {
				closeDialog 0;
			};
		};
		
 		// Change Image and text when a new selection is made in the listbox.
		// Called by the .hpp-dialog
		public static method OnListSelectChanged {
			private [
				"_profession" as Profession, 
				"_vehicles" as ProfessionVehicleClassNamesInfo, 
				"_technology" as TechnologyInfo,
				"_vehicleInfo" as ProfessionVehicleInfo,
				"_className" as String,
				"_thisData" as String,
				"_selectedIndex" as Scalar,
				"_squadSize" as String,
				"_maxGroupsCount" as String,
				"_weaponNames" as String,
				"_squadsInBrigade" as String
			];
			private _vehicleNames = []; 
			private _ctrlVehiclePicture = (findDisplay 2999) displayCtrl 2231;
			private _ctrlDescription = (findDisplay 2999) displayCtrl 2215;
			
			_profession = [call _self.GetSelectedProfessionTypeFromCombo] call _mProfessionConfig.GetProfession;
			_vehicles = [side player, _profession.Type] call _mVehicleClassNamesConfig.GetProVehiclesClassNameInfo;

			// Disable ok button if profession is unavailable
			_selectedIndex = _this select 1;
			_thisData = lbData[DialogControl.GroupProfessionListBox, _selectedIndex];
			switch (_thisData) do {
				case "Enabled":
				{
					ctrlEnable[DialogControl.GroupProfessionOKButton, true];
				};
				case "Disabled":
				{
					ctrlEnable[DialogControl.GroupProfessionOKButton, true];
				};
			};


			// Vehicle Type:
			// Weapons in trunk:
			_vehicleNames = "N/A";
			_weaponNames = "N/A";
 			if (!isNull _vehicles) then {

 				if (count _vehicles.ClassNames > 0) then {
					_className = _vehicles.ClassNames select 0;
					_ctrlVehiclePicture ctrlSetText (getText(configFile >> "cfgVehicles" >> _className >> "editorPreview"));
					_ctrlVehiclePicture ctrlShow true;
					
					_vehicleNames = (getText(configFile >> "cfgVehicles" >> _className >> "displayName"));
					
				};

 				if (count _vehicles.ClassNames > 1) then {
					_vehicleNames = _vehicleNames + " (or similar)"
				};
				
				
				if (count _vehicles.CargoItems > 0) then {
					_className = (_vehicles.CargoItems select 0 as VehicleCargoItemInfo).ClassName;
					_weaponNames = (getText(configFile >> "cfgVehicles" >> _className >> "displayName"));
				};
				
			} else {
				_ctrlVehiclePicture ctrlSetText "";
				_ctrlVehiclePicture ctrlShow false;
			};


			// Required technology: 
 			_technology = [_profession.RequiredTechnology] call _mTechnologyConfig.GetTechnology;
			private _requiredResearch = "N/A";
			if (!isNull _technology && { _technology.Technology != Technology.None } ) then {
				_requiredResearch = _technology.Name + "  (at " + str _technology.RequiredResearch + ")";
			};


			// Vehicle production cost: 
			private _cost = "N/A";
 			_vehicleInfo = [_profession.Type] call _mVehiclesConfig.GetVehicle;
			if (!isNull _vehicleInfo) then {
				_cost = str _vehicleInfo.Cost;
			};


			// Squad size: 
			_squadSize = "N/A";
			if (_profession.MinGroupSize == _profession.MaxGroupSize || _profession.MinGroupSize > _profession.MaxGroupSize) then {
				_squadSize = str _profession.MinGroupSize;
			} else {
				_squadSize = str _profession.MinGroupSize + "-" + str _profession.MaxGroupSize;
			};


			// Maximum number of squads
			_maxGroupsCount = "N/A";
			if (_profession.MaxGroupsCount > 0) then {
				_maxGroupsCount = str _profession.MaxGroupsCount;
			};
			
			// Number of squads in brigade
			_squadsInBrigade = "0";
			if (call PublicVariableHandler.SquadCollectionHasValue) then {
				private [
					"_squadCollection" as SquadCollection,
					"_allSquadsInBrigade" as Scalar,
					"_squadsWithProfession" as Scalar,
					"_squadsUndefined" as Scalar,
					"_squadsInBrigadeScalar" as Scalar
				];
				
				_squadCollection = call PublicVariableHandler.GetSquadCollection;
				_squadsInBrigadeScalar = [playerSide, _profession.Type] call _squadCollection.CountByProfessionType;
				
				if (_profession.Type == ProfessionType.Infantry) then {
					_allSquadsInBrigade = {side _x == playerSide && (count units _x) > 0 } count allGroups;
					_squadsWithProfession = count _squadCollection.Squads;
					_squadsUndefined = _allSquadsInBrigade - _squadsWithProfession;
					_squadsInBrigadeScalar = _squadsInBrigadeScalar + _squadsUndefined;
				};
				
				_squadsInBrigade = str _squadsInBrigadeScalar;
			};

 			private _description = [
				"<t size='2.2' underline='false'>" + _profession.Name + "</t>",
				"",
				"Required administration: " + _requiredResearch,
				"Required player rank: " + ([_profession.RequiredRank] call RankMeta.GetRankText),
				"Vehicle type: " + _vehicleNames,
				"Vehicle production cost: " + _cost,
				"Weapons in cargo: " + _weaponNames,
				"Squad size limits: " + _squadSize,
				"Number of squads: " + _squadsInBrigade,
				"Maximum number of squads: " + _maxGroupsCount
			];
			_ctrlDescription ctrlSetStructuredText parseText (_description joinString "<br/>");
			
			call _self.UpdateListBoxItemsColor;
		};
		
		// Sends the group's selected profession to the server.
		// Called by the .hpp-dialog when the OK button is pressed.
		public static method OnOkButtonPressed()
		{
			ProfessionDialog.SelectedProfession = call _self.GetSelectedProfessionTypeFromCombo;
			["SquadHandlerReciever.SetSquadProfession", [group player, ProfessionDialog.SelectedProfession]] call Remote.Invoke;
		};		
		
		// Called by the .hpp-dialog when the Cancel button is pressed.
		public static method OnCancelButtonPressed()
		{
			call _self.CloseDialog;
		};		
	};
};
