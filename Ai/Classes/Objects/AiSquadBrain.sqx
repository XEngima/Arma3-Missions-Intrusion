/*
 * Name:	AiSquadBrain
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models the brain of the squad leader that takes all decisions of the team.
 */

using Intrusion.Common;
using Sqx.Collections;

namespace Intrusion.Ai
{
	public class AiSquadBrain
	{
		private fields ["_mKnowledge" as IKnowledge, "_mWorld" as IWorld, "_mActionPerformer" as IActionPerformer, "_mRandomGenerator" as IRandomGenerator,
						"_mMapMarkerInfo" as MapMarkerInfo, "_mMarkerHandler" as IMarkerHandler];
	
		// Creates a AiSquadBrain object.
		public constructor
		(
			"_group" as Group, 
			"_world" as IWorld, 
			"_actionPerformer" as IActionPerformer, 
			"_randomGenerator" as IRandomGenerator,
			"_mapMarkerInfo" as MapMarkerInfo,
			"_markerHandler" as IMarkerHandler,
			["_knowledge" as IKnowledge, classNull])
		{
			_mWorld = _world;
			_mActionPerformer = _actionPerformer;
			_mRandomGenerator = _randomGenerator;
			_mMapMarkerInfo = _mapMarkerInfo;
			_mMarkerHandler = _markerHandler;
			
			if (!isNull _knowledge) then {
				_mKnowledge = _knowledge;
				
				_mKnowledge.Group = _group;
				_mKnowledge.Members = units _group;
			}
			else {
				_mKnowledge = [_group] new Knowledge;
			};
		};
		
		// Creates a new order on own initiative.
		private method CreateOrderOnOwnInitiative()
		{
			private ["_resourceLocationCollection" as ResourceLocationCollection, "_location" as ResourceLocation, "_locations" as Array /* of ResourceLocation */, "_valuedLocations" as Array /* of ValuedObject */];
			private ["_count" as Scalar, "_index" as Scalar];
			
			// Find the three enemy (or neutral) resource locations closest to the base and select a random one of them.

			_resourceLocationCollection = call _mWorld.GetResourceLocationCollection;
			
			_locations = call _resourceLocationCollection.GetResourceLocations;
			_count = 0;
			_valuedLocations = [];
			
			{
				_location = _x;
				
				if (_location.Side != side _mKnowledge.Group) then {
					_valuedLocations pushBack [_location, ([_location.MarkerName] call _mMarkerHandler.GetMarkerPos) distance ([_mMapMarkerInfo.BaseMarkerName] call _mMarkerHandler.GetMarkerPos)] new ValuedObject;
					_count = _count + 1;
				};
			} foreach _locations as ResourceLocation;
			
			_valuedLocations = [_valuedLocations] call Sorter.QSort;
			
			if (_count > 3) then {
				_count = 3;
			};
			
			if (_count > 0) then {
				_index = floor ([_count] call _mRandomGenerator.GetNumber);
				_location = ((_valuedLocations select _index) as ValuedObject).Object as ResourceLocation;
				
				_mKnowledge.Order = [_mKnowledge.Group, OrderType.Attack, [_location.MarkerName] call _mMarkerHandler.GetMarkerPos, _location] new Order;
			};
		};
		
		private method MakeDecision()
		{
			private ["_moveAction" as MoveAction];
		
			_mKnowledge.State = AiSquadState.Moving;
			_moveAction = [[0, 0, 0]] new MoveAction;
			[_moveAction] call _mActionPerformer.DoMove;
		};
		
		// Gives the AI brain an opportunity to make a new decision.
		public method Act()
		{
			// If there is no order, create one on own initiative so the group has something to do.
			
			if (isNull _mKnowledge.Order) then {
				call _self.CreateOrderOnOwnInitiative;
			};
			
			// If the squad is doing something, check if it has completed doing it.
			
			if (_mKnowledge.State != AiSquadState.Idle) then {
				if (call _mActionPerformer.GetHasCompleted) then {
					_mKnowledge.State = AiSquadState.Idle;
				};
			};
			
			// If the squad is not doing anything, make a new decision.
			
			if (_mKnowledge.State == AiSquadState.Idle) then {
				call _self.MakeDecision;
			};
		};
	};
};
