/*
 * Name:	TaskHandler
 * Date:	2019-02-18
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A class that converts orders to tasks and keeps all logic about them.
 */

using Intrusion.Common;

namespace Intrusion.Client
{
	public class TaskHandler
	{
		private fields ["_mCurrentTaskId" as Scalar];
		
		// Creates a TaskHandler object.
		public constructor {
			_mCurrentTaskId = 0;
		};
		
		// Sets a new order.
		// _order (Order): The new order.
		public method CreateTaskFromOrder("_order" as Order)
		{
			private ["_taskId" as String, "_description" as Array, "_orderCollection" as OrderCollection];
			
			// First cancel the current task
			if (_mCurrentTaskId > 0) then {
				_taskId = "IntrusionPlayerTask_" + str _mCurrentTaskId;
				[_taskId, "SUCCEEDED", true] call BIS_fnc_taskSetState;
			};
			
			// Create the new task
			_mCurrentTaskId = _mCurrentTaskId + 1;
			_taskId = "IntrusionPlayerTask_" + str _mCurrentTaskId;
			
			_description = ["Undefined task in Client/Handlers/TakeOrderHandler.sqx.", "Undefined task", ""];
			
			switch (_order.Type) do {
				case OrderType.Recon: { _description = ["Recon area!", "Recon area", ""]; };
				case OrderType.Attack: { _description = ["Attack position!", "Attack position", ""]; };
				case OrderType.Defend: { _description = ["Defend position!", "Defend position", ""]; };
			};
			
			[player, _taskId, _description, _order.TargetPosition, "CREATED", _mCurrentTaskId, true, "", false] call BIS_fnc_taskCreate;
			
			// Broadcast the order
			if (player == leader _order.Group) then {
				_orderCollection = call PublicVariableHandler.GetOrderCollection;
				[_order] call _orderCollection.AddOrder;
				[_orderCollection] call PublicVariableHandler.BroadcastOrderCollection;
			};
		};
		
		// Updates the player's task with the last broadcasted order.
		public method UpdateWithGroupTask()
		{
			private ["_orderCollection" as OrderCollection, "_order" as Order];
			
			_orderCollection = call PublicVariableHandler.GetOrderCollection;
			
			_order = [group player] call _orderCollection.GetOrderByGroup;
			
			[_order] call _self.CreateTaskFromOrder;
		};
		
		// Resets the task handler and removes all tasks.
		public method DeleteAllTasksAndReset()
		{
			private ["_taskId" as String];
		
			for "_i" from 0 to _mCurrentTaskId do {
				_taskId = "IntrusionPlayerTask_" + str _i;
				[_taskId, player] call BIS_fnc_deleteTask;
			};
			
			_mCurrentTaskId = 0;
		};
	};
};
