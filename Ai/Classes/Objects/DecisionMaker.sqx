/*
 * Name:	DecisionMaker
 * Date:	2019-07-23
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models the frontal lobe of the brain that is the centre for decision making.
 * This class is inherited by different squad brains with different perspective, like motorized, sharpshooter, air and naval.
 */

using Intrusion.Common;

namespace Intrusion.Ai
{
	public class DecisionMaker : IDecisionMaker
	{
		public constructor("_time" as IMissionTime, "_knowledge" as Knowledge, "_actionServiceFactory" as IActionServiceFactory, "_world" as IWorld, "_actionPerformer" as IActionPerformer, "_markerHandler" as IMarkerHandler, "_actionTimeoutConfig" as IActionTimeoutConfig)
		{
			_self.Time = _time;
			_self.Knowledge = _knowledge;
			_self.ActionServiceFactory = _actionServiceFactory;
			_self.World = _world;
			_self.ActionPerformer = _actionPerformer;
			_self.MarkerHandler = _markerHandler;
			_self.ActionTimeoutConfig = _actionTimeoutConfig;
		};
		
		protected property IMissionTime Time { get; private set; };
		protected property Knowledge Knowledge { get; private set; };
		protected property IActionServiceFactory ActionServiceFactory { get; private set; };
		protected property IWorld World { get; private set; };
		protected property IActionPerformer ActionPerformer { get; private set; };
		protected property IMarkerHandler MarkerHandler { get; private set; };
		protected property IActionTimeoutConfig ActionTimeoutConfig { get; private set; };
	
		protected method SetState("_state" as AiSquadState, "_action" as IAction) 
		{
			_self.Knowledge.State = _state;
			
			if (_state == AiSquadState.Idle) then {
				_self.Knowledge.CurrentAction = classNull;
			}
			else {
				_self.Knowledge.CurrentAction = _action;
			};
			
			player sideChat "Setting status for " + str _self.Knowledge.Group + " (" + str (count units _self.Knowledge.Group) + "): " + ([_state] call AiSquadStateMeta.ToString);
		};
	
		public virtual method OnTargetResourceLocationCaptured()
		{
		};
		
		// Called when enemies on the ground are spotted near.
		// _enemyUnitContainer (IUnitContainer): The closest enemy unit.
		// _mountedVehicleContainer (VehicleContainer): The vehicle that the (subject) AI squad is mounted to. classNull if not mounted.
		public virtual method IAction OnNearEnemiesOnGroundSpotted("_enemyContainer" as IUnitContainer, "_mountedVehicleContainer" as VehicleContainer)
		{
			private ["_action" as IAction];
			
			_action = [(call _self.Time.GetMissionTime) + 20, (call _enemyContainer.GetPosition)] new EngageAction;
			[AiSquadState.Engaging, _action] call _self.SetState;
        	["Engage action created: " + str _action] call LogHandler.Debug;
        	
        	return _action;
		};
		
		// Called when the group is closing in on a destination (not necessary a location).
		public virtual method IAction OnClosingInOnDestination()
		{
			private _action = classNull;
			private _squadInVehicle = [_self.Knowledge.Group] call _self.World.CheckSquadMounted;
			private _time = call _self.Time.GetMissionTime;
			
			if (_squadInVehicle) then
			{
				private _aiVehicle = [_self.Knowledge.Group] call _self.World.GetMountedVehicle;
				private _actionService = [_self.Time, _time + 20, _self.World, _self.ActionPerformer, _self.Knowledge.Group, _aiVehicle] call _self.ActionServiceFactory.CreateDisembarkService as IActionService;
				call _actionService.RunAsync;
				
				_action = [_time + 20, _aiVehicle, _actionService as DisembarkActionService] new DisembarkAction;
				[AiSquadState.Disembarking, _action] call _self.SetState;
	        	["Disembark action created: " + str _action] call LogHandler.Debug;
			};
			
			return _action;
		};
		
		public virtual method IAction OnPresentAtLocation("_location" as ResourceLocation)
		{
			private _side = side _self.Knowledge.Group;
			private _action = objNull as IAction;
			
			if (_location.Side != _side) then
			{
				private _time = call _self.Time.GetMissionTime;
				private _pos = [_location.MarkerName] call _self.MarkerHandler.GetMarkerPos;
				
				private _action = [_time + _self.ActionTimeoutConfig.CaptureActionTimeout, _pos, _location.MarkerName] new CaptureAction;
				[AiSquadState.Capturing, _action] call _self.SetState;
				[_self.Knowledge.CurrentAction as CaptureAction] call _self.ActionPerformer.DoCapture;
	        	["Capture action created: " + str _action] call LogHandler.Debug;
			};
			
			return _action;
		};
		
		public virtual method IAction OnWithinWalkingDistanceFromTargetLocation("_location" as ResourceLocation)
		{
			private _time = call _self.Time.GetMissionTime;
			
			private _action = [_time + _self.ActionTimeoutConfig.MoveActionTimeout, _self.Knowledge.Order.TargetPosition, _location.MarkerName] new MoveAction;
			[AiSquadState.Moving, _action] call _self.SetState;
			[_action as MoveAction] call _self.ActionPerformer.DoMove;
        	["Move action created #1: " + str _action] call LogHandler.Debug;
        	
        	return _action;
		};
		
		public virtual method IAction OnBesideEmptyFreeVehicle("_aiVehicle" as VehicleContainer)
		{
			private _squadInVehicle = [_self.Knowledge.Group] call _self.World.CheckSquadMounted;
			private _action = classNull as IAction;

			if (!_squadInVehicle) then
			{
				private _side = side _self.Knowledge.Group;
				private _leaderPos = [_self.Knowledge.Group] call _self.World.GetLeaderPos;
				private _time = call _self.Time.GetMissionTime;
			
				_aiVehicle = [_side, _leaderPos, count _self.Knowledge.Members] call _self.World.GetClosestEmptyFreeVehicle;
				
				if (!isNull _aiVehicle && { _aiVehicle.Position distance _leaderPos <= 20 }) then
				{
					_action = [_time + 20, _aiVehicle] new MountAction;
					[AiSquadState.MountingVehicle, _action] call _self.SetState;
					[_action as MountAction] call _self.ActionPerformer.DoMount;
		        	["Mount action created: " + str _action] call LogHandler.Debug;
					breakOut "main";
				};
			};

			return _action;
		};
	};
};
