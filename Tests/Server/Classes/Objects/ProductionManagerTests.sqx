/*
 * Name:	ProductionManagerTests
 * Date:	2018-11-19
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Tests for the ProductionManager object.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Tests.Server
{
	public class ProductionManagerTests
	{
		#region Fields
		
		private static fields [
			"_mProfessionVehiclesConfig" as TestProfessionVehiclesConfig,
			"_mVehicleClassNamesConfig" as TestVehicleClassNamesConfig,
			"_mVehicleSpawner" as TestVehicleSpawner, 
			"_mReservationQueue" as ReservationQueue, 
			"_mGroup" as Group,
			"_mSquad" as Squad,
			"_mSquadHandler" as TestSquadHandler,
			"_mResourceBook" as ResourceBook,
			"_mOfficeWorker" as TestOfficeWorker,
			"_mMessageHandler" as TestMessageHandler,
			"_mProfessionConfig" as TestProfessionConfig,
			"_mProductionManager" as ProductionManager];
		
		#endregion
		
		// Creates a ReservationQueueTests object.
		public static method Init {
			["Intrusion.Tests.Server", "ProductionManagerTests", [
				"NoItemToProduce_Production_NoItemProduced",
				"ItemToProduce_GroupCanAfford_ItemProduced",
				"ItemToProduce_GroupCanNotAfford_ItemNotProduced",
				"TwoItemsToProduce_GroupsCanAffordOne_ItemProduced",
				"TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced",
				"NullGroupFirstInReservationQueue_ExistingGroupAdded_NullGroupRemoved",
				"NullGroupAloneInReservationQueue_PerformProduction_NullGroupRemoved",
				"EmptyReservationQueue_GroupChangingProfession_ReservationPutInQueue",
				"GroupAlreadyInReservationQueue_GroupChangingProfession_ReservationInQueueReplaced",
				"AnotherGroupAlreadyInReservationQueue_GroupChangingProfession_ReservationAddedLast",
				"GroupAndAnotherGroupInReservationQueue_GroupChangingProfession_ReservationReplacedAndLast",
				"EmptyReservationQueue_GroupChangingToProfessionWithoutVehicle_NoReservationCreated",
				"GroupAlreadyInReservationQueue_GroupChangingProfession_ProductionDeposited",
				"OneGroupTwoItemsToProduce_GroupsCanAffordOne_OneItemProduced",
				"OneGroupTwoItemsToProduce_GroupsCanAffordTwo_OneItemProduced",
				"ItemToProduce_GroupCanAffordButTechNotEstablished_ItemNotProduced",
				"TwoReservationsInQueue_TechNotEstablishedForFirst_ReservationMovedLast",
				"TwoReservationsInQueue_SecondIsSupport_SupportMovedFirst",
				"TwoSupportReservationsInQueue_Prioritized_NoChangeInPrio",
				"TwoReservationsInQueue_SecondIsPlayer_PlayerMovedFirst",
				"TwoPlayerReservationsInQueue_Prioritized_NoChangeInPrio",
				"TwoReservationsInQueue_FirstPlayerSecondAiSupport_SupportPrioritized"
			]] call TestEngine.Register;
			
			//["TwoReservationsInQueue_SecondIsPlayer_PlayerMovedFirst"] call TestEngine.OnlyThisOne;
		};
		
		// Creates a production manager and a group.
		private static method BeforeEach {
			_mProfessionVehiclesConfig = new TestProfessionVehiclesConfig;
			_mVehicleClassNamesConfig = new TestVehicleClassNamesConfig;
			_mVehicleSpawner = new TestVehicleSpawner;
			_mReservationQueue = new ReservationQueue;
			_mSquadHandler = new TestSquadHandler;
			_mResourceBook = new ResourceBook;
			_mOfficeWorker = new TestOfficeWorker;
			_mMessageHandler = new TestMessageHandler;
			_mProfessionConfig = new TestProfessionConfig;
			[Professiontype.Armored, "Armored Forces", Technology.HeavyArmor, Rank.Lieutenant, 1, 1, 9, 3, false, true, "", ""] call _mProfessionConfig.AddProfession;
			
			_mGroup = [1] call TestActions.CreatePopulatedGroup;
			_mSquad = [_mGroup, ProfessionType.Armored] new Squad;
			[_mSquad] call _mSquadHandler.SetSquadToReturn;
			
			_mProductionManager = [_mProfessionVehiclesConfig, _mVehicleClassNamesConfig, west, _mVehicleSpawner, _mResourceBook, _mSquadHandler, _mOfficeWorker, _mMessageHandler, _mProfessionConfig, _mReservationQueue] new ProductionManager;
		};
		
		private static method AfterEach {
			[_mGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method NoItemToProduce_Production_NoItemProduced
		{
			// Arrange
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but no reservation exists."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanAfford_ItemProduced
		{
			private ["_reservation" as Reservation];

			// Arrange
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 1000] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			[1000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			["TANK", _mVehicleSpawner.SpawnedVehicles select 0, "Wrong vehicle spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "Reservation is still active."] call Assert.AreEqual;
			[0, _mResourceBook.TotalProduction, "No production should be left."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanNotAfford_ItemNotProduced
		{
			private ["_reservation" as Reservation];
		
			// Arrange
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 1000] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			[100] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but group cannot afford."] call Assert.AreEqual;
			[1, call _mReservationQueue.Count, "Reservation is removed."] call Assert.AreEqual;
			[100, _mResourceBook.TotalProduction, "Production should not be lost."] call Assert.AreEqual;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordOne_ItemProduced
		{
			private ["_reservation" as Reservation, "_group2" as Group, "_squad2" as Squad];
		
			// Arrange
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 600] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation = [_group2, ProfessionType.Armored, false, "TANK", 600] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			_squad2 = [_group2, ProfessionType.Armored] new Squad;
			[_squad2] call _mSquadHandler.SetSquadToReturn;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[1, call _mReservationQueue.Count, "Reservation is still active."] call Assert.AreEqual;
			[400, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoItemsToProduce_GroupsCanAffordTwo_ItemsProduced
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_squad2" as Squad];
		
			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, false, "TANK", 400] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Armored, false, "TANK", 400] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			_squad2 = [_group2, ProfessionType.Armored] new Squad;
			[_squad2] call _mSquadHandler.SetSquadToReturn;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "Reservation is still active."] call Assert.AreEqual;
			[200, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
			
			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method EmptyReservationQueue_GroupChangingProfession_ReservationPutInQueue
		{
			// Arrange
			[west, ProfessionType.Fuel, ["FUEL_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1, call _mReservationQueue.Count, "There should be an reservation."] call Assert.AreEqual;
			["FUEL_TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _mReservationQueue.CurrentReservation.Group, "The reservation was not assigned to the correct group."] call Assert.AreEqual;
		};
		
		private static method GroupAlreadyInReservationQueue_GroupChangingProfession_ReservationInQueueReplaced
		{
			private ["_reservation" as Reservation];
			
			// Arrange
			_reservation = [_mGroup, ProfessionType.Mechanized, false, "CAR", 400] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			[west, ProfessionType.Fuel, ["FUEL_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["FUEL_TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _mReservationQueue.CurrentReservation.Group, "The reservation was not assigned to the correct group."] call Assert.AreEqual;
		};
		
		private static method AnotherGroupAlreadyInReservationQueue_GroupChangingProfession_ReservationAddedLast
		{
			private ["_anotherGroup" as Group, "_reservation" as Reservation];
		
			// Arrange
			_anotherGroup = [1] call TestActions.CreatePopulatedGroup;
			_reservation = [_anotherGroup, ProfessionType.Fuel, false, "FUEL_TRUCK", 400] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			[west, ProfessionType.Fuel, ["FUEL_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["FUEL_TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_anotherGroup, _mReservationQueue.CurrentReservation.Group, "The existing reservation was changed."] call Assert.AreEqual;
			
			// Cleanup
			[_anotherGroup] call TestActions.DeletePopulatedGroup;
		};
		
		private static method NullGroupFirstInReservationQueue_ExistingGroupAdded_NullGroupRemoved
		{
			private ["_nullGroup" as Group, "_reservation1" as Reservation, "_reservation2" as Reservation];
		
			// Arrange
			[west, ProfessionType.Repair, ["REPAIR_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;
			
			_nullGroup = grpNull;
			_reservation1 = [_nullGroup, ProfessionType.Repair, false, "REPAIR_TRUCK", 150] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;

			_reservation2 = [_mGroup, ProfessionType.Armored, false, "TANK", 800] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[3000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			
			private _spawnedVehicle = _mVehicleSpawner.SpawnedVehicles select 0;
			
			["TANK", _spawnedVehicle, "Wrong vehicle spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "All reservations should be gone."] call Assert.AreEqual;
			[2200, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
		};
		
		private static method NullGroupAloneInReservationQueue_PerformProduction_NullGroupRemoved
		{
			private ["_nullGroup" as Group, "_reservation" as Reservation];
		
			// Arrange
			[west, ProfessionType.Repair, ["REPAIR_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;
			
			_nullGroup = grpNull;
			_reservation = [_nullGroup, ProfessionType.Repair, false, "REPAIR_TRUCK", 150] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;

			[3000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "All reservations should be gone."] call Assert.AreEqual;
			[3000, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
		};
		
		private static method GroupAndAnotherGroupInReservationQueue_GroupChangingProfession_ReservationReplacedAndLast
		{
			private ["_group1" as Group, "_reservation1" as Reservation, "_reservation2" as Reservation, "_reservation" as Reservation, "_reservations" as Array];
		
			// Arrange
			_group1 = [1] call TestActions.CreatePopulatedGroup;
			_reservation1 = [_group1, ProfessionType.Motorized, false, "BUS", 600] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_reservation2 = [_mGroup, ProfessionType.Motorized, false, "CAR", 400] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;

			[west, ProfessionType.Fuel, ["FUEL_TRUCK"]] call _mVehicleClassNamesConfig.AddVehicleClassName;

			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["BUS", _mReservationQueue.CurrentReservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_group1, _mReservationQueue.CurrentReservation.Group, "The existing reservation was changed."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 1;
			["FUEL_TRUCK", _reservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;
			[_mGroup, _reservation.Group, "The existing reservation was changed."] call Assert.AreEqual;

			// Cleanup
			[_group1] call TestActions.DeletePopulatedGroup;
		};
		
		private static method EmptyReservationQueue_GroupChangingToProfessionWithoutVehicle_NoReservationCreated
		{
			// Arrange
			
			// Act
			[_mGroup, ProfessionType.Infantry] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[0, call _mReservationQueue.Count, "There should be no reservation."] call Assert.AreEqual;
		};
		
		private static method GroupAlreadyInReservationQueue_GroupChangingProfession_ProductionDeposited
		{
			// Arrange
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			[_mGroup, ProfessionType.Fuel] call _mProductionManager.OnGroupChangingProfession;
			
			// Assert
			[1100, _mResourceBook.TotalProduction, "Returned profession vehicle did not return production."] call Assert.AreEqual;
		};
		
		private static method OneGroupTwoItemsToProduce_GroupsCanAffordOne_OneItemProduced
		{
			private ["_reservation" as Reservation];
		
			// Arrange
			_mGroup = [4] call TestActions.CreatePopulatedGroup; // An armored group can have a maximum of 3 units in a vehicle
			_mSquad = [_mGroup, ProfessionType.Armored] new Squad;
			[_mSquad] call _mSquadHandler.SetSquadToReturn;
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 600] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			
			[1000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "Reservation should still be active."] call Assert.AreEqual;
			[400, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
		};
		
		private static method OneGroupTwoItemsToProduce_GroupsCanAffordTwo_OneItemProduced
		{
			private ["_reservation" as Reservation];
		
			// Arrange
			_mGroup = [4] call TestActions.CreatePopulatedGroup; // An armored group can have a maximum of 3 units in a vehicle
			_mSquad = [_mGroup, ProfessionType.Armored] new Squad;
			[_mSquad] call _mSquadHandler.SetSquadToReturn;
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 500] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			
			[1000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[1, count _mVehicleSpawner.SpawnedVehicles, "Wrong number of vehicles spawned."] call Assert.AreEqual;
			[0, call _mReservationQueue.Count, "Reservation still active."] call Assert.AreEqual;
			[500, _mResourceBook.TotalProduction, "Production left is miscalculated."] call Assert.AreEqual;
		};
		
		private static method ItemToProduce_GroupCanAffordButTechNotEstablished_ItemNotProduced
		{
			private ["_reservation" as Reservation];

			// Arrange
			_reservation = [_mGroup, ProfessionType.Armored, false, "TANK", 1000] new Reservation;
			[_reservation] call _mReservationQueue.PutReservation;
			[1000] call _mResourceBook.DepositProduction;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[0, count _mVehicleSpawner.SpawnedVehicles, "Vehicles spawned but tech not established."] call Assert.AreEqual;
		};
		
		private static method TwoReservationsInQueue_TechNotEstablishedForFirst_ReservationMovedLast
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, false, "TANK", 800] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Mechanized, false, "MECH", 500] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[1000] call _mResourceBook.DepositProduction;
			[Technology.LightArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["MECH", _mReservationQueue.CurrentReservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 1;
			["TANK", _reservation.VehicleClassName, "Wrong vehicle in queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoReservationsInQueue_SecondIsSupport_SupportMovedFirst
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, false, "TANK", 800] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Fuel, false, "FUEL_TRUCK", 50] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[800] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["FUEL_TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Support vehicle not set as current in production queue."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["FUEL_TRUCK", _reservation.VehicleClassName, "Wrong vehicle first in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoSupportReservationsInQueue_Prioritized_NoChangeInPrio
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Repair, false, "REPAIR_TRUCK", 50] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Fuel, false, "FUEL_TRUCK", 50] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[25] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["REPAIR_TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Support reservation lost prio."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["REPAIR_TRUCK", _reservation.VehicleClassName, "Wrong vehicle first in production queue."] call Assert.AreEqual;
			
			_reservation = _reservations select 1;
			["FUEL_TRUCK", _reservation.VehicleClassName, "Wrong vehicle last in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoReservationsInQueue_SecondIsPlayer_PlayerMovedFirst
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, false, "TANK", 800] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Motorized, true, "CAR", 800] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[500] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["CAR", _mReservationQueue.CurrentReservation.VehicleClassName, "Player vehicle not set as current in production queue."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["CAR", _reservation.VehicleClassName, "AI (not player) vehicle first in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoPlayerReservationsInQueue_Prioritized_NoChangeInPrio
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, true, "TANK", 800] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Motorized, true, "CAR", 50] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[25] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["TANK", _mReservationQueue.CurrentReservation.VehicleClassName, "Support reservation lost prio."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["TANK", _reservation.VehicleClassName, "Wrong vehicle first in production queue."] call Assert.AreEqual;
			
			_reservation = _reservations select 1;
			["CAR", _reservation.VehicleClassName, "Wrong vehicle last in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoReservationsInQueue_FirstAiSupportSecondIsPlayer_PlayerMovedFirst
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Ammo, false, "AMMO_TRUCK", 50] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Motorized, true, "CAR", 500] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[450] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["CAR", _mReservationQueue.CurrentReservation.VehicleClassName, "Player vehicle not set as current in production queue."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["CAR", _reservation.VehicleClassName, "AI (not player) vehicle first in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
		
		private static method TwoReservationsInQueue_FirstPlayerSecondAiSupport_SupportPrioritized
		{
			private ["_reservation1" as Reservation, "_reservation2" as Reservation, "_group2" as Group, "_reservations" as Array, "_reservation" as Reservation];

			// Arrange
			_reservation1 = [_mGroup, ProfessionType.Armored, true, "TANK", 800] new Reservation;
			[_reservation1] call _mReservationQueue.PutReservation;
			
			_group2 = [1] call TestActions.CreatePopulatedGroup;
			_reservation2 = [_group2, ProfessionType.Transport, false, "TRUCK", 50] new Reservation;
			[_reservation2] call _mReservationQueue.PutReservation;
			
			[1000] call _mResourceBook.DepositProduction;
			[Technology.HeavyArmor] call _mOfficeWorker.AddEstablishedTechnology;
			
			// Act
			call _mProductionManager.PerformProduction;
			
			// Assert
			[2, call _mReservationQueue.Count, "Wrong number of reservations in the queue."] call Assert.AreEqual;
			["TRUCK", _mReservationQueue.CurrentReservation.VehicleClassName, "Support reservation not prioritized."] call Assert.AreEqual;

			_reservations = call _mReservationQueue.GetReservations;
			_reservation = _reservations select 0;
			["TRUCK", _reservation.VehicleClassName, "Wrong vehicle first in production queue."] call Assert.AreEqual;
			
			_reservation = _reservations select 1;
			["TANK", _reservation.VehicleClassName, "Wrong vehicle last in production queue."] call Assert.AreEqual;

			// Cleanup
			[_group2] call TestActions.DeletePopulatedGroup;
		};
	};
};
