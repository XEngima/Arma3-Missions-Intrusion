/*
 * Name:    GroupActionHandler
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles everything about grouping action for the current client.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Client
{
	public class GroupActionHandler
	{
        // Adds 'Invite player to group' actions to every single member group leader.
        public static method UpdateAllInvitePlayerActions {
        	private ["_playableUnits" as Array];
        	["GroupActionHandler.UpdateAllInvitePlayerActions"] call LogHandler.Debug;
        	
        	_playableUnits = [switchableUnits, playableUnits] select isMultiplayer;
        	
            {
            	// If the player is not the unit itself
            	if (_x != player) then {
	            	removeAllActions _x;

	            	// If the players' side are the same
	            	if (side group _x == side group player) then {
	            	
		            	// If the player is not already in a group
		            	if (count units group _x == 1) then {
			            	_x addAction ["Invite player to group", { [_this select 0] call _self.InviteOtherPlayerToGroup; }];
		            	};
	            	};
	            };
            } foreach _playableUnits;
            
            call IntrusionMenuHandler.UpdateVisibleOptions;
		};
		
		// Invites another player to the local player's group.
		private static method InviteOtherPlayerToGroup("_otherPlayer" as Object)
		{
			private ["_previousGroup" as Group];
			[str _this + "GroupActionHandler.InviteOtherPlayerToGroup"] call LogHandler.Debug;
			
			// Add the other player to the local player's group
			_previousGroup = group _otherPlayer;
			[_otherPlayer] join player;
			
			["ClientEventReciever.OnPlayerJoinedGroup", [_otherPlayer, _previousGroup, group player]] call Remote.Invoke;
			["ServerEventReciever.OnPlayerJoinedGroup", [_otherPlayer, _previousGroup, group player]] call Remote.Invoke;
		};
		
		// Called when any player leaves a group.
		public static method OnPlayerLeavingGroup {
			call _self.UpdateAllInvitePlayerActions;
		};
	};
};
