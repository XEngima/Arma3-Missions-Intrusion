/*
 * Name:	InfantryDecisionMaker
 * Date:	2019-06-16
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Models the frontal lobe of the brain that is the centre for decision making.
 * This class is inherited by different squad brains with different perspective, like motorized, sharpshooter, air and naval.
 */

using Intrusion.Common;

namespace Intrusion.Ai
{
	public class InfantryDecisionMaker : DecisionMaker
	{
		public constructor("_time" as IMissionTime, "_knowledge" as Knowledge, "_actionServiceFactory" as IActionServiceFactory, "_world" as IWorld, "_actionPerformer" as IActionPerformer, "_markerHandler" as IMarkerHandler, "_actionTimeoutConfig" as IActionTimeoutConfig)
		{
			[_time, _knowledge, _actionServiceFactory, _world, _actionPerformer, _markerHandler, _actionTimeoutConfig] call _base.Constructor;
		};
	
		public override method OnTargetResourceLocationCaptured()
		{
		};
		
		// Called when enemies on the ground are spotted near.
		// _enemyUnitContainer (IUnitContainer): The closest enemy unit.
		// _mountedVehicleContainer (VehicleContainer): The vehicle that the (subject) AI squad is mounted to. classNull if not mounted.
		public override method OnNearEnemiesOnGroundSpotted("_enemyContainer" as IUnitContainer, "_mountedVehicleContainer" as VehicleContainer)
		{
			private ["_actionService" as IActionService, "_time" as Scalar];
			
			if (isNull _mountedVehicleContainer) then
			{
				[_enemyContainer, _mountedVehicleContainer] call _base.OnNearEnemiesOnGroundSpotted;
	        }
	        else {
	        	_time = call _self.Time.GetMissionTime;
	        	
				_actionService = [_self.Time, _time + 20, _self.World, _self.ActionPerformer, _self.Knowledge.Group, _mountedVehicleContainer] call _self.ActionServiceFactory.CreateDisembarkService;
				call _actionService.RunAsync;
				
				private _action = [_time + 20, _mountedVehicleContainer, _actionService as DisembarkActionService] new DisembarkAction;
				
				[AiSquadState.Disembarking, _action] call _self.SetState;
	        	["Disembark action #2 created: " + str _action] call LogHandler.Debug;
	        };
		};
	};
};
