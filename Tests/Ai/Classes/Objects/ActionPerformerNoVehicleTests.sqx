/*
 * Name:	ActionPerformerNoVehicleTests
 * Date:	2019-05-17
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Test class for AiBrain, that tests basic squad behaviour for infantry squads.
 */

using Sqx.UnitTest;
using Intrusion.Tests.Helpers;
using Intrusion.Ai;
using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Tests.Ai
{
	public class ActionPerformerNoVehicleTests
	{
		#region Fields
		
		private static fields [
			"_mGroup" as Group,
			"_mWorld" as TestWorld,
			"_mMarkerHandler" as TestMarkerHandler,
			"_mActionPerformer" as TestActionPerformer,
			"_mBrain" as AiSquadBrain,
			"_mKnowledge" as Knowledge,
			"_mRandomGenerator" as TestRandomGenerator,
			"_mLocationFactory1" as ResourceLocation,
			"_mLocationOffice1" as ResourceLocation,
			"_mLocationFactory2" as ResourceLocation,
			"_mLocationOffice2" as ResourceLocation,
			"_mResourceLocationCollection" as ResourceLocationCollection,
			"_mTime" as TestMissionTime,
			"_mActionService" as TestActionService,
			"_mActionServiceFactory" as TestActionServiceFactory,
			"_mInventedTechnologiesCollection" as InventedTechnologiesCollection,
			"_mSquadHandler" as TestSquadHandler
		];
		
		#endregion

		// Registers all tests that should be run.
		public static method Init {
			["Intrusion.Tests.Ai", "ActionPerformerNoVehicleTests", [
				"StateIdleAndNoOrder_Act_NotIdleAndHasOrder",
				"AtBaseAttackOrder_Act_StatusMove",
				"MovingToDestinationFarOff_Act_StatusMoving",
				"ArrivingAtDestination_Act_StatusIdle",
				"AtEnemyLocationIdle_Act_StatusCapturing",
				"AfterCapturingLocation_Act_StatusIdle",
				"AttackingLocationCapturedBeforeArrival_Act_StatusIdle",
				"OwnOrderToAttackOwnLocationNotPresentAndIdle_Act_NewOrderStatusIdle",
				"OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle",
				"OwnOrderToDefendOwnLocationAlreadyPresentAndIdle_Act_PatrolTheArea",
				"OwnOrderToDefendOwnLocationPatrolling_Act_ContinuePatrolTheArea",
				"SquadStationary_Act_TimeoutStatusIdle",
				"SquadTemporaryStationary_Act_NoTimeoutStatusMoving",
				"MovingButNeverArrives_Act_TimeoutStatusIdle",
				"MovingToDestinationFarOffDetectingNearEnemiesIdle_Act_StatusEngaging",
				"MovingToDestinationFarOffDetectingNearEnemiesMoving_Act_StatusIdle",
				"AllSquadMembersAreDeadMoving_Act_RespawnedAndStatusIdle",
				"SingleSquadMemberIsDead_Act_TakesAtLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_DoesNotTakeAtLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_TakesAaLauncherAtRespawn",
				"SingleSquadMemberIsDead_Act_DoesNotTakeAaLauncherAtRespawn",
				"OneOfTwoSquadMembersAreDead_Act_ReviveActionCreated",
				"OneOfTwoSquadMembersAreDeadMoving_Act_StatusIdle",
				"OneOfTwoSquadMembersAreDeadEngaging_Act_StillMoving",
				"BrigadeLeaderOrderToDefendOwnLocationIdleAtLocation_EncounterEnemies_StatusMovingPatrolStealth",
				"OrderToAttackPosition_PresentAndIdle_NewOrderStatusIdle",
				"OrderToDefendPosition_PresentAndIdle_NewOrderStatusPatrolling",
			]] call TestEngine.Register;
			
			//["AtEnemyLocationIdle_Act_StatusCapturing"] call TestEngine.OnlyThisOne;
		};
		
		private static method BeforeEach()
		{
			private ["_mapMarkerInfo" as MapMarkerInfo, "_decisionMaker" as DecisionMaker];

			_mResourceLocationCollection = new ResourceLocationCollection;
			_mActionService = new TestActionService;
			_mActionServiceFactory = [_mActionService] new TestActionServiceFactory;
			
			_mLocationFactory1 = ["FACTORY1", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice1 = ["OFFICE1", ResourceFacility.TechLab, objNull] new ResourceLocation;
			_mLocationFactory2 = ["FACTORY2", ResourceFacility.Factory, objNull] new ResourceLocation;
			_mLocationOffice2 = ["OFFICE2", ResourceFacility.TechLab, objNull] new ResourceLocation;
			
			[_mLocationFactory1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice1] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationFactory2] call _mResourceLocationCollection.AddResourceLocation;
			[_mLocationOffice2] call _mResourceLocationCollection.AddResourceLocation;
			
			_mMarkerHandler = new TestMarkerHandler;
			["respawn_marker", [0, 0, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY1", [200, 200, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE1", [400, 400, 0]] call _mMarkerHandler.AddMarkerPos;
			["FACTORY2", [600, 600, 0]] call _mMarkerHandler.AddMarkerPos;
			["OFFICE2", [800, 800, 0]] call _mMarkerHandler.AddMarkerPos;

			_mGroup = createGroup west;
			_mWorld = [_mResourceLocationCollection, new TestResourceLocationConfig, _mMarkerHandler] new TestWorld;
			_mActionPerformer = [_mWorld] new TestActionPerformer;
			_mRandomGenerator = [0] new TestRandomGenerator;
			_mKnowledge = [_mGroup, []] new Knowledge;
			_mTime = [0] new TestMissionTime;
			_mInventedTechnologiesCollection = new InventedTechnologiesCollection;
			private _testActionTimeoutConfig = new TestActionTimeoutConfig;
			private _professionConfig = new ProfessionConfig;
			_mSquadHandler = new TestSquadHandler;
			private _resourceLocationConfig = new TestResourceLocationConfig;
			
			_mapMarkerInfo = [west, "respawn_marker", "carpark_marker", "weapondepot_marker", "flag_texture", "marker_icon_type"] new MapMarkerInfo;
			_decisionMaker = [_mTime, _mKnowledge, _mActionServiceFactory, _mWorld, _mActionPerformer, _mMarkerHandler, _testActionTimeoutConfig, _resourceLocationConfig, _mRandomGenerator] new DecisionMaker;
			
			_mBrain = [
				_mGroup, 
				_mWorld, 
				_mActionPerformer, 
				_mRandomGenerator, 
				_mMarkerHandler, 
				_testActionTimeoutConfig,
				_mTime, 
				_mapMarkerInfo,
				new TestAiWeaponsConfig,
				_mInventedTechnologiesCollection,
				_mKnowledge,
				_decisionMaker,
				new BaseConfig,
				_professionConfig,
				_mSquadHandler,
				new TestGameLengthMonitor,
				_resourceLocationConfig
			] new AiSquadBrain;
		};
		
		private static method AfterEach()
		{
			deleteGroup _mGroup;
		};
		
		private static method StateIdleAndNoOrder_Act_NotIdleAndHasOrder
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not make a decision."] call Assert.AreNotEqual;
			[_mKnowledge.Order, "AI did not create an order."] call Assert.IsNotNull;
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method AtBaseAttackOrder_Act_StatusMove
		{
			private ["_moveAction" as MoveAction];
		
			// Arrange
			_mRandomGenerator.Number = 0;
			_mWorld.LeaderPos = [0, 0, 0];
			_mKnowledge.Members pushBack [[0, 0, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI did not start movement."] call Assert.AreEqual;
			[1, count _mActionPerformer.MoveActions, "AI did not decide to perform a move action."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			[[200, 200, 0], _moveAction.Position, "AI moves to the wrong destination."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOff_Act_StatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mKnowledge.Members pushBack [[10, 10, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI movement was interrupted."] call Assert.AreEqual;
		};
		
		private static method ArrivingAtDestination_Act_StatusIdle
		{
			// Arrange
			_mLocationFactory1.Side = east;
			_mWorld.LeaderPos = [190, 190, 0];
			_mKnowledge.Members pushBack [[190, 190, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, MoveActionType.ClosingIn, [200, 200, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY1"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI does not halt at flag."] call Assert.AreEqual;
		};
		
		private static method AtEnemyLocationIdle_Act_StatusCapturing
		{
			private _leaderPos = [210, 210, 0];
			// Arrange
			_mLocationFactory1.Side = east;
			_mWorld.LeaderPos = _leaderPos;
			_mKnowledge.Members pushBack [_leaderPos] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Capturing, _mKnowledge.State, "AI has not changed state to capturing."] call Assert.AreEqual;
			[1, count _mActionPerformer.CaptureActions, "AI is not capturing."] call Assert.AreEqual;
		};
		
		private static method AfterCapturingLocation_Act_StatusIdle
		{
			// Arrange
			_mLocationFactory1.Side = west;
			_mWorld.LeaderPos = [190, 190, 0];
//			_mWorld.SquadPresenceAtResourceLocation = true;
			_mKnowledge.Members pushBack [[190, 190, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Capturing;
			_mKnowledge.CurrentAction = [60, [200, 200, 0], "FACTORY1"] new CaptureAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI trying to capture own flag."] call Assert.AreEqual;
		};
		
		private static method AttackingLocationCapturedBeforeArrival_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [25, 25, 0];
			_mKnowledge.Members pushBack [[25, 25, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI attacking but location is already captured."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToAttackOwnLocationNotPresentAndIdle_Act_NewOrderStatusIdle
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [110, 110, 0];
			_mKnowledge.Members pushBack [[110, 110, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [400, 400, 0], _mLocationOffice1, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is moving."] call Assert.AreEqual;
			
			//_action = _mKnowledge.CurrentAction as MoveAction;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToAttackOwnLocationAlreadyPresentAndIdle_Act_NewOrderStatusIdle
		{
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [410, 410, 0];
			_mKnowledge.Members pushBack [[410, 410, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [400, 400, 0], _mLocationOffice1, 0] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is not idle."] call Assert.AreEqual;
			
			//_action = _mKnowledge.CurrentAction as MoveAction;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToDefendOwnLocationAlreadyPresentAndIdle_Act_PatrolTheArea
		{
			private ["_action" as MoveAction];
		
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [410, 410, 0];
			//_mWorld.SquadPresenceAtResourceLocation = true;
			_mKnowledge.Members pushBack [[410, 410, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Defend, true, [400, 400, 0], _mLocationOffice1, 0] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			
			[_action is MoveAction, "Action is not a move action."] call Assert.IsTrue;
			[MoveActionType.Patrol, _action.Type, "Wrong move action type."] call Assert.AreEqual;
			[30, _action.Radius, "Wrong move radius."] call Assert.AreEqual;
			["LIMITED", _action.SpeedMode, "AI not moving LIMITED."] call Assert.AreEqual;
			[[400, 400, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			[OrderType.Defend, _mKnowledge.Order.Type, "AI's order has wrong type."] call Assert.AreEqual;
			["OFFICE1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OwnOrderToDefendOwnLocationPatrolling_Act_ContinuePatrolTheArea
		{
			private ["_action" as MoveAction];
		
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [410, 410, 0];
			_mKnowledge.Members pushBack [[410, 410, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Defend, true, [400, 400, 0], _mLocationOffice1, 20 * 60] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = false;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [350, MoveActionType.Patrol, [400, 400, 0], "MOVE", "LIMITED", "SAFE", "YELLOW", "OFFICE1", 30] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			
			[_action is MoveAction, "Action is not a move action."] call Assert.IsTrue;
			[MoveActionType.Patrol, _action.Type, "Wrong move action type."] call Assert.AreEqual;
			[30, _action.Radius, "Wrong move radius."] call Assert.AreEqual;
			["LIMITED", _action.SpeedMode, "AI not moving LIMITED."] call Assert.AreEqual;
			[[400, 400, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			[OrderType.Defend, _mKnowledge.Order.Type, "AI's order has wrong type."] call Assert.AreEqual;
			["OFFICE1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method SquadStationary_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [350, MoveActionType.Move, [200, 200, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY1"] new MoveAction;
			
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 295;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not stationary enough but timed out."] call Assert.AreEqual;
		};
		
		private static method SquadTemporaryStationary_Act_NoTimeoutStatusMoving
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, MoveActionType.Move, [200, 200, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY1"] new MoveAction;
			
			_mKnowledge.LeaderPos = [120, 120, 0];
			_mKnowledge.LeaderPosTime = 285;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI stationary but did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingButNeverArrives_Act_TimeoutStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [120, 120, 0];
			_mKnowledge.Members pushBack [[120, 120, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [120, MoveActionType.Move, [200, 200, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY1"] new MoveAction;
			_mTime.MissionTime = 300;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI movement did not timeout."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOffDetectingNearEnemiesIdle_Act_StatusEngaging
		{
			private ["_action" as MoveAction];
		
			// Arrange
			_mWorld.LeaderPos = [10, 10, 0];
			_mWorld.ClosestDetectedEnemy = [[50, 50, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[10, 10, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI did not engage near enemies."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			[_action is MoveAction, "Action is not an engage action."] call Assert.IsNotNull;
			["SAD", _action.WaypointType, "Engaging but not SAD."] call Assert.AreEqual;
		};
		
		private static method MovingToDestinationFarOffDetectingNearEnemiesMoving_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [150, 150, 0];
			_mWorld.ClosestDetectedEnemy = [[210, 210, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[150, 150, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [200, 200, 0], _mLocationFactory1, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, MoveActionType.ClosingIn, [200, 200, 0], "MOVE", "NORMAL", "AWARE", "YELLOW", "FACTORY1"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI did not complete its move."] call Assert.AreEqual;
		};
		
		private static method AllSquadMembersAreDeadMoving_Act_RespawnedAndStatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			[west, Technology.Transport] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.2;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher but it's not invented."] call Assert.IsFalse;
		};
		
		private static method SingleSquadMemberIsDead_Act_TakesAtLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			[west, Technology.Ordnance] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.2;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI did not pick a launcher."] call Assert.IsTrue;
			["launch_NLAW_F", _mActionPerformer.EquippedLauncherClassName, "AI did not pick correct launcher."] call Assert.AreEqual;
			["NLAW_F", _mActionPerformer.EquippedLauncherMagazineClassName, "AI did not pick correct launcher ammo."] call Assert.AreEqual;
		};
		
		private static method SingleSquadMemberIsDead_Act_DoesNotTakeAtLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			[west, Technology.Ordnance] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.4;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher."] call Assert.IsFalse;
		};
		
		private static method SingleSquadMemberIsDead_Act_TakesAaLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			[west, Technology.AntiAir] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.4;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI did not pick a launcher."] call Assert.IsTrue;
			["launch_B_Titan_F", _mActionPerformer.EquippedLauncherClassName, "AI did not pick correct launcher."] call Assert.AreEqual;
			["Titan_AA", _mActionPerformer.EquippedLauncherMagazineClassName, "AI did not pick correct launcher ammo."] call Assert.AreEqual;
		};
		
		private static method SingleSquadMemberIsDead_Act_DoesNotTakeAaLauncherAtRespawn
		{
			// Arrange
			_mWorld.LeaderPos = [300, 300, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[300, 300, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			[west, Technology.AntiAir] call _mInventedTechnologiesCollection.AddInventedTechnology;
			_mRandomGenerator.Number = 0.7;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI dead but not idle."] call Assert.AreEqual;
			[[0, 0, 0], _mWorld.LeaderPos, "AI did not respawn."] call Assert.AreEqual;
			[_mActionPerformer.EquipMemberWithLauncherCalled, "AI picked a launcher."] call Assert.IsFalse;
		};
		
		private static method OneOfTwoSquadMembersAreDead_Act_ReviveActionCreated
		{
			// Arrange
			_mWorld.LeaderPos = [500, 500, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[500, 500, 0], true] new TestUnitContainer;
			_mKnowledge.Members pushBack [[510, 510, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Reviving, _mKnowledge.State, "AI not reviving."] call Assert.AreEqual;
			private _currentAction = _mKnowledge.CurrentAction as ReviveAction;
			[_currentAction is ReviveAction, "Current action is not a revive action."] call Assert.IsTrue;
		};
		
		private static method OneOfTwoSquadMembersAreDeadMoving_Act_StatusIdle
		{
			// Arrange
			_mWorld.LeaderPos = [100, 100, 0];
			_mWorld.SquadMounted = false;
			_mKnowledge.Members pushBack [[100, 100, 0], true] new TestUnitContainer;
			_mKnowledge.Members pushBack [[110, 110, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, MoveActionType.Move, [600, 600, 0], "MOVE", "NORMAL", "SAFE", "YELLOW", "FACTORY2"] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI not completing move."] call Assert.AreEqual;
		};
		
		private static method OneOfTwoSquadMembersAreDeadEngaging_Act_StillMoving
		{
			private ["_moveAction" as MoveAction];
			
			// Arrange
			_mWorld.LeaderPos = [100, 100, 0];
			_mWorld.SquadMounted = false;
			_mWorld.ClosestDetectedEnemy = [[200, 200, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[100, 100, 0], true] new TestUnitContainer;
			_mKnowledge.Members pushBack [[110, 110, 0], false] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [600, 600, 0], _mLocationFactory2, 0] new Order;
			_mKnowledge.State = AiSquadState.Moving;
			_mKnowledge.CurrentAction = [300, MoveActionType.Engage, [200, 200, 0], "SAD", "NORMAL", "COMBAT", "RED", ""] new MoveAction;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI not completing move."] call Assert.AreEqual;
			_moveAction = _mKnowledge.CurrentAction as MoveAction;
			[_moveAction is MoveAction, "Current action is not a move action."] call Assert.IsTrue;
			[MoveActionType.Engage, _moveAction.Type, "AI not engaging."] call Assert.AreEqual;
			[[200, 200, 0], _moveAction.Position, "AI engaging in wrong direction."] call Assert.AreEqual;
		};

		private static method BrigadeLeaderOrderToDefendOwnLocationIdleAtLocation_EncounterEnemies_StatusMovingPatrolStealth
		{
			private ["_action" as MoveAction];
		
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = [410, 410, 0];
			_mWorld.ClosestDetectedEnemy = [[410, 510, 0]] new TestUnitContainer;
			_mKnowledge.Members pushBack [[410, 410, 0]] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Defend, true, [400, 400, 0], _mLocationOffice1, 20 * 60] new Order;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			_action = _mKnowledge.CurrentAction as MoveAction;
			
			[_action is MoveAction, "Action is not a move action."] call Assert.IsTrue;
			[MoveActionType.Engage, _action.Type, "Wrong move action type."] call Assert.AreEqual;
			[10, _action.Radius, "Wrong move radius."] call Assert.AreEqual;
			["MOVE", _action.WaypointType, "Not wypoint type MOVE."] call Assert.AreEqual;
			["STEALTH", _action.Behavior, "Not moving STEALTH."] call Assert.AreEqual;
			["YELLOW", _action.CombatMode, "Not in combat mode YELLOW."] call Assert.AreEqual;
			[[400, 400, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			[OrderType.Defend, _mKnowledge.Order.Type, "AI's order is not DEFEND."] call Assert.AreEqual;
			["OFFICE1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OrderToAttackPosition_PresentAndIdle_NewOrderStatusIdle
		{
			private _leaderPos = [145, 145, 0];
			
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = _leaderPos;
			_mKnowledge.Members pushBack [_leaderPos] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Attack, true, [150, 150, 0], classNull, 0] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = true;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Idle, _mKnowledge.State, "AI is not idle."] call Assert.AreEqual;
			
			[OrderType.Attack, _mKnowledge.Order.Type, "AI's order is not an attack order."] call Assert.AreEqual;
			[[200, 200, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
			["FACTORY1", _mKnowledge.Order.ResourceLocation.MarkerName, "AI's order has wrong location marker."] call Assert.AreEqual;
		};
		
		private static method OrderToDefendPosition_PresentAndIdle_NewOrderStatusPatrolling
		{
			private ["_moveAction" as MoveAction];
			private _leaderPos = [145, 145, 0];
			
			// Arrange
			_mRandomGenerator.Number = 0;
			_mLocationOffice1.Side = west;
			_mWorld.LeaderPos = _leaderPos;
			_mKnowledge.Members pushBack [_leaderPos] new TestUnitContainer;
			_mKnowledge.Order = [_mGroup, OrderType.Defend, true, [150, 150, 0], classNull, 0] new Order;
			_mKnowledge.OrderIsGivenByBrigadeLeader = true;
			_mKnowledge.State = AiSquadState.Idle;
			
			// Act
			call _mBrain.Act;
			
			// Assert
			[AiSquadState.Moving, _mKnowledge.State, "AI is not moving."] call Assert.AreEqual;
			
			_moveAction = _mActionPerformer.MoveActions select 0;
			[[MoveActionType.Patrol] call MoveActionTypeMeta.ToString, [_moveAction.Type] call MoveActionTypeMeta.ToString, "AI not patrolling."] call Assert.AreEqual;
			
			[OrderType.Defend, _mKnowledge.Order.Type, "AI's order is not a defend order."] call Assert.AreEqual;
			[[150, 150, 0], _mKnowledge.Order.TargetPosition, "AI's order has wrong position."] call Assert.AreEqual;
		};
	};
};
