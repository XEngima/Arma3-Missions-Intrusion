/*
 * Name:	ActionService
 * Date:	2019-08-22
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A base class for all action services.
 */

using Sqx.Services;
using Intrusion.Common;

namespace Intrusion.Ai
{
	public class ActionService : Service, IActionService
	{
		private fields ["_mTime" as IMissionTime, "_mTimeoutTime" as Scalar];
		
		// Creates a ActionService object.
		public constructor("_time" as IMissionTime, "_timeoutTime" as Scalar, "_world" as IWorld, "_actionPerformer" as IActionPerformer)
		{
			call _base.Constructor;
			
			_mTime = _time;
			_mTimeoutTime = _timeoutTime;
			_self.World = _world;
			_self.ActionPerformer = _actionPerformer;
			
			_self.Success = false;
		};
		
		protected property IActionPerformer ActionPerformer { get; private set; };
		
		protected property IWorld World { get; private set; };
		
		// Gets whether the service reached its goals or not (if it timed out).
		public property Boolean Success { get; protected set; };
		
		// Checks if the action has timed out or not.
		// Returns (Boolean): true if the action has timed out. Otherwise false.
		protected method Boolean CheckActionTimeout()
		{
			if ((call _mTime.GetMissionTime) > _mTimeoutTime) then {
				_self.Success = false;
				return true;
			};
			
			return false;
		};
		
		// Called from RunAsync to reset things when starting a new processing.
		protected override method Initialize()
		{
			_self.Success = false;
		};
	};
};
