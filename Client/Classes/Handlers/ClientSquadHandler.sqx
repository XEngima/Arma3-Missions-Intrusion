/*
 * Name:	ClientSquadHandler
 * Date:	2017-12-01
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all about squads on the client.
 */

using Intrusion.Common;

namespace Intrusion.Client
{
	public class ClientSquadHandler
	{
		private static fields ["_mProfessionConfig" as IProfessionConfig, "_mSquadConfig" as ISquadConfig];
	
		public static method Init("_professionConfig" as IProfessionConfig, "_squadConfig" as ISquadConfig)
		{
			_mProfessionConfig = _professionConfig;
			_mSquadConfig = _squadConfig;
		};
	
		// Notifies the player that his/her profession has changed.
		// Called when any group's profession has changed.
		// _group (Group): The group that has changed profession.
		// _professionType (ProfessionType): The new profession type.
		public static method OnGroupProfessionChanged("_group" as Group, "_professionType" as ProfessionType)
		{
			if (_group == group player) then {
				call ProfessionDialog.CloseDialog;
				["Your group now belongs to the brigade's " + ([_professionType] call _mProfessionConfig.GetProfession).Name] call ClientMessageHandler.ShowMessage;
			};
		};
		
		// Notifies the player that his/her profession could not be changed.
		// Called when any group's profession did not change as desired.
		// _group (Group): The group that tried to change profession.
		// _reason (String): The reason that the group profession was now changed.
		public static method OnGroupProfessionChangeRejected("_group" as Group, "_reason" as String)
		{
			if (_group == group player) then {
				[_reason] call ClientMessageHandler.ShowMessage;
			};
		};
		
		// Adds rating to all members of a squad.
		// _rating (Scalar): The amout of rating to add.
		// _group (Group): The squad/group to add rating to.
		public static method AddSquadRating("_rating" as Scalar, "_group" as Group)
		{
			private ["_okDistance" as Boolean, "_calculatedRating" as Scalar];
			
			_okDistance = true;
			
			{
				if (vehicle _x distance vehicle leader _group > _mSquadConfig.RatingSquadLeaderMaxDistance) then {
					_okDistance = false;
				};
			} foreach units _group;

			if (_okDistance) then
			{
				_calculatedRating = (_rating * count units _group);

				if (_calculatedRating < 0) then {
					_calculatedRating = 0;
				};
				
				player addRating _calculatedRating;
				ClientState.CurrentRank = ([rating player] call RankMeta.GetRankByRating);
			};
		};
	};
};
