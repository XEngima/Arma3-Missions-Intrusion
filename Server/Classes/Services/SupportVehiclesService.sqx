/*
 * Name:	SupportVehiclesService
 * Date:	2019-10-04
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A service that "heals" vehicles when a support vehicle comes near.
 */

using Intrusion.Common;
using Intrusion.Communication;

namespace Intrusion.Server
{
	public class SupportVehiclesService : Service
	{
		// Creates a SupportVehiclesService object.
		public constructor()
		{
		};
		
		private method Object GetClosestVehicleWithinHealDistance("_supportVehicle" as Object)
		{
			{
				if (_x != _supportVehicle) then {
					if (_x distance _supportVehicle < 10) then {
						return _x;
					};
				};
			} foreach vehicles;
			
			return objNull;
		};
		
		protected override method Run()
		{
			private ["_intrusionVehicle" as IntrusionVehicle, "_closeVehicle" as Object];
			
			while { true } do {
				{
					_intrusionVehicle = _x getVariable ["IntrusionVehicle", classNull];
					
					if (!isNull _intrusionVehicle && { _intrusionVehicle.OwnerProfession == ProfessionType.Repair }) then
					{
						_closeVehicle = [_intrusionVehicle.Vehicle] call _self.GetClosestVehicleWithinHealDistance;
						
						if (!isNull _closeVehicle && { alive _closeVehicle }) then
						{
							if (([_closeVehicle] call Functions.GetVehicleDamage) > 0.1 || !canMove _closeVehicle) then {
								_closeVehicle setDamage 0;
								["ClientEventReciever.OnVehicleSupported", [_closeVehicle, _intrusionVehicle.Vehicle, "Your vehicle was repaired by allied repair vehicle.", "Vehicle was repaired."]] call Remote.Invoke;
							};
						};
					};
					
					if (!isNull _intrusionVehicle && { _intrusionVehicle.OwnerProfession == ProfessionType.Fuel }) then
					{
						_closeVehicle = [_intrusionVehicle.Vehicle] call _self.GetClosestVehicleWithinHealDistance;
						
						if (!isNull _closeVehicle && { alive _closeVehicle }) then
						{
							if (fuel _closeVehicle < 0.9) then
							{
								_closeVehicle setFuel 1;
								["ClientEventReciever.OnVehicleSupported", [_closeVehicle, _intrusionVehicle.Vehicle, "Your vehicle was refueld by allied refuel vehicle.", "Vehicle was refueld."]] call Remote.Invoke;
							};
						};
					};
					
					if (!isNull _intrusionVehicle && { _intrusionVehicle.OwnerProfession == ProfessionType.Ammo }) then
					{
						_closeVehicle = [_intrusionVehicle.Vehicle] call _self.GetClosestVehicleWithinHealDistance;
						
						if (!isNull _closeVehicle && { alive _closeVehicle }) then
						{
/*
							private _maxAmmoMainGun = _closeVehicle getVariable ["MaxAmmoMaingun", 0];
						    private _weapons = weapons _closeVehicle;
						    private _ammoMainGun = 0;
						    
						    if (count _weapons > 0) then {
						    	_ammoMainGun = _closeVehicle ammo (_weapons select 0);
						    };
						    
							// if (_ammoMainGun < _maxAmmoMainGun) then {
*/						    
							if ([_closeVehicle] call Functions.GetVehicleAmmo < 0.9) then
							{
								_closeVehicle setVehicleAmmo 1;
								["ClientEventReciever.OnVehicleSupported", [_closeVehicle, _intrusionVehicle.Vehicle, "Your vehicle was rearmed by allied ammo vehicle.", "Vehicle was rearmed."]] call Remote.Invoke;
							};
						};
					};					
				} foreach vehicles;
				
				sleep 5;
			};
		
			call _base.Run;
		};
	};
};
