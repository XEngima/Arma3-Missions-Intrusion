/*
 * Name:	ResourceCollector
 * Date:	2017-11-18
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * A side manager that collects all generated resources into the side's resource book.
 */

using Intrusion.Common;

namespace Intrusion.Server
{
	public class ResourceCollector
	{
		private fields ["_mMissionTime" as IMissionTime, "_mGameplayConfig" as IGameplayConfig, "_mResourceLocationHandler" as IResourceLocationHandler, "_mMatchLengthMinutes" as Scalar, "_mResourceBook" as ResourceBook, "_mUnitCounter" as IUnitCounter];
		private fields ["_mLastAquireTime" as Scalar, "_mSecondsSinceLastAquire" as Scalar];
	
		// Creates a ResourceCollector object.
		public constructor(
			"_missionTime" as IMissionTime, 
			"_gameplayConfig" as IGameplayConfig, 
			"_resourceLocationHandler" as IResourceLocationHandler, 
			"_matchLengthMinutes" as Scalar, 
			"_side" as Side, 
			"_resourceBook" as ResourceBook, 
			"_unitCounter" as IUnitCounter)
		{
			_mMissionTime = _missionTime;
			_mGameplayConfig = _gameplayConfig;
			_mResourceLocationHandler = _resourceLocationHandler;
			_self.Side = _side;
			_mResourceBook = _resourceBook;
			_mUnitCounter = _unitCounter;
			_mMatchLengthMinutes = _matchLengthMinutes;
			
			_mLastAquireTime = 0;
			_mSecondsSinceLastAquire = 0;
		};
		
		// Gets the side of the resource manager.
		public property Side Side { get; private set; };
		
		// Calculates how much production has been generated since last aquire.
		// Returns (Scalar): Amount of production.
		private method Scalar AquireProduction {
			private ["_playingUnitsCount" as Scalar];
		
			private _pointsPerFacility = (_mGameplayConfig.TotalProduction / _mResourceLocationHandler.FactoryLocationsCount) * (_mSecondsSinceLastAquire / (_mMatchLengthMinutes * 60));
			private _neutralCount = [civilian] call _mResourceLocationHandler.GetFactoriesCountBySide;
			private _ourCount = [_self.Side] call _mResourceLocationHandler.GetFactoriesCountBySide;
			
			private _points = _pointsPerFacility * (_ourCount + (_neutralCount / 2));
			
			// Balance up for missing units
			_playingUnitsCount = call _mUnitCounter.CountUnitsInPlay;
			_points = _points - (_points * (1 - (_playingUnitsCount / _mUnitCounter.LobbySlotsCount)));
			
			// Balance up for game length
			_points = _points * (_mMatchLengthMinutes / 60);
			
			_points
		};
		
		// Calculates how much technology has been generated since last aquire.
		// Returns (Scalar): Amount of technology.
		private method Scalar AquireTechnology {
			private _pointsPerFacility = (_mGameplayConfig.TotalResearch / _mResourceLocationHandler.TechLabLocationsCount) * (_mSecondsSinceLastAquire / (_mMatchLengthMinutes * 60));
			private _neutralCount = [civilian] call _mResourceLocationHandler.GetTechLabsCountBySide;
			private _ourCount = [_self.Side] call _mResourceLocationHandler.GetTechLabsCountBySide;
			
			private _points = _pointsPerFacility * (_ourCount + (_neutralCount / 2));
			
			_points
		};
		
		// Aquires map resources and makes deposits to the resource book.
		public method CollectResources {
			private ["_production" as Scalar, "_technology" as Scalar, "_time" as Scalar];
			
			_time = (call _mMissionTime.GetMissionTime);
			_mSecondsSinceLastAquire = _time - _mLastAquireTime;
			
			_production = call _self.AquireProduction;
			_technology = call _self.AquireTechnology;
			
			[_production] call _mResourceBook.DepositProduction;
			[_technology] call _mResourceBook.DepositResearch;
			
			_mLastAquireTime = _time;
		};
	};
};
