/*
 * Name:	TestResourceLocationHandler
 * Date:	2019-04-11
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles resource location stuff for test purposes.
 */

using Intrusion.Common;
using Intrusion.Server;

namespace Intrusion.Tests.Helpers
{
	public class TestResourceLocationHandler : IResourceLocationHandler
	{
		private fields [
			"_mFactorySides" as Array /* of Side */, "_mFactorySideCounts" as Array /* of Scalar */,
			"_mTechLabSides" as Array /* of Side */, "_mTechLabSideCounts" as Array /* of Scalar */
		];
		
		public constructor("_factoryLocationsCount" as Scalar, "_techLabLocationsCount" as Scalar)
		{
			_self.WinnersLocation = classNull;
			
			_mFactorySides = [];
			_mFactorySideCounts = [];
			_mTechLabSides = [];
			_mTechLabSideCounts = [];
			
			_self.FactoryLocationsCount = _factoryLocationsCount;
			_self.TechLabLocationsCount = _techLabLocationsCount;
			
			_self.ResourceLocationsAverageDistance = 280;
		};
		
		// Gets the average distance between all resource locations.
		public property Scalar ResourceLocationsAverageDistance { get; private set; };
		
		public method AddFactoiesCountBySide("_side" as Side, "_sideCount" as Scalar)
		{
			_mFactorySides pushBack _side;
			_mFactorySideCounts pushBack _sideCount;
		};
		
		public method AddTechLabsCountBySide("_side" as Side, "_sideCount" as Scalar)
		{
			_mTechLabSides pushBack _side;
			_mTechLabSideCounts pushBack _sideCount;
		};
		
		// Gets the location selected as the Winner's location.
		public property ResourceLocation WinnersLocation { get; set; };
		
		// Gets the number of factory locations. 
		public property Scalar FactoryLocationsCount { get; set; };
		
		// Gets the number of tech lab locations. 
		public property Scalar TechLabLocationsCount { get; set; };
		
		// Get the number of factories owned by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of factories owned by the side.
		public method Scalar GetFactoriesCountBySide("_side" as Side)
		{
			scopeName "main";
			
			for "_i" from 0 to (count _mFactorySides) - 1 do {
				if (_mFactorySides select _i == _side) then {
					(_mFactorySideCounts select _i) breakOut "main";
				};
			};
			
			0
		};
		
		// Get the number of tech labs ownd by a side.
		// _side (Side): The side that is asked for.
		// Returns (Scalar): The number of tech labs owned by the side.
		public method Scalar GetTechLabsCountBySide("_side" as Side)
		{
			scopeName "main";
			
			for "_i" from 0 to (count _mTechLabSides) - 1 do {
				if (_mTechLabSides select _i == _side) then {
					(_mTechLabSideCounts select _i) breakOut "main";
				};
			};
			
			0
		};
		
		// Sets a new owner for a resource location and sends resource location updates to clients.
		// _markerName (String): Name of the marker associated with the flag.
		// _side (Side): The side of the player that captured the flag.
		public method SetNewFlagOwner("_markerName" as String, "_side" as Side)
		{
		};
		
		public method SetNewDominantSide("_markerName" as String, "_side" as Side)
		{
		};
		
		// Finds all resource locations marked on map with names "FactoryX" and "TechLabX" and creates
		// resource locations for them all.
		public method AquireAllResourceLocations()
		{
		};
		
		// Creates guarding guerilla units on all resource locations.
		public method CreateGuerillaUnits()
		{
		};
		
		// Get the resource location collection.
		// Returns (ResourceLocationCollection): The resource location collection.
		public method ResourceLocationCollection GetResourceLocationCollection()
		{
		};
	};
};
