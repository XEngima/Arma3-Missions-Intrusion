/*
 * Name:	AiSquadHandler
 * Date:	2019-04-12
 * Version: 1.0
 * Author:  Engima
 *
 * Description:
 * Handles all AI squads.
 */

using Intrusion.Common;

namespace Intrusion.Ai
{
	public class AiSquadHandler : IAiSquadHandler
	{
		private fields ["_mSquads" as Array /* of AiSquad */, "_mProfessionConfig" as IProfessionConfig];
		
		// Creates a AiSquadHandler object.
		public constructor {
			_mSquads = [];
			
			_self.AiWarriorTypes = [
				ProfessionType.Motorized,
				ProfessionType.Mechanized,
				ProfessionType.Armored,
			];
		};
		
		public property Array AiWarriorTypes { get; private set; };
		
		// Adds an AI squad to the AI squad handler.
		// _aiSquad (AiSquad): The AI squad to add.
		public method AddSquad("_aiSquad" as AiSquad)
		{
			_mSquads pushBack _aiSquad;
		};
		
		// Counts all AI units. Alive as well as dead units "waiting for respawn".
		// Returns (Scalar): The number of AI units.
		public method Scalar CountAllUnits()
		{
			private ["_count" as Scalar];
			
			_count = 0;
			
			{
				_count = _count + count _x.Members;
			} foreach _mSquads as AiSquad;
			
			_count
		};
		
		// Counts all AI units of a side. Alive as well as dead units "waiting for respawn".
		// _side (Side): The side to ask for.
		// Returns (Scalar): The number of AI units on the side.
		public method Scalar CountAllUnitsOfSide("_side" as Side)
		{
			private ["_count" as Scalar];
			
			_count = 0;
			
			{
				if (side _x.Group == _side) then {
					_count = _count + count _x.Members;
				};
			} foreach _mSquads as AiSquad;
			
			_count
		};
		
		// Gets all AI squads.
		// Returns (Array): All AI squads as an array of AiSquad.
		public method Array GetAllSquads()
		{
			_mSquads
		};
		
		// Gets a random an possible to implement profession type for the group.
		// _side (Side): The side of the group.
		// _unitCount (Scalar): The number of units in the group.
		public method ProfessionType GetRandomProfessionType("_side" as Side, "_unitCount" as Scalar)
		{
			private ["_ok" as Boolean, "_professionType" as ProfessionType, "_profession" as Profession, "_squadCollection" as SquadCollection, "_tries" as Scalar];
			
			_ok = false;
			_tries = 0;
			
			while { !_ok && _tries < 25 } do {
				_professionType = selectRandom _self.AiWarriorTypes;
				_profession = [_professionType] call _mProfessionConfig.GetProfession;
				_ok = _unitCount >= _profession.MinGroupSize && (_unitCount <= _profession.MaxGroupSize || _profession.MaxGroupSize == 0);
				
				if (_ok) then {
					_squadCollection = call PublicVariableHandler.GetSquadCollection;
					_ok = [_side, _professionType] call _squadCollection.ProfessionTypeAvailable;
				};
				
				_tries = _tries + 1;
			};
			
			if (_tries == 25) then {
				_professionType == ProfessionType.Infantry;
			};

			_professionType
		};
	};
};
